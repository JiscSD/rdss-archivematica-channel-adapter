// Code generated by go-bindata.
// sources:
// message-api-spec/schemas/enumeration.json
// message-api-spec/schemas/header.json
// message-api-spec/schemas/intellectual_asset.json
// message-api-spec/schemas/material_asset.json
// message-api-spec/schemas/research_object.json
// message-api-spec/schemas/types.json
// message-api-spec/messages/body/metadata/create/README.md
// message-api-spec/messages/body/metadata/create/request.json
// message-api-spec/messages/body/metadata/create/request_schema.json
// message-api-spec/messages/body/metadata/delete/README.md
// message-api-spec/messages/body/metadata/delete/request.json
// message-api-spec/messages/body/metadata/delete/request_schema.json
// message-api-spec/messages/body/metadata/read/README.md
// message-api-spec/messages/body/metadata/read/request.json
// message-api-spec/messages/body/metadata/read/request_schema.json
// message-api-spec/messages/body/metadata/read/response.json
// message-api-spec/messages/body/metadata/read/response_schema.json
// message-api-spec/messages/body/metadata/update/README.md
// message-api-spec/messages/body/metadata/update/request.json
// message-api-spec/messages/body/metadata/update/request_schema.json
// message-api-spec/messages/body/vocabulary/patch/README.md
// message-api-spec/messages/body/vocabulary/patch/request.json
// message-api-spec/messages/body/vocabulary/patch/request_schema.json
// message-api-spec/messages/body/vocabulary/read/README.md
// message-api-spec/messages/body/vocabulary/read/request.json
// message-api-spec/messages/body/vocabulary/read/request_schema.json
// message-api-spec/messages/body/vocabulary/read/response.json
// message-api-spec/messages/body/vocabulary/read/response_schema.json
// message-api-spec/messages/header/header.json
// message-api-spec/messages/header/header_schema.json
// message-api-spec/messages/message.json
// message-api-spec/messages/message_schema.json
// DO NOT EDIT!

package specdata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemasEnumerationJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x58\x4f\x6f\x23\xbb\x0d\xbf\xef\xa7\x30\xdc\x1e\xfb\xe2\xfe\x7b\x3d\xe4\x96\xb5\x77\xbb\x46\x93\xd8\xb0\x93\xb4\x40\xd1\x03\x2d\x71\x66\x98\x68\x24\x95\x94\xec\x18\xc5\xfb\xee\x85\x66\xec\xad\xa5\xb1\xd7\xe9\x3b\x04\x81\x7e\xa4\xf8\x5f\x24\xc7\xff\xf9\x34\x1a\x8d\x49\x8f\x6f\x47\xe3\x26\x04\x2f\xb7\x93\xc9\x6e\xb7\xbb\x79\x25\x51\x37\xa0\x6e\xe2\xdb\x84\xb5\xc8\x44\x54\x83\x2d\x4c\xd0\xc6\x16\x19\x02\x39\x7b\xf3\x2a\xce\x4e\x7e\x33\xfe\x5d\x12\xf0\xdb\x9e\x7e\x94\x72\x3b\x99\x24\xea\x4f\x3d\x7a\xe3\xb8\x9e\x68\x86\x2a\xfc\xf4\xfb\x3f\x1f\x24\x1d\xee\x69\xac\xc8\x52\x12\x27\xe3\xdb\x51\xb2\x65\x34\x1a\x83\x52\x28\xf2\xb4\xf7\xf8\x1d\x1b\x8d\xc6\x49\xf5\xf8\x76\xf4\xcf\xc3\x79\x34\x1a\x3b\x8f\xb6\x13\x73\x38\x0b\x54\x58\x47\x60\x8d\xfa\x14\x56\xce\x06\x76\xc6\xe4\x28\xa3\x04\x26\x15\x0a\x5e\xe3\x04\xf5\xf8\x00\xfc\xab\xfb\xff\x4b\x4f\x1f\xab\x06\xd5\x9b\xc4\xf6\xba\x61\xad\xfe\x39\xb3\xab\x81\x3f\xfe\xfc\x97\xf3\x42\x35\x04\xbc\x2e\x30\x45\xc4\x17\xa6\x82\xf7\xec\xb6\x05\xb6\x05\x32\xb0\x31\x98\xfb\xef\xf7\x4c\x75\x53\xba\x9a\x42\x32\xf0\x9f\x11\x0a\x88\x44\x62\x8e\xb4\x4e\x53\x45\x39\xe6\x9d\x14\xf7\x7c\xdc\x18\x92\xe6\x52\x34\x2b\x32\xf8\x2c\xd7\x32\xcc\x54\x93\x05\xf3\x95\x72\x97\x42\x13\xdb\x8d\x05\x32\xf3\x16\xea\x8c\x82\xef\x81\x21\x79\xf5\x84\xef\x21\x33\x87\x51\x90\xb7\x5d\xe9\x3e\x80\x04\xe4\x52\x28\xd9\x80\xdc\xa2\x26\x08\x58\xd2\xd2\x55\x52\x03\x38\x30\x58\x51\x4c\x3e\x9c\x77\x92\x34\xda\x90\x62\xc5\xd7\x73\x7c\xb7\xfa\x5b\x96\x4a\xfe\x07\x6d\x4f\x81\x0d\x6d\x94\xd3\x99\xfa\xd9\x62\x7e\x7a\xfc\x72\xf7\xf8\x87\x3f\x65\xc0\x7c\xbd\x7e\x3c\x05\xbe\x81\xd5\xb9\x07\xf3\xf5\xe7\xc7\xfc\xbc\x2e\xce\x4f\xd3\xd3\xf3\x7d\xc9\x70\xbf\x9e\xcf\x4e\xcf\xcb\x87\xe2\xfc\x5c\x9e\x57\xf7\xa7\xe7\xb5\x8b\xac\x30\xe7\x79\x5e\x66\x3a\x8b\x1b\xcf\xab\xc7\xf3\xd1\x6e\x51\x04\x6a\x9c\x1a\x10\xf9\x71\xac\xa7\xae\x6d\xc1\x66\xe5\xfa\x65\x8b\x36\x2b\x98\x99\x53\xb1\x4d\xd8\x8f\x74\x5d\x4f\xeb\x03\x06\xd0\x10\x60\xda\xbd\xac\x53\x05\x47\xca\xb3\xd7\x17\x28\x33\x34\x78\x9e\xb2\x42\xc8\xac\x7f\x71\x0a\x36\xd1\x00\xef\x2f\x53\x96\x10\x54\x73\xde\x1b\xb7\x79\x45\x15\x5e\xc0\xc4\x2b\xde\x58\xc7\x2d\x98\x53\xf9\x0d\xd5\xcd\xe9\x79\x8b\xbc\xff\x96\xb0\xf3\x8a\xb8\x06\x4b\xd2\xbd\xc2\x95\x33\x57\xb4\x55\xd1\x6a\xe4\x4c\x9b\x93\x40\xb6\x9e\x5b\x09\x14\x62\x92\x92\xf5\xf4\xd4\xe5\xe4\x9b\x33\xc5\x2d\xf1\xce\x8a\xe3\x73\xdd\x89\xf3\x99\x50\x93\x84\x7e\xbc\xdd\xd5\x68\xd5\xfe\x22\x35\x86\xc6\x31\x85\x8c\x41\x27\x32\x6d\x62\xc8\x55\x81\xde\x3a\x05\xb9\x2c\xe8\xee\x5f\x8f\xd1\xf5\xfa\x52\x0d\x94\x76\x28\xd7\xb6\xc8\x8a\xf2\x44\x0d\x83\x59\x45\x0e\x0d\xf2\x17\x1d\x15\x94\xa1\xac\xdd\x16\xd9\xb6\xc5\x9b\x68\x10\x4c\x68\x72\x84\x29\x14\x3d\x38\x95\xc4\x05\xb1\x2e\x14\x21\xf7\xec\x2a\x14\x21\x67\xc1\x7c\x76\xba\x08\xb8\x20\xb0\xca\xf4\x89\x6a\x9c\xcb\xfc\x92\x37\x32\x46\xf2\x4e\x69\x0c\xd9\xba\x48\x8d\x37\xb0\x3f\x1f\x70\x8f\x2c\xce\xce\xff\x8f\x5e\xbd\x58\x4d\xf3\x8e\x75\x34\x15\x79\x7e\x61\xde\xf5\x4a\xae\xd7\x3c\xe8\x96\x6c\x5f\x67\x79\x19\xa5\x35\x06\x54\x58\x76\x72\x32\xdf\x20\xc0\x9d\x05\xb3\x97\x3c\xb4\x5d\xd7\xe9\x87\xbc\x1b\x12\x52\x3b\x1a\xc2\x0f\x60\xa1\xce\xc5\xa0\xa6\x82\x91\xec\x16\x25\x50\x5d\x0a\xf0\xec\x74\x54\x83\xfc\xa6\xd6\x72\x8f\x50\x14\xdf\xd9\x07\x78\xe0\x7e\xc0\x76\x53\xbe\x4c\x93\xf6\x92\xa1\xf3\xff\x0b\xfc\x79\xf4\xaf\xec\xa2\xff\x95\x3d\x42\xa2\x4f\x63\xbf\x40\x07\x25\x7c\x78\xcb\xa7\x91\x44\xef\x84\x52\xa3\x7a\x4e\x39\x39\x5f\x0f\x27\xfb\x48\x37\x7b\x3e\xf0\xd4\xc1\x87\xc8\xc5\x6e\xd7\x26\x41\x52\x3c\xb3\x6e\x8d\x2b\x30\x8d\xfd\x5e\x3d\x80\x2f\xc8\xd0\xa8\x78\xef\x87\x52\x0c\x0e\x30\xaa\x29\x80\x59\x53\x6d\x21\x19\xf8\x02\x86\xf4\x50\xbf\xdb\x59\xe3\xf2\xe1\x54\xd1\x3b\x85\xfd\x34\x2d\xd6\x79\x81\xd5\xa9\xc0\xf2\xfb\x87\x89\x3b\xa3\x44\x9b\x82\x51\xd1\x0c\x74\xb4\x54\xf3\x00\xec\x67\xd6\xa1\xa1\xe6\x55\xe2\x0d\x0d\x7b\x54\x1c\xcc\xe3\xed\x59\x87\xb6\xc4\x51\x7a\xdb\xcf\x66\xb8\xab\xd9\x8f\xf5\x70\x0a\x28\xf9\xce\x3d\xa5\x80\xfa\xf3\x3e\x07\xd7\xd1\x7b\x83\xa9\x29\x3f\xb9\x4b\x94\xf2\x56\x6a\x1b\x64\xe3\x40\xfe\x01\x2e\xb8\x1b\x90\xe3\x8a\x91\xf3\x1f\xd1\xaf\x45\x2b\x90\x47\xdc\xbd\x20\xa7\xe2\x59\x54\x39\x65\xc9\xb8\x25\x17\xe5\x12\x19\x38\xe4\x58\x03\x1d\x98\xb3\xad\xb0\x42\x46\xab\x4a\x4b\xf9\x88\x17\x8e\x1d\xd7\xb6\x92\x5f\x1f\xf0\x41\x1c\x5a\x4f\x66\x18\xb4\x0e\x2d\x78\x5f\x80\x09\x6c\xf8\xea\xb8\x2d\x9d\x59\x1c\x3f\x54\xce\xd0\xfa\xc1\xa2\xc0\x94\x49\x5b\xe1\x96\x70\x37\x74\x2c\xa1\xa5\x57\xc8\xb4\x45\xfd\x95\x5d\x5b\x24\xbe\x5b\x9f\x4b\x95\x69\xbf\x45\x1b\x16\xb6\x08\xef\x01\x2f\xcd\xf0\x66\x9f\xdb\xd6\x40\x8f\x66\x53\x15\x04\xf5\xc2\xce\x8a\xd2\xe8\x58\xbb\xe6\xfc\x00\x01\xb9\x58\x3a\x48\x3e\xf7\xd7\x06\x20\x49\x51\x4a\x8c\xff\x8e\xc4\x65\xcc\x57\x3d\x3a\x2c\xd3\x25\xf0\xc0\x93\x1e\x5b\x54\x97\xde\xa3\x74\xc1\xfa\xc0\xe7\x36\x87\x19\x0a\xd5\x76\x1e\xb0\xcd\x3f\xca\x02\xa9\xfc\x03\x0a\xa2\xa6\x2c\x76\x1b\xe7\xde\xca\xf3\x1a\x55\xd9\x3d\x94\xb3\x87\x02\xfe\xbb\xe3\x37\x69\x9c\x2f\x95\xa5\xe7\x26\x98\xb9\x88\xef\xd0\x2e\xc1\xe7\xf3\x87\xca\x6f\xe0\x57\x17\xd9\xe6\x79\x30\x08\x6c\xc9\xd6\x8b\x6e\xd1\xcf\x5a\xa6\xdb\xa6\x85\xba\x94\xd1\x46\x21\x95\x1e\x47\x37\xc8\xae\x2d\x71\x10\x8a\x5c\x78\xe4\x2a\xb5\x5d\xab\x30\x9f\xef\xe8\x99\x72\x56\x46\xef\x38\x0c\x5f\x40\x36\x89\x1b\xb7\xfb\xf2\xde\xd0\x66\x60\x8b\xb8\x2a\xec\x20\x1f\x8a\xa1\xf8\xf4\x0f\x0d\x0a\xc9\x8c\x44\x90\xc3\xb0\xdd\xdb\x37\xeb\x76\x19\xb4\xc3\x8d\x50\x3e\x02\x76\x8e\xdf\x2a\xe3\x32\xab\x52\x69\xfa\xcb\x9f\x88\x12\x1c\x43\x8d\xeb\x00\x21\x5e\xf9\x1e\x75\xd6\x90\xcd\xf4\x59\x04\x2e\x31\x57\x55\x1d\xf4\x23\x6d\xd7\x8b\x7b\x9d\xfd\x44\xf0\xed\xe9\x69\x79\x5e\x60\xf4\x69\x5a\x7f\xc4\xfa\xef\x9c\x5c\xfc\x04\xd4\x13\x52\x15\x95\xdf\xb1\x3d\xe5\x6e\xe3\xba\x2b\xb9\xfe\x4f\xe9\xef\x97\x4f\xff\x0d\x00\x00\xff\xff\x5d\xa5\xca\x5a\x99\x14\x00\x00")

func schemasEnumerationJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemasEnumerationJson,
		"schemas/enumeration.json",
	)
}

func schemasEnumerationJson() (*asset, error) {
	bytes, err := schemasEnumerationJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schemas/enumeration.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemasHeaderJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\xc1\x6e\xdb\x30\x0c\xbd\xe7\x2b\x0c\x6f\xc7\x36\xde\x61\xa7\xdc\x86\x6e\x40\x7b\xda\x80\x16\xbb\x0c\x3d\xa8\x16\xe3\x30\xb3\x25\x85\x94\x96\x05\x43\xfe\x7d\x90\xe3\x38\x4e\x23\xb9\x09\x5c\xe7\x12\x20\xb4\xf9\xf8\xc8\x47\x3d\xeb\xdf\x24\x49\x52\x94\xe9\x2c\x49\x17\xd6\x1a\x9e\x65\xd9\x7a\xbd\x9e\x2e\x91\xf3\xa9\xc8\xa7\xee\x77\x46\x92\x39\xe3\x7c\x01\x95\xc8\x16\x20\x24\xd0\x74\xc9\x5a\x65\x1f\xd2\x1b\x9f\xfb\x71\xf7\x68\x0f\x30\xcb\x32\xff\xf4\x76\x17\x9d\x6a\x2a\x32\x49\x62\x6e\x6f\x3f\x7d\x6e\x40\x9a\x3c\x09\x73\x54\x68\x51\x2b\x4e\x67\x89\xa7\x91\x24\xe9\x0e\xbf\xfd\x9f\x24\xa9\xdd\x18\xf0\xd8\xfa\x65\x09\xb9\xad\x53\xeb\xb8\x21\x6d\x80\x2c\x02\x77\xde\x4e\x92\xb4\x02\x66\x51\xc0\x83\x3c\x0a\x7b\x9e\x04\xf3\x33\xbb\xf4\x35\xb9\x69\x32\xeb\xf0\xcc\x9c\x43\x99\xb6\xa0\xdb\x9b\x43\xd9\x5c\x13\x41\x29\xfc\x6b\xd7\x2e\xdd\x74\x7c\x57\x0a\xe6\x01\x95\x41\xb9\x0a\xa8\xee\x20\x54\xff\xa8\x4a\x1f\x8f\xa7\x9d\x60\xe3\xd2\xa8\x8b\x04\x59\x10\x58\x47\xea\x8b\x94\x04\x83\xc6\x11\x15\x42\x69\xf5\xad\x32\x76\xf3\x68\x09\x55\xd1\x3f\x0a\xac\x50\x15\x51\x16\xe1\xce\x9a\x9c\x3e\xdc\x47\x58\x39\x50\x79\x74\xcc\x41\xe0\x36\xa9\x0f\xf9\x1e\xd9\x6a\xda\x5c\x04\xbc\xcf\x09\xe2\xfe\x01\x62\xd4\x6a\x0c\x21\x18\xaa\x9f\x40\xe1\xb2\x40\xa4\xe9\x4e\xcb\x21\x9b\x38\x68\x03\x6a\x02\x5f\x81\x73\x42\x63\x47\x1a\xc0\x39\x3c\x0a\x50\xfe\x34\x69\xba\x2a\x81\xc9\x2b\x22\x29\xc1\xca\x21\x81\x77\xc6\x5f\x21\xaf\x8e\xd9\x59\xc4\x5e\xe2\x47\xad\xe7\xb0\x04\xb6\x32\x38\xa8\x26\xf6\xdc\x92\x17\x52\xd6\x0d\x8b\xf2\x47\xf7\xa3\x33\x17\x25\xc3\xa4\xd3\x67\xfc\xd8\x5f\xfc\x15\x33\xee\xa5\x44\x5e\x80\x7c\xc2\x0a\xd8\x8a\xca\x8c\xa1\x9f\x6d\xc1\xc3\x3b\xfc\xd7\xe0\xce\x89\xaf\xce\xe2\xcc\x05\x0a\x8c\x69\xb0\x7a\x01\x73\xbd\x58\x3e\x7e\xc3\xa0\xc7\xb9\x08\x18\xcd\x18\xf2\x9a\x3d\x7b\x54\x16\x8a\x98\x63\x5a\x6d\x45\x79\x7e\xe6\x99\x02\x71\xe0\xf0\xb5\x34\x4f\xaa\x0f\xd6\xee\xf4\xf3\xd5\xb6\x20\x88\xc4\xe6\xa0\x9c\x53\xb8\x72\xf0\x60\xa1\xf2\x80\x96\x1c\xb4\x8f\xb0\x09\x76\xf4\x8c\xe8\x1f\xdf\x00\x4f\x49\xe4\x0b\x54\xa7\x17\xd1\x91\xbd\xf7\x48\xd5\x03\x8d\xf0\x85\xe8\x9d\xb8\xa0\xf9\x4e\xf7\x9a\xad\x12\x15\xc4\x99\xd8\x88\x89\x8c\x67\x23\x87\x3d\x7d\x7d\x47\x0c\xec\xea\x91\x64\x7d\x23\x8c\x34\xd5\x46\x9f\x3b\x95\xde\x5c\xe0\x3d\x45\xff\xbb\x9d\x6c\x27\xff\x03\x00\x00\xff\xff\x9a\x62\x11\x89\x8f\x0d\x00\x00")

func schemasHeaderJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemasHeaderJson,
		"schemas/header.json",
	)
}

func schemasHeaderJson() (*asset, error) {
	bytes, err := schemasHeaderJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schemas/header.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemasIntellectual_assetJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\x08\x6a\x8f\x59\x6b\xd3\x16\x68\xe1\x5b\xe1\x64\xdb\x05\xb2\x45\xb0\xde\xf4\x52\x14\x8b\xb1\x34\xb6\x99\x95\x48\x2d\x39\x8a\x9b\x16\xfe\xef\x05\x29\xc9\xd6\x17\x25\xc5\xaa\xa5\xf4\x90\x83\x45\x71\xde\x9b\x99\x37\x33\xa4\xf2\xcf\xcc\x71\x5c\x16\xb8\x0b\xc7\xdd\x11\xc5\x6a\xe1\x79\xfb\xfd\x7e\xfe\xc8\x94\x3f\x07\x7f\x9e\x7c\xf1\x64\xa0\x94\xa7\xfc\x1d\x46\xe0\x31\x4e\x18\x86\xe8\x53\x02\xe1\x67\x50\x0a\x69\xfe\xa8\x04\xf7\xbe\x71\xaf\xb4\x9d\x6f\xd3\xd7\x72\x63\x0b\xcf\xd3\xab\x6f\xd2\xa7\x73\x21\xb7\x5e\x20\x61\x43\x6f\xde\xfe\x90\x19\xcc\xf6\x05\xb8\x61\x9c\x11\x13\x5c\xb9\x0b\x47\x53\x72\x1c\x77\xc3\x42\x3c\xfe\x72\x1c\x97\x9e\x63\xfd\xdb\x15\xeb\x47\xf4\xc9\x6c\x34\xcf\x63\x29\x62\x94\xc4\x50\x15\xde\xce\xf6\x3f\x24\xc6\xb5\xd3\x53\x4d\x52\xe2\xa6\xa7\xbb\x1a\x52\x65\x1e\x7a\x05\x92\x5e\xa2\xed\x1e\x8d\x1e\xae\xca\xa8\xef\x03\xe4\xc4\x36\x0c\xe5\x25\xb0\xb9\xe0\xb7\x51\x4c\xcf\x2b\x92\x8c\x6f\xed\x2c\x7e\x83\x08\xa7\xc4\x5f\xb1\xbf\x6b\xf8\x79\x0e\xb5\x8e\xb6\x28\xdd\xab\xe2\x62\xc4\x38\x8b\x92\xc8\x5d\x38\x6f\xad\x46\xef\x60\x8d\xe1\x94\x5e\xdd\x00\xe1\x52\x22\x10\x5e\x44\x58\xc4\x22\x54\x04\x51\x6c\x67\xf0\x91\x6d\x77\xa4\x06\x80\x4b\x54\x08\xd2\xdf\x7d\x4e\x2b\xa9\x89\x86\x4c\x31\xac\x1c\x96\x3b\xf4\xbf\x28\x93\xab\xc6\xfc\x82\x94\xf0\x5c\xce\x6e\xc2\xd9\xd7\x04\xdf\x13\x46\x9a\x3b\xc9\x04\x4b\xcb\x2c\x5b\x28\x9a\x2b\xb8\x55\xa6\xe7\xe7\xf0\x85\x97\x0f\x55\x2d\xe5\x50\xd7\x56\x2f\xde\x09\x19\x01\x7d\x4a\x39\x4f\xa6\xa8\xa5\x88\x62\xa1\xcc\xa6\x3b\x7c\x9a\x56\xdd\xbf\x82\xfa\xc0\x22\x6c\x0a\x49\x9e\xda\xb5\x10\x21\x02\x6f\xaf\x90\x0f\x22\xd0\xfd\xaf\x56\x22\x17\xd3\xc7\x7f\x5c\x73\x67\xc9\xe9\xbe\x61\xd8\xbc\x4a\x87\x6d\x6a\x70\x9c\x83\xd5\xb9\x07\x75\x6e\x33\xbf\x2e\x3f\x87\xbf\xb2\xe7\x3f\xda\x03\xa9\x3b\x94\x7c\x02\xcd\xf6\xf6\x09\x39\x4d\xd4\x66\xe2\x1a\x8f\x61\x02\x79\x88\x43\x01\xc1\x8a\x80\x92\x5a\xff\x1e\x18\xcc\xef\xed\x63\x98\x84\x84\x2d\x8e\x8c\x7a\x07\x8a\x6e\xc4\x9e\x6b\x87\x27\x9b\x94\x9f\xd0\xdf\x71\xe6\x43\xf8\x33\x91\x64\xeb\x84\xd0\x1a\x80\xff\x7d\x7d\x66\x69\xbe\x13\xbe\x91\xab\xcd\x4f\x95\x9a\x2c\x79\xb2\x31\x63\x50\xaf\x26\x92\xb5\x9c\xe7\x52\x84\xfb\x10\x48\xef\xb0\xe5\xb4\xec\x8a\xaa\x6c\x9a\x55\x3d\x39\xa2\xb8\x12\xbf\x26\x4c\x1a\xb1\xfc\xd1\x70\x8a\xb7\x9f\xb1\x9b\xce\xbd\x4d\x67\x51\xdb\x19\xa6\x6b\x1e\xb7\xcd\xb7\x86\x2e\xd9\xd9\xcc\xda\xba\x42\x6b\xf1\x76\xa4\xbc\x23\x5f\xd9\xea\x9f\xc7\x80\x43\x10\x18\x2f\x21\xbc\x2f\x5e\xa1\x36\x10\x2a\x9c\x15\x72\xe3\x56\x93\x38\xe0\x52\x56\x31\x35\xfe\xfd\xac\x42\x60\xca\x4b\x52\x85\x4a\xdb\xa1\xeb\xcc\xfe\xfc\x5d\x1f\xdc\xa5\x50\xb5\x01\x7b\xd1\x10\xf4\xac\xfc\x26\xa9\x74\x24\xb2\x23\xb8\x1d\x31\x38\xbf\x40\xfc\xfa\x75\xe8\xc5\x95\x91\xdb\x18\xbf\x24\x72\xe4\xd1\x04\x98\x03\xfe\x0e\x61\x32\x6e\xf5\xf5\x94\x5e\x29\x17\xb6\x48\x59\x1d\x3a\x5f\x47\xf5\x03\xe7\x00\x41\xd5\x8c\x8d\x1f\xee\xab\x16\x36\x17\x50\xdb\xf5\x4f\xfd\xa0\x6f\x90\x80\x8d\x7b\xcf\xee\x29\x3c\x4b\xce\x3a\xe3\x78\xbe\xe4\xb6\x12\x86\xc9\xcc\x18\x18\xbf\x69\x19\xd8\xe9\x3f\xb4\x1a\x1a\xef\x12\x1e\x0c\xa2\xd0\xe3\x8b\x9c\x90\x5b\xe0\x4c\x99\xbc\x7f\x14\x21\xb6\xd0\x59\x11\xc8\x8b\x4c\xf4\x8e\x2b\x97\x01\xbf\xe5\x53\xdc\xf6\x0c\xf4\xab\x1d\x27\xa7\x12\x69\x11\xb0\x45\x54\xcd\xc9\x6d\x8a\xfa\x90\xb1\x23\x4c\xad\x0f\x1a\x36\xc6\xc4\xf8\x7d\x20\x03\xb6\x77\x82\x29\x6f\xf8\x3d\xea\x9a\x9d\x88\x17\x60\x5e\xf8\x71\x29\x0b\xc2\x94\x97\x99\x8c\xc2\x0d\x2a\x5f\xb2\xb8\xe9\x13\xc4\xc8\x4c\x96\xc2\xfc\xa3\xb2\xe5\x5b\xc8\x2b\x55\x84\x7f\x22\x3e\x58\x11\xbf\x54\xa6\xfb\x65\xfd\x2f\xfb\x91\x9e\x2c\x8a\x2e\xb4\x31\x9d\x6a\x68\x65\xf0\x23\x8e\xad\xde\x47\xc1\x53\x47\x6d\xed\x77\x96\x3e\xd0\x5e\x9b\xad\xf5\x62\xcb\x4e\x73\xd8\xce\x98\x3b\x33\xfd\x77\x98\xfd\x1b\x00\x00\xff\xff\xc3\xa9\x8d\x9d\x7c\x20\x00\x00")

func schemasIntellectual_assetJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemasIntellectual_assetJson,
		"schemas/intellectual_asset.json",
	)
}

func schemasIntellectual_assetJson() (*asset, error) {
	bytes, err := schemasIntellectual_assetJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schemas/intellectual_asset.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemasMaterial_assetJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x4d\x73\xd3\x30\x10\xbd\xe7\x57\x78\x44\x8f\x69\x44\x67\x80\x43\x6e\x1c\xf8\x08\x33\x40\x67\x4a\xb9\x30\x0c\x23\xac\x75\xba\xc1\x92\xdc\x95\x44\x9a\x61\xf2\xdf\x19\xc5\x8e\x91\x9d\xc4\xa6\x49\x9b\xf4\xe0\xcb\xae\xf5\xf4\xde\xee\xd3\x4a\x7f\x06\x49\xc2\x50\xb2\x71\xc2\x6e\x9c\x2b\xec\x98\xf3\xf9\x7c\x3e\x9a\xa1\x4d\x47\x22\x1d\xf9\x5f\x9c\xa4\xb5\xdc\xa6\x37\xa0\x04\x57\xc2\x01\xa1\xc8\x7f\x08\x6b\xc1\x8d\x66\xd6\x68\xfe\x8c\x0d\x03\xc6\x59\xf9\xcb\x1a\x68\xcc\x79\xc8\x9e\x97\xd1\x91\xa1\x29\x97\x24\x32\x77\xfe\xfc\x45\x05\x56\xad\x93\x90\xa1\x46\x87\x46\x5b\x36\x4e\x02\x9d\x24\x61\x86\xa6\x42\xa3\x15\x21\x5c\x47\x93\x84\xb9\x45\x01\x61\x07\xf3\x73\x06\xa9\x5b\x01\xac\xe2\x05\x99\x02\xc8\x21\xd8\xe8\xef\x16\xce\x07\xb4\xe9\x44\x36\xf2\x11\x22\x6a\x07\x53\x20\x56\xe7\x96\xc3\xed\x30\x9f\x84\x82\x36\xc8\x19\x41\xf6\x9f\x15\x0c\xfb\xd9\xaa\x70\x3c\xd2\xce\xb5\xd1\x6f\x54\xe1\x16\x57\x8e\x50\x4f\xfb\x79\x7c\x29\x89\x77\x8a\x19\xc6\x49\x85\x1a\x95\x57\x6c\x9c\x5c\x34\xe3\xe2\x6e\x1d\x7f\xd9\xbb\xeb\x6b\x29\x09\xac\x3d\x6a\x01\x06\x2d\x4a\x8c\xe0\xd6\x23\x41\xe8\xe5\xb7\xce\x5e\x77\xb5\xb0\xab\xac\x3d\xe2\xab\xec\xf7\x9a\x90\x90\x72\x25\x42\xe4\x97\xb1\x11\x33\x91\x5b\x18\x44\xdc\x59\x01\x64\x0f\x73\x74\x89\x70\xed\x71\xc3\xc9\x0f\xd1\x03\x1f\x70\xb7\x9a\xa0\xdc\x77\x22\x41\x3b\xcc\x10\x68\x97\xf5\x04\x91\x58\x34\x8d\xe7\x35\xde\x7a\x98\x38\x50\x41\x8b\x23\x0f\x8d\x34\x56\x89\x18\x2e\x92\xd3\x24\xb8\x41\x23\x5a\xb4\x6c\xdb\x7d\xbd\xe5\x45\x87\xa2\xf7\x46\x1b\xc2\x0c\xd3\x4b\x82\x0c\xef\x4e\x75\xb2\x4b\x32\xef\xf0\x37\xac\xdc\x79\xdc\x03\xb6\xc1\xe3\xad\x50\x98\x2f\x9e\x00\x91\xba\x3b\x57\x3e\x3b\x79\x77\x3e\x0a\xcc\x77\xd9\xde\x96\xab\x1b\x0e\xcc\x0c\x29\xe1\x42\x16\x54\x58\xda\x01\xfd\x39\x9a\x32\xd7\x1a\xdd\x2e\xa1\x4d\xea\xa6\xbd\xea\xde\x33\x33\x9a\x26\x5d\x67\xbd\xcb\xa8\x9d\xe6\xe9\x17\xba\xff\x2c\xdd\x50\xff\x40\xef\x84\x80\x75\xfc\xf9\xda\x66\xf0\x54\x9e\x19\xf7\x77\xe2\x61\x37\x77\x5d\xfd\xbe\xda\xec\xe2\x7b\xe8\xe5\xbc\xf5\x8a\xdb\xf3\x9a\xfe\x87\xf5\x55\xe4\xfe\x64\xfd\x6c\x93\x79\x84\xa7\xe3\xab\x3d\x47\x4f\xbb\x42\x7d\xac\xf7\xe8\xee\x20\x7c\xcb\xc1\xdf\x00\x00\x00\xff\xff\x61\x20\x34\x86\xe9\x0c\x00\x00")

func schemasMaterial_assetJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemasMaterial_assetJson,
		"schemas/material_asset.json",
	)
}

func schemasMaterial_assetJson() (*asset, error) {
	bytes, err := schemasMaterial_assetJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schemas/material_asset.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemasResearch_objectJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\x4b\x6f\xd3\x40\x10\xbe\xe7\x57\x58\x86\x63\x1a\xf7\x01\xaa\xc8\x15\x8a\xa8\x90\x68\x95\x16\x2e\x08\x55\x8b\x3d\x49\xb6\xd8\x6b\x77\x76\xdd\x10\xa1\xfc\x77\xb4\xb1\x13\xbf\x37\x59\x3b\xb6\xd3\x1e\x2a\xb5\x7e\xcc\x7c\xdf\x7c\xb3\xb3\xb3\xe3\xfe\x1b\x18\x86\x49\x1d\x73\x6c\x98\x73\x21\x02\x3e\xb6\xac\xc5\x62\x31\x7a\xa4\xdc\x1e\x11\x7b\x14\xfe\xb1\xd0\xe1\xdc\xe2\xf6\x1c\x3c\x62\x21\x70\x20\x68\xcf\x1f\xfc\xdf\x8f\x60\x8b\xd1\x23\xf7\x99\xf5\xc6\x1c\x4a\x23\x6f\xa3\x67\x36\x96\xc6\x96\x25\xef\x9e\x44\x57\x47\x3e\xce\x2c\x07\xc9\x54\x9c\x9c\xbe\x8b\xad\xc5\xef\x39\x30\xa5\x8c\x0a\xea\x33\x6e\x8e\x0d\x89\xc7\x30\xcc\xc8\xfe\xf6\x6f\xc3\x30\xc5\x32\x00\x69\x3b\xbe\x33\xdc\x5c\x0f\xd0\x0f\x00\x05\x05\x9e\x7a\x7a\x6b\xe1\x7b\xb8\xe6\x96\x5c\x97\x40\x11\xa6\x7b\xf2\x95\x4e\x79\xcc\xd2\x4a\x01\xb5\x42\x69\x77\x6b\x74\x35\xcc\xfb\xbd\xa7\xc2\x85\x36\x1c\x33\x9f\x5d\x79\x81\x58\xde\x09\xa4\x6c\xa6\x82\x70\x0b\xc8\x7d\x36\xf1\x8b\x38\x36\xa1\x24\x88\x64\x69\x0e\xd3\xb7\x42\x46\x9f\x42\xb8\x16\xe0\xc9\x70\x0a\x0c\x21\x73\x9b\xc6\x37\xd2\xe6\x52\xc4\xb2\x50\x83\x04\x40\xea\xf1\x55\xc6\xa0\x47\xd9\xc6\xd9\x99\x82\xcb\x27\xe0\x36\xd2\x40\xda\xed\x37\xa8\x13\x3a\x9b\x8b\x7c\x04\x2a\xf8\x63\xf4\xac\x8a\x16\x11\x7d\x89\xe3\x48\xd7\x4d\x65\xf9\x0a\xcb\x85\x8f\x4e\x21\x1e\xad\x71\x68\x43\x64\xc3\x58\x29\x28\x7e\x24\x02\x66\x3e\x2e\x5f\x31\xc5\x09\x70\x3f\x44\x1b\xee\x23\x4a\xa5\x34\x29\x13\x30\x03\x34\xf3\x59\x42\xbd\xd0\x93\x49\x92\xbd\x4e\xfe\xc6\xd7\xcf\x2f\x15\x7e\x7f\x10\x37\x3c\xb4\xc3\x0b\x85\xbf\x6b\x07\x98\xa0\x53\x0a\xd8\xd3\x9a\xa3\x09\x80\xa6\x2b\x6f\x02\x2e\x11\xe0\x1c\x11\xa5\x35\x22\x79\x6d\x4e\x83\x7d\x33\xef\x06\x67\x84\x51\xbe\x7e\xaf\xc7\x8d\xca\xcf\xc3\x68\xaa\xce\xad\xec\x93\xf0\x79\x6d\xf0\xea\x19\x98\x38\xa6\xea\x21\x57\x96\xeb\x82\x2d\x42\xe2\x3e\x10\xce\x41\x94\x95\x92\xa0\x40\x61\x4f\x4d\x3f\xd3\x0e\x75\x3c\x18\xdd\x29\xcd\xc9\x3e\xc8\xff\xb6\x65\x6a\x22\x3c\x85\x14\x41\xf6\x95\x3f\x4b\xfb\xcd\x8a\x6e\x50\xd5\xa1\x29\x3b\x9e\xaa\x2e\xa4\xbc\x9f\x50\xd7\xf7\x8a\x2a\xac\x2a\x96\xbb\x97\x6d\xfc\xc0\xaf\x6d\x88\x88\xe3\xac\x03\x4b\xdc\xdb\x74\x7b\x3e\x25\x2e\x87\x41\x2a\x9a\x66\x45\xfd\x68\xd0\xf7\xd3\xca\x92\xb8\x7f\x51\x4e\x67\x35\xc6\xb8\x5a\xd8\x1d\x2f\x2e\xb5\xb3\x8c\x96\xca\x92\xc1\x78\x08\x31\x0e\x23\x40\xe9\x06\xdf\x55\xbf\x9e\xc0\x68\x41\xb9\xb3\x0f\x0d\x94\x2b\xac\xb8\x1c\xd4\xfa\x02\x62\xfe\x74\xa2\x2d\x5e\x64\xe1\x4e\x10\x01\xde\x91\xed\x5b\x07\xeb\x7a\x23\x8e\x5f\x7c\xd7\xe9\xb0\x6d\xea\x92\xa0\x4b\x6d\x60\x76\x5f\xdd\xd4\xc6\x7b\xfd\x26\x8a\xd8\x36\xf0\xee\x0e\x95\x59\xf8\xb1\x73\x4d\xf4\x7b\x16\x81\x4d\x6c\x8a\x64\xeb\x2f\xfa\xa2\xda\xda\xab\x3e\x36\xf1\x8d\x78\xbd\x95\xeb\x18\x42\xf5\x81\xa6\x53\x20\x1c\xee\x04\xc1\xd2\xf9\xcc\x21\x70\x08\xea\x01\x17\xc4\x0b\x94\x10\xae\x98\xd3\x25\x00\xbd\x14\xbe\x2e\xb4\x4d\x35\x52\xb7\xb0\xd0\xb5\x33\x37\xb2\xd0\xc2\x0e\xff\x5e\x51\x99\x2a\xb7\xc7\x56\x73\x74\x4f\x7d\x52\x11\xa9\x2f\x8c\xed\xaf\x8f\x4c\xd9\x71\xab\xb6\x38\x89\x95\xee\xc7\xf0\x89\xef\x3e\xab\x5a\x82\xe2\x26\xff\x41\xc3\xe8\x72\xc0\x11\x39\xdf\xd9\x38\x24\x70\x5f\xf5\x64\x37\xa1\xf9\xaa\xa7\xbb\x09\x4d\xc5\xe7\x93\x97\xc6\x54\xaf\x93\x4c\x42\x50\xfe\xe1\xa6\xa3\xf5\x97\xff\x12\xd4\x80\xc7\x11\x4d\x7c\x75\x32\xf0\xa5\xcf\xab\x13\x26\xc7\xfa\x59\x75\xd7\xfe\xf3\x02\x46\xed\xda\xbd\x4e\xae\xc1\xa8\xde\xfe\x77\x56\x45\x55\xcd\xa8\xdf\x46\x15\xd8\x36\xf9\x7f\x86\x94\xad\x06\xed\x8c\x47\x04\x20\x55\x8d\xc2\x33\x8e\x4a\xb3\x0a\x15\xf9\x53\x77\xa0\x76\xaa\x2d\x7e\x06\x67\x1e\x5d\x7d\xcd\x82\xb2\xf5\xad\xad\x56\x64\xa5\x55\x9d\x62\x17\x5d\x29\x74\x7e\xae\xad\x50\x8c\xf0\x70\xda\x38\xd9\xe3\xb0\xb6\x2a\xf2\xfd\xd6\x86\xd2\x3b\x0e\xf5\xd2\x77\x1b\x93\x68\xfd\x85\x93\x44\xa1\x0c\x5e\x0d\x75\x06\xf2\x67\x35\xf8\x1f\x00\x00\xff\xff\xc9\xb6\xf0\xb8\x4b\x26\x00\x00")

func schemasResearch_objectJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemasResearch_objectJson,
		"schemas/research_object.json",
	)
}

func schemasResearch_objectJson() (*asset, error) {
	bytes, err := schemasResearch_objectJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schemas/research_object.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemasTypesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xcb\x4e\xf3\x30\x10\x85\xf7\x7d\x0a\xcb\x7f\x17\xe9\xc5\x71\xf3\x53\x50\x9b\x0d\x62\x81\xc4\x02\xa9\x0b\x24\x16\x24\x41\x32\x8d\xd3\xba\xc8\x4e\x64\x4f\xa9\x4a\xf1\xbb\x23\xe7\x46\xc3\x82\x82\x60\x11\x69\xf4\x9d\xcc\x99\x39\x93\x1c\x7a\x08\x61\x91\xe2\x10\xe1\x35\x40\x61\x42\x4a\x77\xbb\x9d\xbf\x11\x66\xe9\xb3\xa5\xbf\x7d\xa6\x3a\x35\x86\x9a\xe5\x9a\x4b\x46\x61\x5f\x70\xe3\x6f\x4c\xae\xe8\x3f\x3c\x76\xad\xfd\x4a\x69\xfa\x43\x4a\x9d\x4a\x2a\xea\xe7\x7a\x45\x53\xcd\x32\x20\x93\x69\xed\x51\xf7\xa5\x3c\x13\x4a\x80\xc8\x95\xc1\x21\x72\x5b\x20\x84\x55\xae\xae\x65\x01\xfb\x3b\xd0\x42\xad\x5a\x8e\x10\x76\x83\xdd\x0c\x53\x29\xe3\x86\x4b\xa1\x6e\xb9\x5a\xc1\x1a\x87\x28\x28\xa1\xad\x34\xbc\xdd\x96\xa9\x4e\x3a\x14\x0c\x80\x6b\xe5\xa4\xc7\x68\x42\xe6\x8c\x64\xc9\x61\x66\x49\x5b\x4f\x2d\x89\x02\x72\x9e\xb4\xe0\xcc\x92\x68\x36\x67\x4f\x5d\xd2\xd4\xc1\x7f\xdb\xc7\x9d\x4d\x0c\x97\xf7\x5c\xff\x74\x17\x6f\xf2\x16\x05\x64\x5e\x0e\x49\x86\x83\x38\xf6\x4f\x12\x8f\x78\xae\xba\x22\x0f\x8c\xbc\x92\x64\x14\xc7\xfe\x60\xd8\x21\x83\x4b\x2f\x8e\x47\xa7\xdf\xfa\x94\x40\x14\x0b\x7d\x93\x1b\x50\x4c\xf2\xe3\x1c\x4c\xed\x17\x19\x0e\x51\x54\x03\xd4\x4a\x5f\xc5\x2c\xb5\x2c\xd7\x92\x41\xf9\xdb\x34\xc6\xad\x6c\xc7\xbf\xf1\x13\xc5\xcb\xf4\x0f\xbd\x2e\x8e\xbc\xea\x2a\xe9\x1c\x07\x84\xe4\x06\x98\x2c\xbe\xf3\x85\x3f\xac\x53\x06\x9c\xb8\xde\xfa\xd4\x3d\xf7\xd8\xde\x7b\x00\x00\x00\xff\xff\xe1\x46\xba\x70\x90\x03\x00\x00")

func schemasTypesJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemasTypesJson,
		"schemas/types.json",
	)
}

func schemasTypesJson() (*asset, error) {
	bytes, err := schemasTypesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schemas/types.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyMetadataCreateReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x90\x41\x8b\xfa\x30\x10\xc5\xef\xf9\x14\x03\xc2\x1f\x3d\xb4\xf9\x7b\x75\x4f\xa2\x5e\x04\x15\xac\x37\x91\xed\x34\x9d\xb6\x91\x36\xc9\x66\xa6\xb0\x7e\xfb\xa5\x76\x5d\x44\xf6\xba\x97\xc0\x64\xde\x7b\xbc\xdf\x4c\x60\x47\x82\x25\x0a\xc2\x2a\x12\x0a\x29\xb5\x23\x66\xac\x09\x4e\xb7\x40\x0b\xc8\x1f\xfb\x71\x9d\xa7\x4a\xad\x89\x4d\xb4\x05\x31\x20\x6c\xb3\xc3\x1e\x02\xde\x5a\x8f\x25\xf8\x0a\xba\x47\x9a\xaf\x00\x1d\x9c\x0f\xc5\x95\x8c\x5c\xa6\x8d\x48\xe0\x85\xd6\xb5\x95\xa6\x2f\x52\xe3\x3b\xbd\xb5\x6c\x8e\xeb\x2c\xd3\xb1\x64\x4e\x0c\x3a\xef\xac\xc1\x36\x19\xec\x49\xe7\x4b\x6a\xb5\x44\x22\x3d\x4f\xe7\xe9\x7f\x1d\xa2\x0f\x14\xc5\x12\xeb\x31\x73\x06\xd2\xa0\x80\x65\xa8\xc9\x51\x44\xa1\x12\xca\x3e\x5a\x57\x03\x42\xbe\x3a\x6e\x96\xa7\x4d\x0e\x83\x09\xc5\x7a\x97\x2a\x35\x99\x40\x66\xc8\x61\xb4\x9e\x95\x4a\x20\x23\x27\x20\x1e\xb8\x2f\x46\xa0\xc8\xc3\xe8\xbc\xd8\xea\x36\xa6\xff\xe0\x54\x3e\xfe\x39\x4f\x83\x0c\x05\x91\x03\x73\x3f\x75\x39\x56\x3e\xd2\x47\x4f\x2c\x43\xe1\xcd\x27\x76\xa1\xa5\xc5\x3f\x57\x70\x78\x7b\x7e\xcf\x79\x1c\x65\xe9\x95\xbd\xcb\x2f\xd3\xe7\x71\x36\xb0\x9a\x86\x3a\xfc\xc5\xf9\xe2\x7f\xe7\xbb\xf0\x25\xe6\xf9\x77\xf6\xdd\x8a\x83\x77\x4c\x4a\xed\xf5\x32\x55\x5f\x01\x00\x00\xff\xff\x11\x1b\x89\xbb\x47\x02\x00\x00")

func messagesBodyMetadataCreateReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyMetadataCreateReadmeMd,
		"messages/body/metadata/create/README.md",
	)
}

func messagesBodyMetadataCreateReadmeMd() (*asset, error) {
	bytes, err := messagesBodyMetadataCreateReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/metadata/create/README.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyMetadataCreateRequestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\x08\x3e\x2f\x37\xa4\xac\x4f\x9f\xba\x48\x36\xcd\xb6\x49\x1b\x24\x4e\x2f\x45\x0e\x14\x39\xb2\xd9\xca\xa2\x41\xd2\xd9\xa6\x41\xfe\x7b\x21\x59\x52\x48\x7d\xd8\x6e\x1b\x04\x86\xa4\x79\x24\x67\x38\x33\xef\xcd\xdb\xcc\xf3\xe6\x32\xfb\x03\x98\x79\xda\x0b\x3e\x5f\x7a\xf3\x30\x4a\x30\x24\x80\x91\x9f\xd0\x10\x05\x99\x8f\x51\x1a\x24\x80\x72\x8e\x39\x4e\xe2\x84\x00\xce\xe6\x9f\x3e\xd6\xad\x84\x29\xa0\x5a\xa8\x8d\x12\xe5\xda\x36\xdd\x83\xd2\xb2\x7c\x90\xb5\xfd\xf7\x99\xe7\x79\xde\x5b\xfd\xeb\x79\xf3\x5d\x6d\x9b\x2f\xbb\x2f\xdd\xb7\xd6\x11\x3f\x4e\x08\xa1\x01\x43\x29\xcb\x42\x14\x40\xc4\x11\xc5\x51\x8a\x42\x46\x52\x3f\x49\x72\x0a\x61\x52\x9f\xe6\xac\xfe\xc6\xa1\x34\x22\x17\xa0\xba\x33\x0f\x7f\x6f\xd6\xf3\x08\xfa\x37\x5a\xec\xfb\x61\x1c\x81\xaf\x5e\x77\x15\x9a\x58\xa8\xf7\xee\xf9\x79\xe0\xd5\x8d\x2c\xa5\x12\xb9\x60\xf7\x0a\x72\xf1\xd7\xe8\x39\x0d\xf4\x47\xf1\x02\xe5\x2f\x74\x0b\xfa\x18\xea\x9a\x6e\x45\xf1\x7a\x12\xd6\x9d\xfb\xb8\xcf\x4f\x9c\x7b\x47\x45\x51\xd9\x0f\x6f\x3f\x94\x60\x86\x98\x5f\xd5\x9a\x96\x42\x53\x23\x64\xf9\x54\x0a\xe3\xa4\xaf\x4a\x7b\xcf\xde\xa5\x32\xc9\x20\xce\x49\x84\x30\xc4\x18\x05\x11\xc9\x11\xf5\x79\x86\x78\xca\x63\x16\x05\x34\xc9\x49\xec\xdc\xf8\x60\xa7\x2a\xd2\x89\xec\x38\xd8\x9e\x47\x3d\xeb\x4f\x42\xb3\x6f\x95\x47\xe4\xd3\x34\xe8\xc8\x51\x3d\x64\x5b\x04\x47\x20\x5f\x38\x57\xa0\xed\x1c\x8d\x56\x4c\xfb\xf4\xde\x6e\x35\x57\x87\xae\x39\x14\x58\x65\x7e\xb6\x1a\xeb\x0a\x34\x53\x62\xd7\x04\x3c\xd2\x79\x0f\x62\xbd\x31\xba\xbb\x8c\xb9\xaa\xdf\x1f\x0d\x35\xb0\x85\xd2\x58\xad\xe1\xb8\xd5\x14\x6e\x03\xbf\x91\x05\x77\xda\x68\x14\x5b\x08\x06\x25\x03\x0b\x66\x75\x74\x63\x9c\xbc\xd2\x16\xe0\x74\xed\x14\x4c\xc3\xa3\xa1\xca\x5c\x51\x53\x6f\xe6\x63\x92\x20\x4c\x10\x26\x2b\x8c\x97\xf5\x3f\xaa\x7f\x47\x16\x7e\x2d\xb9\xb3\x8c\xf8\x68\x41\x56\xfe\x62\x19\xa6\xcb\x30\x6d\x96\xcd\xec\x5c\xb4\xe1\x51\xc6\x0e\xf9\x1b\x89\xee\x60\x1b\x56\x41\x63\xb0\xaf\xbb\x97\xfd\xe6\x8c\x59\x93\xf1\x36\xad\x07\x17\x7b\x4c\xc9\xa9\x81\x8e\x9d\x7c\x8c\x7d\x44\x30\xc2\xfe\x8a\x74\x41\x87\x76\xd0\x35\xde\xa1\xa7\x7e\xf5\xfc\x0c\xaf\xdf\xa5\xe2\x1f\x41\x59\xce\xd9\xb8\x4b\x6a\x60\x2d\xd5\xeb\x29\xdc\x03\x68\xb9\x57\x0c\xec\x8b\x68\x4c\xad\xdf\xf6\xb7\x11\x86\xee\x62\x15\x27\xf9\xd8\x82\x1c\x0d\xf2\x01\x0a\x6a\x80\x9f\x77\x98\x2b\x43\xa7\x9d\x98\x76\xc3\x69\xe1\xca\x05\x8b\x26\x46\xfd\xb4\x29\x75\x5c\x29\x27\xe9\xed\x24\xb5\x9d\x47\x6b\x27\x28\xed\x3c\x3a\x3b\x93\xb8\xee\x15\x68\x50\x2f\xf5\x5e\x5f\x5f\x6c\x26\xfa\x18\x0c\xfa\x90\xc9\x4a\x18\x20\xfb\xce\x0f\x11\x57\x60\x1a\x99\xb3\xdd\xef\x7b\x79\x2d\xc6\xf2\x90\x8b\x02\x5a\x41\x03\x12\x62\x16\xd0\x0c\xe1\x45\x25\x68\x10\x52\x94\xc4\xbe\x8f\xe2\x3c\x5b\x2c\xa2\x34\x8b\xb1\x25\x68\xf5\xca\xa3\x0c\x57\x23\x26\x12\x54\xdb\x1e\xc5\xdf\x6e\x64\xd5\xc7\x5b\x9a\x41\x31\xb5\xa2\xe2\x92\x4b\x05\x55\x0f\x9c\xc9\x1b\xd5\xaa\x9e\x6e\x78\xc7\xb5\xc3\xeb\x6b\x82\xd7\x1b\x7e\x26\x74\xe4\xe4\xba\xa1\xa6\x78\xc3\x09\xee\x94\xb6\x78\xe7\xeb\x8b\xf7\x7f\x34\xc6\xfb\x8f\x3a\xe3\x4d\xce\x8c\x03\xcd\x19\x89\x7e\x4a\x7b\xbc\xb3\xf4\xa7\x77\xf6\xa0\x89\xab\x5a\xb8\xdc\x00\xfb\x53\xef\xb7\x8e\x1f\xce\xb8\xc7\x1a\x44\xdb\x15\x3c\xf7\x17\x59\x10\x65\x28\xca\xa2\x00\x05\x34\xc0\x28\x09\xfc\x1c\x85\x94\x2f\xa2\x45\x96\x45\x40\x88\x3b\xba\xb5\x3b\x8c\xc5\xd1\x19\xfb\x04\x30\x98\x9a\x9e\x1d\xbf\xaf\xa5\xda\xd2\x96\x0b\x46\x7b\xe3\x52\x6e\x77\x52\x8b\x8a\x15\x6e\xe1\x65\xba\x87\x6e\xa8\xbe\x13\xdb\x56\xd7\x8c\xda\xc3\xa0\xc5\xee\x24\xaf\xca\x8a\x3b\x97\x74\xa4\xdb\x46\x3d\xbe\x3f\xdc\x9f\xb5\x81\x1b\xa9\x8b\x7e\xd2\x43\x2a\x98\xe6\xd5\x41\xd2\xce\xe6\xd7\x71\xf4\x68\xa6\xce\xe4\xd9\xe9\x9c\x3d\xed\x0a\x49\x79\x55\xb0\x7b\x3d\x08\xee\xd1\x48\x45\xd7\x30\x61\xbd\xa5\xda\x5c\xc9\xef\x65\xb5\xc1\xbf\xe2\xba\x15\xb0\x4d\x29\x18\x2d\xbe\x18\xa3\x44\xb6\x37\xa0\xcf\x4f\x42\xe3\xd3\xad\x64\xad\x2e\xcf\x37\xc6\xec\xf4\xf2\xe2\xc2\x48\x59\xe8\xcf\x02\x4c\xfe\x59\xaa\xf5\xc5\xc6\x6c\x8b\x0b\x95\xb3\x45\x9a\x44\xf3\xb1\x3d\xee\x0b\x6a\x72\xa9\xb6\x2e\xeb\x6a\xd7\xd8\xb6\x58\xee\xa7\x8b\x34\xc4\x04\xf9\x99\xcf\x2b\xe1\x61\x28\x25\x69\x8c\x30\xa7\x34\x8c\x19\xcb\x22\xdf\x6e\xb1\xfe\x36\xd3\x43\x40\x0f\x38\x32\x07\xf4\x10\x97\x52\x4f\x0e\xb6\xb5\xa0\xce\xde\x67\xff\x04\x00\x00\xff\xff\x00\x7c\xaa\x39\x5f\x10\x00\x00")

func messagesBodyMetadataCreateRequestJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyMetadataCreateRequestJson,
		"messages/body/metadata/create/request.json",
	)
}

func messagesBodyMetadataCreateRequestJson() (*asset, error) {
	bytes, err := messagesBodyMetadataCreateRequestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/metadata/create/request.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyMetadataCreateRequest_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xce\xb1\xce\x83\x30\x0c\x04\xe0\x9d\xa7\x40\xf9\xff\xb1\xe4\x3a\x74\xe2\x65\x90\x49\x0c\x84\x0a\xd2\xda\x46\xa8\xaa\xfa\xee\x15\x02\xf6\xae\xbe\xb3\xbe\x7b\x17\x65\xe9\x52\x74\x75\xe9\x06\xb3\x87\xd6\xc0\xba\xae\x7e\x4c\x1a\x3c\x05\xbf\xdc\x21\x51\x15\x1a\x06\x9e\x08\x13\xab\x52\xcf\x8a\x36\xc7\x17\x26\x36\x8a\x64\x84\x20\x4c\xc6\x10\x7e\x2e\xac\xd6\xec\x65\x3f\x6a\x9e\xf1\xe7\x2e\x9b\xf0\xbf\xdf\x4e\xa6\x06\xb6\xb4\x3a\x9a\x59\x7a\x44\xa1\xce\xaa\xeb\xed\xa0\xce\x3f\xe1\xee\xc7\x6d\xc2\xca\x24\x61\x68\x72\x3b\x72\xb0\x83\x47\xe4\x2e\xcd\xc9\x52\x9e\x15\x7b\xe2\x8a\x4f\xf1\x0d\x00\x00\xff\xff\x7a\x9a\xdd\x2b\xf7\x00\x00\x00")

func messagesBodyMetadataCreateRequest_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyMetadataCreateRequest_schemaJson,
		"messages/body/metadata/create/request_schema.json",
	)
}

func messagesBodyMetadataCreateRequest_schemaJson() (*asset, error) {
	bytes, err := messagesBodyMetadataCreateRequest_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/metadata/create/request_schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyMetadataDeleteReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x90\xc1\xca\xdb\x30\x10\x84\xef\x7a\x8a\x85\x40\xf9\x73\xb0\xd5\x5c\xd3\x53\xc1\xbe\x84\x26\x81\x38\xb7\x10\xea\xb5\xb4\xb6\x15\x6c\x49\xd5\xae\xa1\x79\xfb\xe2\xb8\x29\x21\xf4\xfa\x5f\x04\xab\x9d\x19\xe6\xdb\x15\xec\x49\xd0\xa2\x20\x14\x34\x90\x90\x52\x7b\x62\xc6\x8e\xe0\x7c\x8f\xb4\x85\xfa\xb9\x5f\xd6\x75\xae\x54\x41\x6c\x92\x6b\x88\x01\x61\x57\x1d\x0f\x10\xf1\x3e\x04\xb4\x10\x5a\x18\x9f\x69\xa1\x05\xf4\x70\x39\x36\x37\x32\x72\xfd\xe8\x45\x22\x6f\xb5\xee\x9c\xf4\x53\x93\x9b\x30\xea\x9d\x63\x73\x2a\xaa\x4a\x27\xcb\x9c\x19\xf4\xc1\x3b\x83\x43\x36\xdb\xb3\x31\x58\x1a\xb4\x24\x22\xbd\xc9\x37\xf9\x57\x1d\x53\x88\x94\xc4\x11\xeb\x25\x73\x0d\xd2\xa3\x80\x63\xe8\xc8\x53\x42\x21\x0b\x76\x4a\xce\x77\x80\x50\x17\xe5\x8f\xf2\x5c\xd6\x30\x9b\x50\x5c\xf0\xb9\x52\xab\x15\x54\x86\x3c\x26\x17\x58\xa9\x0c\x2a\xf2\x02\x12\x80\xa7\x66\x01\x4a\x3c\x8f\x3e\x88\x6b\xef\x4b\xfa\x3f\x9c\x36\xa4\x4f\xe7\xe9\x91\xa1\x21\xf2\x60\x1f\xa7\xb6\x4b\xe5\x13\xfd\x9a\x88\x65\x2e\x5c\xfe\xc6\x31\x0e\xb4\xfd\xe2\x1b\x8e\xdf\x5e\xdf\x4b\x9d\x16\x59\x7e\xe3\xe0\xeb\xeb\xc7\xeb\xb8\x9e\x59\x4d\x4f\x23\xfe\xc7\xf9\xe6\xff\xc9\x0f\xe1\x5b\xcc\xeb\xef\xfa\x6f\x2b\x8e\xc1\x33\x29\x75\xd0\xdf\x73\xf5\x27\x00\x00\xff\xff\x57\x41\x68\xae\x47\x02\x00\x00")

func messagesBodyMetadataDeleteReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyMetadataDeleteReadmeMd,
		"messages/body/metadata/delete/README.md",
	)
}

func messagesBodyMetadataDeleteReadmeMd() (*asset, error) {
	bytes, err := messagesBodyMetadataDeleteReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/metadata/delete/README.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyMetadataDeleteRequestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\xca\x4f\xca\x4a\x4d\x2e\x09\x2d\xcd\x4c\x51\xb2\x52\x50\x4a\x4d\x36\x36\x33\x4b\x33\x32\xd7\x4d\x4b\x31\x31\xd6\x35\x31\x49\x4a\xd3\x4d\x32\x35\xb6\xd4\x35\x36\x36\xb0\x34\x37\x37\x4d\x31\x35\x37\x48\x52\xe2\xaa\xe5\x02\x04\x00\x00\xff\xff\x61\xdb\x1b\xa4\x3b\x00\x00\x00")

func messagesBodyMetadataDeleteRequestJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyMetadataDeleteRequestJson,
		"messages/body/metadata/delete/request.json",
	)
}

func messagesBodyMetadataDeleteRequestJson() (*asset, error) {
	bytes, err := messagesBodyMetadataDeleteRequestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/metadata/delete/request.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyMetadataDeleteRequest_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\xb1\x4e\xc4\x40\x0c\x44\xfb\xfd\x8a\xd5\x42\xc9\xc5\x14\x54\xf9\x0a\x1a\x2a\x84\x90\x2f\x76\xee\x36\x24\xd9\xb0\x76\x14\x9d\x50\xfe\x1d\x79\x93\x48\x48\x34\xd7\x8e\xc7\xf3\x66\x7e\x9c\xf7\x21\x52\xa8\x7d\xb8\xaa\x4e\x52\x03\x2c\xcb\x52\x75\x51\x9a\x0a\x9b\x6a\xfe\x82\x4c\x22\x20\xcd\x95\x07\x84\x81\x45\xf0\xc2\x02\xe7\x44\x37\x18\x58\x91\x50\x11\x88\x7b\x56\x86\xcc\xdf\x33\x8b\x7e\x6e\xe6\xaa\x93\x34\xc2\x43\x78\x32\xc2\xe3\xa6\x1d\x98\x1a\xc0\xae\xa7\xdd\x99\xf2\x05\x28\x63\xab\xa7\xe7\x97\x1d\xb5\xff\xe9\x6d\x62\x7b\x4a\xe7\x8e\x1b\xdd\xb4\x29\xa7\x89\xb3\x46\x96\x50\x7b\xeb\xef\x8f\xfb\xdb\x5c\x96\x6c\x9a\x51\x33\xb7\x77\x2e\x33\x90\xec\x95\x81\xb8\x8d\x63\xd4\x98\x46\x81\xd9\x32\x4b\xe0\xea\xbc\x5f\x4b\x03\x1b\x1a\x33\x1b\xeb\xfd\x1f\xdf\x79\xff\x51\x5c\x48\x54\x32\xb0\x7f\xfd\xdb\xb8\xc5\x5e\xd8\xad\xee\x37\x00\x00\xff\xff\xb7\x1d\xfc\xdc\x7a\x01\x00\x00")

func messagesBodyMetadataDeleteRequest_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyMetadataDeleteRequest_schemaJson,
		"messages/body/metadata/delete/request_schema.json",
	)
}

func messagesBodyMetadataDeleteRequest_schemaJson() (*asset, error) {
	bytes, err := messagesBodyMetadataDeleteRequest_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/metadata/delete/request_schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyMetadataReadReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x8f\x41\x8b\xdb\x30\x10\x85\xef\xfa\x15\x03\x81\xb2\x3e\xd8\xea\x5e\xd3\x53\x21\x7b\x59\x48\x03\x76\x6f\x21\xd4\x63\x69\x62\x2b\xd8\x92\xa2\x19\xd3\xe4\xdf\x17\xd7\x0d\x31\x49\xa1\xbd\xec\x65\x60\x66\xde\x7b\x7c\x6f\x05\x5b\x12\xb4\x28\x08\x25\xa1\x55\x6a\x4b\xcc\xd8\x12\x7c\xbf\x46\x5a\x43\x7d\xfb\x4e\xcf\xba\x50\x6a\x43\x6c\x92\x6b\x88\x01\xe1\xbd\xda\x7d\x83\x88\xd7\x3e\xa0\x85\x70\x84\xe1\x96\x14\x8e\x80\x1e\xf6\xbb\xe6\x44\x46\x0e\x2f\x9d\x48\xe4\xb5\xd6\xad\x93\x6e\x6c\x0a\x13\x06\xfd\xee\xd8\x94\x9b\xaa\xd2\xc9\x32\xe7\x06\x7d\xf0\xce\x60\x9f\x4f\xf6\x7c\x08\x96\x7a\x2d\x89\x48\xbf\x16\xaf\xc5\x67\x1d\x53\x88\x94\xc4\x11\xeb\x39\x33\x03\xe9\x50\xc0\x31\xb4\xe4\x29\xa1\x90\x05\x3b\x26\xe7\x5b\x40\xa8\xcb\xb7\xaf\x9b\x1a\x26\x0b\x8a\x0b\xbe\x50\x6a\xb5\x82\xca\x90\xc7\xe4\x02\x2b\x95\x43\x45\x5e\xa0\xb9\x02\x8f\xcd\x5c\x27\x31\xfc\xec\xc8\x83\x74\x74\xaf\x71\x0c\x69\xea\x41\x17\xc7\x32\x45\x7f\x68\x21\xc7\x90\xe8\x3c\xba\x44\x76\x06\x2e\xe9\x3c\x12\xcb\x84\xfb\x76\xc1\x21\xf6\xb4\xfe\xe4\x1b\x8e\x5f\x96\x73\x5f\xa7\x59\x56\x9c\x38\xf8\xfa\xf0\xb2\x5c\xb3\xa9\xa9\xe9\x68\xc0\xbf\x38\x1f\xfc\x3f\xf8\xb7\xf0\x21\x66\x79\xcd\xfe\x50\x71\x0c\x9e\xe9\xdf\x58\xb3\xee\x1e\xb8\xd8\xff\x13\x6c\x76\x3c\x91\x3d\x9f\x33\xf5\x2b\x00\x00\xff\xff\xcf\xf2\xcb\xbc\xc7\x02\x00\x00")

func messagesBodyMetadataReadReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyMetadataReadReadmeMd,
		"messages/body/metadata/read/README.md",
	)
}

func messagesBodyMetadataReadReadmeMd() (*asset, error) {
	bytes, err := messagesBodyMetadataReadReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/metadata/read/README.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyMetadataReadRequestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\xca\x4f\xca\x4a\x4d\x2e\x09\x2d\xcd\x4c\x51\xb2\x52\x50\x4a\x4d\x36\x36\x33\x4b\x33\x32\xd7\x4d\x4b\x31\x31\xd6\x35\x31\x49\x4a\xd3\x4d\x32\x35\xb6\xd4\x35\x36\x36\xb0\x34\x37\x37\x4d\x31\x35\x37\x48\x52\xe2\xaa\xe5\x02\x04\x00\x00\xff\xff\x61\xdb\x1b\xa4\x3b\x00\x00\x00")

func messagesBodyMetadataReadRequestJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyMetadataReadRequestJson,
		"messages/body/metadata/read/request.json",
	)
}

func messagesBodyMetadataReadRequestJson() (*asset, error) {
	bytes, err := messagesBodyMetadataReadRequestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/metadata/read/request.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyMetadataReadRequest_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\xb1\x4e\xc4\x40\x0c\x44\xfb\x7c\xc5\x6a\xa1\xe4\x62\x0a\xaa\x7c\x05\x0d\x15\x42\xc8\x17\x3b\x77\x1b\x2e\xd9\x60\x3b\x8a\x4e\x28\xff\x8e\xbc\xc9\x49\x48\x34\xd7\x8e\xc7\xf3\x66\x7e\xaa\x10\x62\xa2\xd8\x84\x78\x36\x9b\xb4\x01\x58\x96\xa5\xee\x93\xb6\x35\xb6\xf5\xfc\x05\x42\xaa\xa0\xed\x99\x07\x84\x81\x55\xf1\xc4\x0a\xc7\x4c\x57\x18\xd8\x90\xd0\x10\x84\x91\x40\xf8\x7b\x66\xb5\xcf\xcd\x5a\xf7\x9a\x47\x78\x88\x4f\x9e\xff\xb8\x69\x37\x48\x03\xe0\xd7\xc3\xee\xcc\x72\x02\x12\xec\xec\xf0\xfc\xb2\x83\xf6\x3f\xbb\x4e\xec\x4f\xf9\xd8\x73\x6b\x9b\x36\x49\x9e\x58\x2c\xb1\xc6\x26\x78\xfb\x70\xbb\xbf\xcd\x65\xc7\xa6\x39\x55\xb8\xbb\x73\x97\x83\x74\xaf\x0c\xc4\x5d\x1a\x93\xa5\x3c\x2a\xcc\x9e\x59\x02\xd7\x2a\x84\xb5\x34\xf0\xa1\x49\xd8\x59\xef\xff\xf8\x55\x08\x1f\xc5\x85\x44\x25\x03\x2f\xaf\x7f\x1b\x77\x78\x51\xae\xd6\xea\x37\x00\x00\xff\xff\x55\x25\x49\xec\x78\x01\x00\x00")

func messagesBodyMetadataReadRequest_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyMetadataReadRequest_schemaJson,
		"messages/body/metadata/read/request_schema.json",
	)
}

func messagesBodyMetadataReadRequest_schemaJson() (*asset, error) {
	bytes, err := messagesBodyMetadataReadRequest_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/metadata/read/request_schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyMetadataReadResponseJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\x08\x3e\x2f\x37\xa4\xac\x4f\x9f\xba\x48\x36\xcd\xb6\x49\x1b\x24\x4e\x2f\x45\x0e\x14\x39\xb2\xd9\xca\xa2\x41\xd2\xd9\xa6\x41\xfe\x7b\x21\x59\x52\x48\x7d\xd8\x6e\x1b\x04\x86\xa4\x79\x24\x67\x38\x33\xef\xcd\xdb\xcc\xf3\xe6\x32\xfb\x03\x98\x79\xda\x0b\x3e\x5f\x7a\xf3\x30\x4a\x30\x24\x80\x91\x9f\xd0\x10\x05\x99\x8f\x51\x1a\x24\x80\x72\x8e\x39\x4e\xe2\x84\x00\xce\xe6\x9f\x3e\xd6\xad\x84\x29\xa0\x5a\xa8\x8d\x12\xe5\xda\x36\xdd\x83\xd2\xb2\x7c\x90\xb5\xfd\xf7\x99\xe7\x79\xde\x5b\xfd\xeb\x79\xf3\x5d\x6d\x9b\x2f\xbb\x2f\xdd\xb7\xd6\x11\x3f\x4e\x08\xa1\x01\x43\x29\xcb\x42\x14\x40\xc4\x11\xc5\x51\x8a\x42\x46\x52\x3f\x49\x72\x0a\x61\x52\x9f\xe6\xac\xfe\xc6\xa1\x34\x22\x17\xa0\xba\x33\x0f\x7f\x6f\xd6\xf3\x08\xfa\x37\x5a\xec\xfb\x61\x1c\x81\xaf\x5e\x77\x15\x9a\x58\xa8\xf7\xee\xf9\x79\xe0\xd5\x8d\x2c\xa5\x12\xb9\x60\xf7\x0a\x72\xf1\xd7\xe8\x39\x0d\xf4\x47\xf1\x02\xe5\x2f\x74\x0b\xfa\x18\xea\x9a\x6e\x45\xf1\x7a\x12\xd6\x9d\xfb\xb8\xcf\x4f\x9c\x7b\x47\x45\x51\xd9\x0f\x6f\x3f\x94\x60\x86\x98\x5f\xd5\x9a\x96\x42\x53\x23\x64\xf9\x54\x0a\xe3\xa4\xaf\x4a\x7b\xcf\xde\xa5\x32\xc9\x20\xce\x49\x84\x30\xc4\x18\x05\x11\xc9\x11\xf5\x79\x86\x78\xca\x63\x16\x05\x34\xc9\x49\xec\xdc\xf8\x60\xa7\x2a\xd2\x89\xec\x38\xd8\x9e\x47\x3d\xeb\x4f\x42\xb3\x6f\x95\x47\xe4\xd3\x34\xe8\xc8\x51\x3d\x64\x5b\x04\x47\x20\x5f\x38\x57\xa0\xed\x1c\x8d\x56\x4c\xfb\xf4\xde\x6e\x35\x57\x87\xae\x39\x14\x58\x65\x7e\xb6\x1a\xeb\x0a\x34\x53\x62\xd7\x04\x3c\xd2\x79\x0f\x62\xbd\x31\xba\xbb\x8c\xb9\xaa\xdf\x1f\x0d\x35\xb0\x85\xd2\x58\xad\xe1\xb8\xd5\x14\x6e\x03\xbf\x91\x05\x77\xda\x68\x14\x5b\x08\x06\x25\x03\x0b\x66\x75\x74\x63\x9c\xbc\xd2\x16\xe0\x74\xed\x14\x4c\xc3\xa3\xa1\xca\x5c\x51\x53\x6f\xe6\x63\x92\x20\x4c\x10\x26\x2b\x8c\x97\xf5\x3f\xaa\x7f\x47\x16\x7e\x2d\xb9\xb3\x8c\xf8\x68\x41\x56\xfe\x62\x19\xa6\xcb\x30\x6d\x96\xcd\xec\x5c\xb4\xe1\x51\xc6\x0e\xf9\x1b\x89\xee\x60\x1b\x56\x41\x63\xb0\xaf\xbb\x97\xfd\xe6\x8c\x59\x93\xf1\x36\xad\x07\x17\x7b\x4c\xc9\xa9\x81\x8e\x9d\x7c\x8c\x7d\x44\x30\xc2\xfe\x8a\x74\x41\x87\x76\xd0\x35\xde\xa1\xa7\x7e\xf5\xfc\x0c\xaf\xdf\xa5\xe2\x1f\x41\x59\xce\xd9\xb8\x4b\x6a\x60\x2d\xd5\xeb\x29\xdc\x03\x68\xb9\x57\x0c\xec\x8b\x68\x4c\xad\xdf\xf6\xb7\x11\x86\xee\x62\x15\x27\xf9\xd8\x82\x1c\x0d\xf2\x01\x0a\x6a\x80\x9f\x77\x98\x2b\x43\xa7\x9d\x98\x76\xc3\x69\xe1\xca\x05\x8b\x26\x46\xfd\xb4\x29\x75\x5c\x29\x27\xe9\xed\x24\xb5\x9d\x47\x6b\x27\x28\xed\x3c\x3a\x3b\x93\xb8\xee\x15\x68\x50\x2f\xf5\x5e\x5f\x5f\x6c\x26\xfa\x18\x0c\xfa\x90\xc9\x4a\x18\x20\xfb\xce\x0f\x11\x57\x60\x1a\x99\xb3\xdd\xef\x7b\x79\x2d\xc6\xf2\x90\x8b\x02\x5a\x41\x03\x12\x62\x16\xd0\x0c\xe1\x45\x25\x68\x10\x52\x94\xc4\xbe\x8f\xe2\x3c\x5b\x2c\xa2\x34\x8b\xb1\x25\x68\xf5\xca\xa3\x0c\x57\x23\x26\x12\x54\xdb\x1e\xc5\xdf\x6e\x64\xd5\xc7\x5b\x9a\x41\x31\xb5\xa2\xe2\x92\x4b\x05\x55\x0f\x9c\xc9\x1b\xd5\xaa\x9e\x6e\x78\xc7\xb5\xc3\xeb\x6b\x82\xd7\x1b\x7e\x26\x74\xe4\xe4\xba\xa1\xa6\x78\xc3\x09\xee\x94\xb6\x78\xe7\xeb\x8b\xf7\x7f\x34\xc6\xfb\x8f\x3a\xe3\x4d\xce\x8c\x03\xcd\x19\x89\x7e\x4a\x7b\xbc\xb3\xf4\xa7\x77\xf6\xa0\x89\xab\x5a\xb8\xdc\x00\xfb\x53\xef\xb7\x8e\x1f\xce\xb8\xc7\x1a\x44\xdb\x15\x3c\xf7\x17\x59\x10\x65\x28\xca\xa2\x00\x05\x34\xc0\x28\x09\xfc\x1c\x85\x94\x2f\xa2\x45\x96\x45\x40\x88\x3b\xba\xb5\x3b\x8c\xc5\xd1\x19\xfb\x04\x30\x98\x9a\x9e\x1d\xbf\xaf\xa5\xda\xd2\x96\x0b\x46\x7b\xe3\x52\x6e\x77\x52\x8b\x8a\x15\x6e\xe1\x65\xba\x87\x6e\xa8\xbe\x13\xdb\x56\xd7\x8c\xda\xc3\xa0\xc5\xee\x24\xaf\xca\x8a\x3b\x97\x74\xa4\xdb\x46\x3d\xbe\x3f\xdc\x9f\xb5\x81\x1b\xa9\x8b\x7e\xd2\x43\x2a\x98\xe6\xd5\x41\xd2\xce\xe6\xd7\x71\xf4\x68\xa6\xce\xe4\xd9\xe9\x9c\x3d\xed\x0a\x49\x79\x55\xb0\x7b\x3d\x08\xee\xd1\x48\x45\xd7\x30\x61\xbd\xa5\xda\x5c\xc9\xef\x65\xb5\xc1\xbf\xe2\xba\x15\xb0\x4d\x29\x18\x2d\xbe\x18\xa3\x44\xb6\x37\xa0\xcf\x4f\x42\xe3\xd3\xad\x64\xad\x2e\xcf\x37\xc6\xec\xf4\xf2\xe2\xc2\x48\x59\xe8\xcf\x02\x4c\xfe\x59\xaa\xf5\xc5\xc6\x6c\x8b\x0b\x95\xb3\x45\x9a\x44\xf3\xb1\x3d\xee\x0b\x6a\x72\xa9\xb6\x2e\xeb\x6a\xd7\xd8\xb6\x58\xee\xa7\x8b\x34\xc4\x04\xf9\x99\xcf\x2b\xe1\x61\x28\x25\x69\x8c\x30\xa7\x34\x8c\x19\xcb\x22\xdf\x6e\xb1\xfe\x36\xd3\x43\x40\x0f\x38\x32\x07\xf4\x10\x97\x52\x4f\x0e\xb6\xb5\xa0\xce\xde\x67\xff\x04\x00\x00\xff\xff\x00\x7c\xaa\x39\x5f\x10\x00\x00")

func messagesBodyMetadataReadResponseJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyMetadataReadResponseJson,
		"messages/body/metadata/read/response.json",
	)
}

func messagesBodyMetadataReadResponseJson() (*asset, error) {
	bytes, err := messagesBodyMetadataReadResponseJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/metadata/read/response.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyMetadataReadResponse_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xce\xc1\x8e\x83\x30\x0c\x04\xd0\x3b\x5f\x81\xb2\x7b\x5c\x32\x7b\xe8\x89\x9f\x41\x26\x31\x10\x2a\x12\x64\xbb\x42\x55\xd5\x7f\xaf\x10\x70\xef\xd5\x33\xd6\x9b\x57\x55\xd7\x2e\x45\xd7\xd6\x6e\x32\x5b\xb5\x05\xb6\x6d\xf3\x73\xd2\xe0\x29\xf8\xc7\x1d\x12\x55\xa1\x61\xe2\x85\xb0\xb0\x2a\x8d\xac\xe8\x4b\x7c\x62\x61\xa3\x48\x46\x10\xa6\x08\x61\x5d\x4b\x56\xee\x8e\xae\x9f\xb5\x64\xfc\xb8\xbf\x1d\xf8\x3d\x6e\x97\xd2\x02\x7b\xda\x9c\xcd\x22\x23\xa2\xd0\x60\xcd\xff\xed\x94\xae\x3f\xe1\xe1\xcb\x69\xc2\xca\x24\x61\xea\x4a\x3f\x73\xb0\x93\x47\xe4\x21\xe5\x64\xa9\x64\xc5\x91\xb8\xea\x5d\x7d\x02\x00\x00\xff\xff\x8b\xe3\xab\x06\xf6\x00\x00\x00")

func messagesBodyMetadataReadResponse_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyMetadataReadResponse_schemaJson,
		"messages/body/metadata/read/response_schema.json",
	)
}

func messagesBodyMetadataReadResponse_schemaJson() (*asset, error) {
	bytes, err := messagesBodyMetadataReadResponse_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/metadata/read/response_schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyMetadataUpdateReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x90\x41\x0b\xda\x40\x10\x85\xef\xfb\x2b\x06\x84\xa2\x87\x64\xeb\xd5\x9e\x04\xbd\x08\x6a\x31\x7a\x12\x69\x26\xbb\x93\x64\x25\xd9\xdd\xee\x4c\xa0\xfe\xfb\x12\x53\x8b\x48\xaf\xbd\x2c\xcc\xce\x7b\x8f\xf7\xcd\x0c\xf6\x24\x68\x51\x10\x2e\xd1\xa2\x90\x52\x7b\x62\xc6\x86\xe0\xfc\x88\xb4\x82\xf2\xb5\x9f\xd6\x65\xae\xd4\x86\xd8\x24\x57\x11\x03\xc2\xae\x38\x1e\x20\xe2\xa3\x0b\x68\x21\xd4\xd0\xbf\xd2\x42\x0d\xe8\xe1\x7a\xac\xee\x64\xe4\x36\x6f\x45\x22\xaf\xb4\x6e\x9c\xb4\x43\x95\x9b\xd0\xeb\x9d\x63\x73\xda\x14\x85\x4e\x96\x39\x33\xe8\x83\x77\x06\xbb\x6c\xb4\x67\x7d\xb0\xd4\x69\x49\x44\x7a\x99\x2f\xf3\xaf\x3a\xa6\x10\x29\x89\x23\xd6\x53\xe6\x02\xa4\x45\x01\xc7\xd0\x90\xa7\x84\x42\x16\xec\x90\x9c\x6f\x00\xa1\xbc\x7c\xdf\xac\xcf\xdb\x12\x46\x13\x8a\x0b\x3e\x57\x6a\x36\x83\xc2\x90\xc7\xe4\x02\x2b\x95\x41\x41\x5e\x40\x02\xf0\x50\x4d\x40\x89\xc7\xd1\x07\x71\xf5\x63\x4a\xff\x8b\x53\x87\xf4\xdf\x79\x5a\x64\xa8\x88\x3c\x0c\xcf\x53\xdb\xa9\xf2\x89\x7e\x0e\xc4\x32\x16\xde\xfe\xc2\x3e\x76\xb4\xfa\xe2\x2b\x8e\xdf\xde\xdf\x6b\x99\x26\x59\x7e\xe7\xe0\xcb\xdb\xfc\x7d\x5c\x8c\xac\xa6\xa5\x1e\xff\xe1\xfc\xf0\xff\xe0\xa7\xf0\x23\xe6\xfd\x77\xf1\xa7\x15\xc7\xe0\x99\x94\x3a\xe8\x75\xae\x7e\x07\x00\x00\xff\xff\xfb\x23\x4c\x8b\x47\x02\x00\x00")

func messagesBodyMetadataUpdateReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyMetadataUpdateReadmeMd,
		"messages/body/metadata/update/README.md",
	)
}

func messagesBodyMetadataUpdateReadmeMd() (*asset, error) {
	bytes, err := messagesBodyMetadataUpdateReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/metadata/update/README.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyMetadataUpdateRequestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\x08\x3e\x2f\x37\xa4\xac\x4f\x9f\xba\x48\x36\xcd\xb6\x49\x1b\x24\x4e\x2f\x45\x0e\x14\x39\xb2\xd9\xca\xa2\x41\xd2\xd9\xa6\x41\xfe\x7b\x21\x59\x52\x48\x7d\xd8\x6e\x1b\x04\x86\xa4\x79\x24\x67\x38\x33\xef\xcd\xdb\xcc\xf3\xe6\x32\xfb\x03\x98\x79\xda\x0b\x3e\x5f\x7a\xf3\x30\x4a\x30\x24\x80\x91\x9f\xd0\x10\x05\x99\x8f\x51\x1a\x24\x80\x72\x8e\x39\x4e\xe2\x84\x00\xce\xe6\x9f\x3e\xd6\xad\x84\x29\xa0\x5a\xa8\x8d\x12\xe5\xda\x36\xdd\x83\xd2\xb2\x7c\x90\xb5\xfd\xf7\x99\xe7\x79\xde\x5b\xfd\xeb\x79\xf3\x5d\x6d\x9b\x2f\xbb\x2f\xdd\xb7\xd6\x11\x3f\x4e\x08\xa1\x01\x43\x29\xcb\x42\x14\x40\xc4\x11\xc5\x51\x8a\x42\x46\x52\x3f\x49\x72\x0a\x61\x52\x9f\xe6\xac\xfe\xc6\xa1\x34\x22\x17\xa0\xba\x33\x0f\x7f\x6f\xd6\xf3\x08\xfa\x37\x5a\xec\xfb\x61\x1c\x81\xaf\x5e\x77\x15\x9a\x58\xa8\xf7\xee\xf9\x79\xe0\xd5\x8d\x2c\xa5\x12\xb9\x60\xf7\x0a\x72\xf1\xd7\xe8\x39\x0d\xf4\x47\xf1\x02\xe5\x2f\x74\x0b\xfa\x18\xea\x9a\x6e\x45\xf1\x7a\x12\xd6\x9d\xfb\xb8\xcf\x4f\x9c\x7b\x47\x45\x51\xd9\x0f\x6f\x3f\x94\x60\x86\x98\x5f\xd5\x9a\x96\x42\x53\x23\x64\xf9\x54\x0a\xe3\xa4\xaf\x4a\x7b\xcf\xde\xa5\x32\xc9\x20\xce\x49\x84\x30\xc4\x18\x05\x11\xc9\x11\xf5\x79\x86\x78\xca\x63\x16\x05\x34\xc9\x49\xec\xdc\xf8\x60\xa7\x2a\xd2\x89\xec\x38\xd8\x9e\x47\x3d\xeb\x4f\x42\xb3\x6f\x95\x47\xe4\xd3\x34\xe8\xc8\x51\x3d\x64\x5b\x04\x47\x20\x5f\x38\x57\xa0\xed\x1c\x8d\x56\x4c\xfb\xf4\xde\x6e\x35\x57\x87\xae\x39\x14\x58\x65\x7e\xb6\x1a\xeb\x0a\x34\x53\x62\xd7\x04\x3c\xd2\x79\x0f\x62\xbd\x31\xba\xbb\x8c\xb9\xaa\xdf\x1f\x0d\x35\xb0\x85\xd2\x58\xad\xe1\xb8\xd5\x14\x6e\x03\xbf\x91\x05\x77\xda\x68\x14\x5b\x08\x06\x25\x03\x0b\x66\x75\x74\x63\x9c\xbc\xd2\x16\xe0\x74\xed\x14\x4c\xc3\xa3\xa1\xca\x5c\x51\x53\x6f\xe6\x63\x92\x20\x4c\x10\x26\x2b\x8c\x97\xf5\x3f\xaa\x7f\x47\x16\x7e\x2d\xb9\xb3\x8c\xf8\x68\x41\x56\xfe\x62\x19\xa6\xcb\x30\x6d\x96\xcd\xec\x5c\xb4\xe1\x51\xc6\x0e\xf9\x1b\x89\xee\x60\x1b\x56\x41\x63\xb0\xaf\xbb\x97\xfd\xe6\x8c\x59\x93\xf1\x36\xad\x07\x17\x7b\x4c\xc9\xa9\x81\x8e\x9d\x7c\x8c\x7d\x44\x30\xc2\xfe\x8a\x74\x41\x87\x76\xd0\x35\xde\xa1\xa7\x7e\xf5\xfc\x0c\xaf\xdf\xa5\xe2\x1f\x41\x59\xce\xd9\xb8\x4b\x6a\x60\x2d\xd5\xeb\x29\xdc\x03\x68\xb9\x57\x0c\xec\x8b\x68\x4c\xad\xdf\xf6\xb7\x11\x86\xee\x62\x15\x27\xf9\xd8\x82\x1c\x0d\xf2\x01\x0a\x6a\x80\x9f\x77\x98\x2b\x43\xa7\x9d\x98\x76\xc3\x69\xe1\xca\x05\x8b\x26\x46\xfd\xb4\x29\x75\x5c\x29\x27\xe9\xed\x24\xb5\x9d\x47\x6b\x27\x28\xed\x3c\x3a\x3b\x93\xb8\xee\x15\x68\x50\x2f\xf5\x5e\x5f\x5f\x6c\x26\xfa\x18\x0c\xfa\x90\xc9\x4a\x18\x20\xfb\xce\x0f\x11\x57\x60\x1a\x99\xb3\xdd\xef\x7b\x79\x2d\xc6\xf2\x90\x8b\x02\x5a\x41\x03\x12\x62\x16\xd0\x0c\xe1\x45\x25\x68\x10\x52\x94\xc4\xbe\x8f\xe2\x3c\x5b\x2c\xa2\x34\x8b\xb1\x25\x68\xf5\xca\xa3\x0c\x57\x23\x26\x12\x54\xdb\x1e\xc5\xdf\x6e\x64\xd5\xc7\x5b\x9a\x41\x31\xb5\xa2\xe2\x92\x4b\x05\x55\x0f\x9c\xc9\x1b\xd5\xaa\x9e\x6e\x78\xc7\xb5\xc3\xeb\x6b\x82\xd7\x1b\x7e\x26\x74\xe4\xe4\xba\xa1\xa6\x78\xc3\x09\xee\x94\xb6\x78\xe7\xeb\x8b\xf7\x7f\x34\xc6\xfb\x8f\x3a\xe3\x4d\xce\x8c\x03\xcd\x19\x89\x7e\x4a\x7b\xbc\xb3\xf4\xa7\x77\xf6\xa0\x89\xab\x5a\xb8\xdc\x00\xfb\x53\xef\xb7\x8e\x1f\xce\xb8\xc7\x1a\x44\xdb\x15\x3c\xf7\x17\x59\x10\x65\x28\xca\xa2\x00\x05\x34\xc0\x28\x09\xfc\x1c\x85\x94\x2f\xa2\x45\x96\x45\x40\x88\x3b\xba\xb5\x3b\x8c\xc5\xd1\x19\xfb\x04\x30\x98\x9a\x9e\x1d\xbf\xaf\xa5\xda\xd2\x96\x0b\x46\x7b\xe3\x52\x6e\x77\x52\x8b\x8a\x15\x6e\xe1\x65\xba\x87\x6e\xa8\xbe\x13\xdb\x56\xd7\x8c\xda\xc3\xa0\xc5\xee\x24\xaf\xca\x8a\x3b\x97\x74\xa4\xdb\x46\x3d\xbe\x3f\xdc\x9f\xb5\x81\x1b\xa9\x8b\x7e\xd2\x43\x2a\x98\xe6\xd5\x41\xd2\xce\xe6\xd7\x71\xf4\x68\xa6\xce\xe4\xd9\xe9\x9c\x3d\xed\x0a\x49\x79\x55\xb0\x7b\x3d\x08\xee\xd1\x48\x45\xd7\x30\x61\xbd\xa5\xda\x5c\xc9\xef\x65\xb5\xc1\xbf\xe2\xba\x15\xb0\x4d\x29\x18\x2d\xbe\x18\xa3\x44\xb6\x37\xa0\xcf\x4f\x42\xe3\xd3\xad\x64\xad\x2e\xcf\x37\xc6\xec\xf4\xf2\xe2\xc2\x48\x59\xe8\xcf\x02\x4c\xfe\x59\xaa\xf5\xc5\xc6\x6c\x8b\x0b\x95\xb3\x45\x9a\x44\xf3\xb1\x3d\xee\x0b\x6a\x72\xa9\xb6\x2e\xeb\x6a\xd7\xd8\xb6\x58\xee\xa7\x8b\x34\xc4\x04\xf9\x99\xcf\x2b\xe1\x61\x28\x25\x69\x8c\x30\xa7\x34\x8c\x19\xcb\x22\xdf\x6e\xb1\xfe\x36\xd3\x43\x40\x0f\x38\x32\x07\xf4\x10\x97\x52\x4f\x0e\xb6\xb5\xa0\xce\xde\x67\xff\x04\x00\x00\xff\xff\x00\x7c\xaa\x39\x5f\x10\x00\x00")

func messagesBodyMetadataUpdateRequestJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyMetadataUpdateRequestJson,
		"messages/body/metadata/update/request.json",
	)
}

func messagesBodyMetadataUpdateRequestJson() (*asset, error) {
	bytes, err := messagesBodyMetadataUpdateRequestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/metadata/update/request.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyMetadataUpdateRequest_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\x31\x8e\x83\x40\x0c\x45\x7b\x4e\x81\x86\x2d\x97\xf9\x5b\x6c\xc5\x65\x90\x99\x31\x30\xac\x60\x58\xdb\x08\x45\x51\xee\x1e\x11\x48\x9f\xd6\xef\xd9\xcf\xf7\xa2\x2c\x5d\x8a\xae\x29\xdd\x68\xb6\x6a\x03\xec\xfb\xee\xa7\xa4\xc1\x53\xf0\xdb\x1f\x24\xaa\x42\xc3\xc8\x33\x61\x66\x55\x1a\x58\xd1\xe5\x78\xc3\xcc\x46\x91\x8c\xb0\xad\x91\x8c\x21\xfc\xbf\xb1\x5a\x7b\xca\x7e\xd2\xbc\xb8\xef\xe3\xfe\xd7\x39\x79\x47\x1a\xe0\x60\xf5\xe5\x65\x19\x10\x85\x7a\xab\x7f\x7e\xaf\x50\x75\xed\x09\xf7\x1f\x7e\x26\xac\x4c\x12\xc6\x36\x77\x13\x07\x7b\xc5\x51\x21\x72\x9f\x96\x64\x29\x2f\x8a\x93\xb8\xe2\x51\x3c\x03\x00\x00\xff\xff\x70\x8e\x7d\xb5\xf5\x00\x00\x00")

func messagesBodyMetadataUpdateRequest_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyMetadataUpdateRequest_schemaJson,
		"messages/body/metadata/update/request_schema.json",
	)
}

func messagesBodyMetadataUpdateRequest_schemaJson() (*asset, error) {
	bytes, err := messagesBodyMetadataUpdateRequest_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/metadata/update/request_schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyVocabularyPatchReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x41\x4b\xc3\x40\x10\x85\xef\xf3\x2b\x1e\x14\xc4\x1e\x8c\xf7\x7a\x2a\x2a\x88\x60\x2d\xb6\x78\x11\x71\x27\xc9\xb4\x59\x49\x67\xd7\x9d\x0d\x98\x7f\x2f\x69\x0a\xc6\xe2\x65\xe1\xed\xbc\xf7\xbd\x37\xc3\x6b\xa8\xb8\xec\x5a\x4e\x3d\xd6\x9c\xab\x86\xe8\x49\xcc\x78\x2f\xd8\xf6\x51\x16\x70\xbf\x86\xe3\xdd\x15\x44\x77\x62\x55\xf2\xa5\x18\x18\x8f\x9b\xe7\x15\x22\xf7\x6d\xe0\x1a\xbb\x90\xc0\x53\x64\x6e\x38\xc3\x1b\xf6\xa2\x92\x38\x4b\x8d\xba\x4b\x5e\xf7\x60\x85\x5b\x2f\xb7\xb7\x0f\x0e\x21\x66\x1f\xb4\x20\x9a\xcd\xb0\xa9\x44\x39\xf9\x60\x44\x57\xd8\x88\x66\xe4\x00\xeb\xca\xb1\x2f\xd9\x20\x35\x64\xbf\x3b\xa1\xff\x94\x35\x6c\x28\x45\x14\x71\x18\x2a\xf5\x88\x7c\x91\xaf\x4e\x2c\x0f\xc0\xfb\x6f\x3e\xc4\x56\x16\x17\x5a\x5a\xbc\x99\xbe\x6f\x2e\x8d\xb6\xe2\xd3\x82\xba\xf7\xcb\xa9\x9c\x0f\x5b\xaa\x46\x0e\xfc\x4f\xf2\x2c\xff\x61\x47\xe3\x19\x66\xfa\x3b\x3f\xad\xb2\x18\xd4\x84\x68\x75\xbd\x2c\xe8\x27\x00\x00\xff\xff\xe9\x53\x6e\x25\x88\x01\x00\x00")

func messagesBodyVocabularyPatchReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyVocabularyPatchReadmeMd,
		"messages/body/vocabulary/patch/README.md",
	)
}

func messagesBodyVocabularyPatchReadmeMd() (*asset, error) {
	bytes, err := messagesBodyVocabularyPatchReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/vocabulary/patch/README.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyVocabularyPatchRequestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x2a\xcb\x4f\x4e\x4c\x2a\xcd\x49\x2c\xaa\xf4\x4c\x51\xb2\x52\x30\xd4\x41\x15\xf4\x4b\xcc\x4d\x55\xb2\x52\x50\x72\x54\x08\x48\x2c\x49\xce\x48\x4d\x51\x08\x83\xcb\x29\xa1\xa9\x0d\x49\x2d\xca\x2d\x56\xb2\x52\x88\xe6\x52\x50\x50\x50\x50\x02\x71\x15\xfc\xf3\x52\xc1\xca\x60\xfc\x90\xf2\x7c\x54\x7e\x46\x51\x6a\xaa\x12\x97\x82\x42\x2c\x57\x2d\x17\x20\x00\x00\xff\xff\xde\x07\xab\x21\x91\x00\x00\x00")

func messagesBodyVocabularyPatchRequestJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyVocabularyPatchRequestJson,
		"messages/body/vocabulary/patch/request.json",
	)
}

func messagesBodyVocabularyPatchRequestJson() (*asset, error) {
	bytes, err := messagesBodyVocabularyPatchRequestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/vocabulary/patch/request.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyVocabularyPatchRequest_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x51\xb1\x6e\xe3\x30\x0c\xdd\xfd\x15\x82\x2e\x63\x62\xde\x70\x93\xf7\x1b\xb2\x1c\x0e\x68\xb7\xa2\x28\x68\x8b\x4e\x94\xc6\x92\x43\x52\x0d\x8c\x22\xff\x5e\xc8\xb1\xd3\xa0\x48\x80\x2e\x5d\x34\x3c\xf1\xf1\x3d\xbe\xf7\x5e\x18\x63\xbd\xb3\x95\xb1\x5b\xd5\x5e\x2a\x80\xe3\xf1\x58\xee\xbc\x34\x25\x36\x65\x7a\x05\x76\x22\x20\xcd\x96\x3a\x84\x8e\x44\x70\x43\x02\x75\x74\x03\xbc\xc5\x06\xeb\xb4\x47\x1e\x20\xf5\x0e\x95\x80\xe9\x90\x48\xf4\xe5\x3c\x5e\xee\x24\x06\xf8\x65\x97\x59\x63\x71\xc6\x66\xa1\x0a\x20\xff\xae\xa6\xc9\xc8\x1b\x70\x8c\xad\xae\x7e\xff\x99\xc4\x26\x9e\x0e\x3d\x65\x52\xac\x77\xd4\xe8\x19\xeb\x39\xf6\xc4\xea\x49\x6c\x65\xf2\x05\xc6\xd8\x4f\x33\x6b\x77\x41\xaf\xf8\x21\x75\x35\xb1\x1d\xe1\xd3\xf2\x2b\xe7\x1f\x76\x74\xcd\x5a\x30\xb5\xdf\xcc\x24\x0b\xc8\x74\x2a\x38\x6a\x7d\xf0\xea\x63\x10\x08\x31\xfc\xed\x7a\x1d\x1e\x94\x7d\xd8\xdc\x53\x7e\x24\xee\xe4\x96\x61\x64\xc6\xc1\x2e\x67\x38\x05\x7f\x48\xb4\x56\x1a\xa7\x95\x13\x5d\xbe\xfc\x04\xce\x2b\x7e\xd0\xbf\x31\xa7\x62\x7e\xc7\x5b\x6c\xae\xdc\x33\xe5\xcc\x9f\x6e\x34\x71\x3b\xe9\x3b\x29\x14\xc6\x3c\x8f\x4b\xd1\xb9\xd1\x04\xee\xff\x5f\x57\xdd\xe2\x5e\xa8\x38\x15\x1f\x01\x00\x00\xff\xff\xa7\x6f\x52\x03\xb5\x02\x00\x00")

func messagesBodyVocabularyPatchRequest_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyVocabularyPatchRequest_schemaJson,
		"messages/body/vocabulary/patch/request_schema.json",
	)
}

func messagesBodyVocabularyPatchRequest_schemaJson() (*asset, error) {
	bytes, err := messagesBodyVocabularyPatchRequest_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/vocabulary/patch/request_schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyVocabularyReadReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\x4f\x4b\xf3\x40\x10\xc6\xef\xfb\x29\x1e\x28\xbc\xbc\x3d\xd8\x0f\x50\x4f\x42\x7b\x11\x54\x68\x8a\x17\x11\x77\x92\x8c\xc9\x4a\xb2\xbb\x9d\xd9\xa8\xf9\xf6\x12\x53\xe8\xd2\x0a\x7a\x59\xd8\x79\xfe\xfd\x16\x78\x0c\x15\x95\x43\x47\x32\x62\xc7\x54\x1b\x73\xc7\xaa\xd4\x30\xf6\x63\xe4\x35\xec\x49\x9f\x64\xbb\x32\x66\xc3\x5a\x89\x2b\x59\x41\xb8\x2d\x1e\xee\x11\x69\xec\x02\xd5\x78\x0d\x02\xca\x0b\x53\x4b\x09\x4e\xd1\xb0\x67\xa1\xc4\x35\xea\x41\x9c\x6f\x40\xb0\xbb\xed\xcd\xc6\x22\xc4\xe4\x82\x5f\x19\xb3\x58\xa0\xa8\xd8\x93\xb8\xa0\xc6\x5c\xa1\x60\x9f\x50\x8e\xd0\xa1\x9c\xd7\x44\xf1\xd1\xb2\x07\x75\x1d\xf6\x2c\xbd\x82\x84\x8f\x93\x8d\x7b\x67\x9f\x0f\x4f\x92\xf0\x61\x70\xc2\xf5\x5c\xbe\xe3\xc3\xc0\x9a\xa6\xea\xed\x27\xf5\xb1\xe3\xf5\x3f\x5f\x6a\xbc\xce\xdf\x27\x2b\xb3\x6d\xf5\xa6\xc1\xdb\xe7\xff\xf9\x77\x39\x51\x55\x2d\xf7\xf4\x43\xf2\x2c\xff\xa2\xdf\xc6\xb3\x9a\xfc\xba\x3c\x52\x69\x0c\x5e\xf9\x77\xac\xd9\x77\x2a\xcc\xfe\x7f\x04\x9b\x13\x17\x64\x97\xe7\xa5\xf9\x0a\x00\x00\xff\xff\x8e\x74\x2e\x09\x16\x02\x00\x00")

func messagesBodyVocabularyReadReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyVocabularyReadReadmeMd,
		"messages/body/vocabulary/read/README.md",
	)
}

func messagesBodyVocabularyReadReadmeMd() (*asset, error) {
	bytes, err := messagesBodyVocabularyReadReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/vocabulary/read/README.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyVocabularyReadRequestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x2a\xcb\x4f\x4e\x4c\x2a\xcd\x49\x2c\xaa\xf4\x4c\x51\xb2\x52\x30\xe4\xaa\xe5\x02\x04\x00\x00\xff\xff\xbe\x10\x07\xc5\x18\x00\x00\x00")

func messagesBodyVocabularyReadRequestJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyVocabularyReadRequestJson,
		"messages/body/vocabulary/read/request.json",
	)
}

func messagesBodyVocabularyReadRequestJson() (*asset, error) {
	bytes, err := messagesBodyVocabularyReadRequestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/vocabulary/read/request.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyVocabularyReadRequest_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xb1\x4e\xc4\x30\x0c\x86\xf7\x3c\x85\x15\x18\xb9\x9a\x81\xa9\x6f\xc0\xc6\x8e\x10\x72\x13\xdf\x5d\x4a\xdb\x14\x3b\xa1\xaa\x50\xdf\x1d\xa5\x2d\xd0\xe1\xd6\xdf\xff\xe7\xef\xff\x36\x00\x36\x78\x5b\x83\xbd\xa6\x34\x6a\x8d\x38\x4d\x53\xd5\x06\x75\x15\xb9\x2a\x7f\xa0\x78\x55\x54\x77\xe5\x9e\xb0\x67\x55\xba\xb0\x62\x13\xfd\x8c\x5f\xd1\x51\x93\x3b\x92\x19\x85\xc9\xa3\xf0\x67\x66\x4d\xef\x5b\xb9\x6a\x35\x0e\x78\x67\x1f\x8a\xe1\x7e\xcb\x7e\x35\x35\x62\xb9\x9e\xf6\x66\x94\x0b\x7a\xa1\x73\x3a\x3d\x3e\xed\xaa\x9d\x4b\xf3\xc8\x05\x8a\x4d\xcb\x2e\x6d\xd9\x28\x71\x64\x49\x81\xd5\xd6\x50\xf6\x03\xd8\xff\x29\xcf\xfe\x2f\x3d\xf0\x43\xee\x1b\x16\xbb\xc6\x8b\x01\x58\xd6\x4f\x65\x70\x10\x2e\xc4\xeb\x8d\x3f\x06\xe0\x6d\xed\x91\xf7\x21\x85\x38\x50\xf7\x72\x74\x9f\xa9\x53\x36\x8b\xf9\x09\x00\x00\xff\xff\x6d\xf6\xae\x70\x44\x01\x00\x00")

func messagesBodyVocabularyReadRequest_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyVocabularyReadRequest_schemaJson,
		"messages/body/vocabulary/read/request_schema.json",
	)
}

func messagesBodyVocabularyReadRequest_schemaJson() (*asset, error) {
	bytes, err := messagesBodyVocabularyReadRequest_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/vocabulary/read/request_schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyVocabularyReadResponseJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x2a\xcb\x4f\x4e\x4c\x2a\xcd\x49\x2c\xaa\xf4\x4c\x51\xb2\x52\x30\xd4\x41\x15\x0c\x49\x2d\xca\x2d\x56\xb2\x52\x88\xe6\x52\x50\x50\x50\x50\x02\x71\x15\xfc\xf3\x52\x95\x74\x90\xf8\x21\xe5\xf9\xa8\xfc\x8c\xa2\xd4\x54\x25\x2e\x05\x85\x58\xae\x5a\x2e\x40\x00\x00\x00\xff\xff\xe1\x26\xf3\x1b\x65\x00\x00\x00")

func messagesBodyVocabularyReadResponseJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyVocabularyReadResponseJson,
		"messages/body/vocabulary/read/response.json",
	)
}

func messagesBodyVocabularyReadResponseJson() (*asset, error) {
	bytes, err := messagesBodyVocabularyReadResponseJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/vocabulary/read/response.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyVocabularyReadResponse_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x31\x4f\xfb\x30\x10\xc5\xf7\x7c\x0a\xcb\xff\xff\xd8\xe6\x18\x98\xb2\x33\x74\x43\x82\x0d\x21\x74\x89\x2f\xad\x4b\x63\xbb\x77\x36\x55\x84\xfa\xdd\x91\x13\xa7\x54\xa8\x48\x2c\x1e\xde\xdd\xef\x9e\xdf\xfb\xac\x94\xd2\xd6\xe8\x46\xe9\x5d\x8c\x41\x1a\x80\xd3\xe9\x54\xef\xad\x74\x35\x76\x75\x7a\x07\x36\x22\x20\xdd\x8e\x06\x84\x81\x44\x70\x4b\x02\xad\x37\x23\x7c\xf8\x0e\xdb\x74\x40\x1e\x81\x09\x0d\x30\x49\xf0\x4e\xe8\x6d\xde\xae\xf7\xe2\x1d\xfc\xd3\xab\x6c\xf1\x7f\xd6\x16\x9f\x06\x20\x4f\xd7\x65\xd3\xf3\x16\x0c\x63\x1f\xd7\x77\xf7\xc5\xab\x70\x71\x0c\x94\x21\xdf\xee\xa9\x8b\xb3\x16\xd8\x07\xe2\x68\x49\x74\xa3\x72\x00\xa5\xf4\xf7\x5f\x36\xe6\xa2\x5e\xf1\x2e\x0d\x2d\xb1\x9e\xe4\xf3\xea\x27\xf3\x4c\x3c\xc8\x2d\x0c\x99\x71\xd4\xab\x45\x4e\xce\x1e\x13\x6d\x22\x4d\xdb\x91\x13\x5d\x46\xb6\x88\xcb\x89\x9c\x99\xa9\xff\x63\xb1\xd9\x4f\x4a\x61\x60\xa8\xb7\xce\x46\xeb\x9d\x80\xf3\xee\x61\x08\x71\x7c\x8a\x6c\xdd\x56\x97\xe3\xe7\x6a\x79\xa7\x2c\x9a\xe9\x98\x2c\x53\x4e\xfe\x72\xa3\x8f\x5f\xf2\x56\x4a\xbd\x4e\x38\x1a\x33\xd9\xe1\xe1\xf1\xba\xda\x1e\x0f\x42\xd5\xb9\xfa\x0a\x00\x00\xff\xff\x73\x5d\x27\x3f\x24\x02\x00\x00")

func messagesBodyVocabularyReadResponse_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyVocabularyReadResponse_schemaJson,
		"messages/body/vocabulary/read/response_schema.json",
	)
}

func messagesBodyVocabularyReadResponse_schemaJson() (*asset, error) {
	bytes, err := messagesBodyVocabularyReadResponse_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/vocabulary/read/response_schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesHeaderHeaderJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xc1\x8e\x9b\x30\x10\xbd\xf3\x15\x96\xaf\xad\x23\xdb\x31\x38\x70\xab\xd2\x55\xdb\x43\x7b\xd8\xe6\x56\xf5\x30\xd8\x43\xd6\x12\x60\x6a\x3b\x55\x57\x55\xfe\xbd\x32\x50\x85\xec\x29\x12\x1a\x89\x79\xbc\x79\x6f\xde\xf0\xb7\x20\x84\x0e\x18\x23\x9c\xf1\x8b\xa5\x0d\xa1\xa6\xd2\xba\x52\xa2\x65\x46\x73\x64\x0a\x74\xc7\xea\x03\xd7\x0c\x41\x72\xad\xa4\xd9\xab\x0a\xe9\xfb\x4c\x33\x3e\x04\xec\x21\x39\x3f\x2e\x54\x55\x72\xa1\xf6\x1a\x98\xc1\xba\x64\x6a\xaf\x25\x6b\xb1\x34\x4c\x6a\x6d\xda\x0a\x0e\xb2\xc2\x76\xa1\xae\x8a\xc7\x1e\x62\xcc\xcc\xa3\x1f\x06\x18\xed\x1d\x78\x7a\x9d\x30\x63\x5f\x31\x81\x85\x04\xc7\x80\x90\x56\xe9\x80\xe9\x12\xc6\x0f\xd6\x06\x5c\x06\xc4\x14\xdc\x78\xbe\xe7\xbb\xc1\x8d\xe7\x8c\xe6\x25\x09\xa1\xd3\xa5\xed\x5d\x7c\x41\x7b\x72\x03\xc6\x04\xc3\x94\x99\x92\x73\xc5\xf8\x81\x71\x71\x12\xbc\xe1\xf9\x61\x73\x9d\x87\x11\x42\xf1\xcf\xe4\xc2\xbc\xe5\x83\xbc\x82\x90\xeb\xd6\xc8\x77\xfc\x75\xc1\xd1\xe0\xcd\x49\xbc\x75\x68\xa9\x39\x96\xca\x22\xb3\x16\x5b\xa6\x34\xd4\xac\xad\x64\xcd\x24\x08\x34\xb2\x3b\x94\x5a\x56\xff\xad\x4c\x3e\xba\x6c\x84\x36\x44\xac\xad\xe4\x13\xf4\xf9\xfd\xad\xea\x67\x17\x93\x0f\xaf\xb4\x21\x3f\xe6\x2f\x17\xe9\x8c\x83\x79\x71\xe3\x7a\xed\x4d\x6e\x5b\x70\x93\x6c\x67\x05\x36\x75\xc7\x65\xd3\x4a\xe0\x4d\xc9\x2b\xdd\x74\x5d\xd7\xbd\x29\xb7\x11\xe9\xe1\x94\x08\xb9\x16\x84\xfc\x9c\x5d\xff\xc6\x10\x97\xcd\xa8\xd8\xc9\xdd\x9e\x4d\x01\x77\x01\x7b\x84\x88\x4c\xbc\x6b\x2f\x6e\xd7\x5b\x26\x97\x0b\x63\x08\x3e\x1c\xbd\x9d\x03\xfc\xf4\xf4\xed\xe9\xf9\x99\x73\xb1\xc1\x3e\x62\x34\xc1\x4d\x6b\x56\x77\x7f\xc7\x19\x47\x0c\x90\x7c\xd8\x00\xc5\xb5\xf8\x17\x00\x00\xff\xff\x92\xd2\x69\xb9\x09\x03\x00\x00")

func messagesHeaderHeaderJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesHeaderHeaderJson,
		"messages/header/header.json",
	)
}

func messagesHeaderHeaderJson() (*asset, error) {
	bytes, err := messagesHeaderHeaderJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/header/header.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesHeaderHeader_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\xb1\xae\xc3\x20\x0c\x45\x77\xbe\x02\xf1\xde\xd8\xe0\x0e\x9d\xf8\x99\x0a\x81\x09\xa4\x0a\x54\x5c\x2a\x86\xaa\xff\x5e\x45\x81\xbd\x9b\x75\x8f\x7d\x7c\xdf\x42\x4a\x95\xbc\x32\x52\xc5\xd6\x9e\x30\x44\xbd\x77\xbd\x25\x38\x6d\x9d\x7e\x3d\xa8\x7a\x80\xe0\x22\xef\x96\x76\x06\xec\xca\x98\xc3\xfd\xcc\xf5\x86\x92\xe9\x4f\x5d\x0e\xd9\xff\x99\x4d\xa3\x21\x3a\xe8\x32\x36\x4b\x5d\xc9\x57\x1b\xda\x72\xbd\x0d\xeb\xbc\xab\x1c\x7e\xac\x11\xd9\x7a\xae\xe3\x2b\x79\x0e\x29\xa7\x96\x4a\xc6\x20\x4a\x7c\xc4\x37\x00\x00\xff\xff\x56\x8c\xd7\x1f\xd9\x00\x00\x00")

func messagesHeaderHeader_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesHeaderHeader_schemaJson,
		"messages/header/header_schema.json",
	)
}

func messagesHeaderHeader_schemaJson() (*asset, error) {
	bytes, err := messagesHeaderHeader_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/header/header_schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesMessageJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\x4b\x73\xdb\x36\x17\xdd\xfb\x57\x70\xb4\xfe\x60\x03\x7c\x53\xab\x2f\x95\x9d\x38\xad\x9d\x7a\xfc\xe8\x26\x93\x05\x08\x5c\x4a\x68\x49\x42\x05\x21\x27\x6e\xc7\xff\xbd\xc3\x97\x44\x82\x0f\xd3\xed\x4c\x26\x96\x80\x73\x81\xfb\x3c\x07\xfa\xfb\xcc\xb2\x56\x19\x14\x05\xdd\xc2\x35\x50\x0e\x6a\xb5\xb6\xca\xc5\xd3\xf2\x67\xbe\x5a\x5b\x2b\x48\x28\x23\xbe\x4b\x11\x8b\x62\x8e\x5c\x0f\x30\x0a\xa3\x88\x20\xc2\x3c\xec\x81\x9b\xb8\x1e\xb3\x57\xff\xab\x0d\x99\x54\x0a\x52\xaa\x85\xcc\x6b\x63\xd7\xc3\xc4\x75\x02\x8a\x18\x44\x1e\x72\x9d\xc0\x46\x31\x78\x0c\xd9\x41\xc0\x62\x9f\x86\xb6\x0f\x71\x6b\xdc\xdc\xba\x49\x69\x51\x94\xb6\x1b\x99\x65\x34\xe7\xc6\xf6\xe3\xcb\x1e\xca\xdd\x5b\xd0\x94\x53\x4d\x37\x0a\xa8\x86\x16\xa4\x40\x1f\x54\xfe\x81\x73\x05\xf5\x21\x85\x56\x22\xdf\x9a\x67\x88\x4c\xe4\xdb\xe2\x18\xb0\x65\xad\xf6\x87\x38\x15\xc5\x0e\xf8\xa3\xc8\xa0\xd0\x34\xdb\x97\xd6\x36\xc6\x2e\xc2\x21\xc2\xe4\x91\xe0\x35\x2e\xff\xa1\xea\xff\xe6\x40\xcb\x5a\xc1\x8f\xbd\x50\x55\xc4\x0b\x2d\x2b\xc3\xd7\xbe\x43\x0f\xf0\xe7\x01\x72\x06\x5d\x8f\x8a\xd3\xda\xca\xa7\x3c\x24\x91\xcb\x11\x27\x1c\x23\xd7\x09\x23\x44\x7d\x97\x23\x16\x38\x3c\xf0\x89\xeb\x3b\x2c\x3a\xb9\xb4\x97\x85\x28\x1d\x5a\xad\x2d\x72\x5c\xd4\x52\xd3\xb4\x5c\x19\xbb\xff\x5a\x14\x5a\xaa\x97\xd5\xda\xfa\xda\xe0\x5b\x37\x4a\x0c\x65\x3b\x91\x37\xdd\xd0\xcb\x67\x77\xbb\x93\xf3\x66\xe5\x1c\x7e\xd0\x6c\x9f\xc2\x39\x93\x59\xd7\x40\xbf\x23\x4f\x96\xf5\x5a\xfd\xfd\xd6\xf8\xfb\x0c\xaa\xa8\x23\x5b\x91\x73\xfb\xdc\x69\x0b\x0b\x4a\x49\xb5\x91\xbc\xca\xd6\xa7\xab\x2f\x57\xf7\xf7\x18\x93\xde\xee\x25\x14\x4c\x89\x7d\x93\x18\xa3\x31\xb6\x90\x83\xa2\x5a\xaa\xce\xd6\x59\x93\xa6\x36\x49\x3f\x49\xfe\x72\x9a\x11\x19\xff\x0e\x4c\x3f\x1d\x44\x95\x16\xcf\x0f\x31\x84\x80\x91\x1d\x52\x0f\xb9\xb1\x8d\x51\xe4\x86\x80\x12\x8e\x39\x0e\x83\x90\x00\x3e\xf6\x79\x6d\xf9\x28\x74\x0a\x43\x47\xea\xcd\x3b\x50\x85\xcc\xef\x65\x85\x18\x29\xc9\xbe\xda\xef\x74\x4b\x67\xb5\x75\xc9\x0e\x42\x42\xa8\xcb\x50\xc4\x62\x0f\xb9\xe0\x73\x44\xb1\x1f\x21\x8f\x91\xc8\x0e\xc3\x84\x82\x17\x76\xca\x72\xb4\xff\xcc\x21\xd7\x22\x11\x15\x21\x7c\xed\xec\x5b\xbd\xdb\x46\x2d\x7e\xa3\xe9\x61\x18\xd4\x8c\x41\x33\xcd\xa4\x87\x7b\xed\x7c\xfb\x36\xe2\xe1\xb5\xcc\xa5\x12\x89\x60\x77\x0a\x12\xf1\x63\xe2\xbe\x06\xfc\x49\x3c\x43\xfe\x85\x66\x30\xa4\x83\x1e\xee\x23\xcd\x44\xfa\xb2\x00\x78\xbc\xfd\xe1\x90\xbc\x79\xfb\x2d\x15\xe5\xd0\x35\xdf\xfe\x9f\x83\x1e\x43\xfd\xaa\xb6\x34\x17\x45\xc5\x22\x4f\xb9\xd0\x46\x61\xcb\xb6\x30\x10\xc7\x22\x87\x31\x04\x09\xf1\x11\x86\x00\x23\xd7\x27\x09\xa2\x36\x8f\x11\x8f\x78\xc0\x7c\x97\x86\x09\x09\x8c\x2a\x0c\xce\x2a\x63\x9e\xac\x59\x0f\x3d\xf0\xcb\xd8\xff\x59\x14\xac\xa2\x09\x32\x28\x7c\x17\x36\x7b\xa1\x81\x6d\x1b\x64\x16\x34\xe4\xfb\xc9\x7e\x3a\x7d\x7e\xed\x50\x92\xaa\x27\x8d\x8c\x72\x4e\x3d\x92\xb3\xf4\x51\x43\xee\xc5\x76\xa7\x7b\xaa\xa2\xaa\x95\x07\x4d\x35\x64\x90\xeb\xde\x40\x19\xae\x1e\x1b\xbd\x31\xba\x96\x29\x37\x46\x70\xd2\x22\x15\xac\x51\x8a\x13\xb8\xc7\x0c\x0d\x60\x26\xf1\x2d\xa4\x37\xfd\xd3\xc0\x02\x1e\x34\x55\xfa\xb2\x94\xde\x8a\xc5\x49\x49\xe1\x25\x8b\xe3\x71\x9d\xec\x9a\x5e\xe5\xbc\x67\x48\x6c\xe4\x90\x47\xdb\x59\x7b\xd1\xda\x8b\xfa\xf4\x7f\xaa\xd8\x29\x5c\xca\x58\x5d\xed\x89\x68\xeb\xfd\xb1\xce\x69\xb6\xba\x05\x19\x74\xcc\xf1\xbe\x9e\x50\x36\x4d\x50\xbb\x3d\xc2\xc8\x9c\x6a\x38\xb2\x9f\x8d\xb1\x8d\x08\x46\xd8\xee\x88\x9a\xd7\x4f\x47\x65\x61\xd0\xdf\x58\xdf\xfd\x02\x2f\xdf\xa5\xe2\xdd\x70\x7b\x2e\xf7\xd1\x1b\xaa\x61\xdb\x57\xf2\x19\xf4\x3d\x14\xf2\xa0\x18\xf4\x53\xd5\x6c\xb6\xd1\xf4\x57\x47\xd5\xa1\x93\x07\xb1\x40\x0b\x3a\xa0\x05\x09\xb8\x2f\x1f\x94\xc0\x97\x5f\x6c\xca\xe2\x12\x97\xe6\x9c\x32\xa8\xa2\x79\xdf\x2e\xf0\xbc\x4b\xeb\xd3\x5a\x3e\x43\xb0\x0b\xc8\x75\x29\xb1\xbe\x49\xaa\x4b\x09\xf5\x9d\xb4\x79\xa7\xa0\x00\xf5\x5c\x9d\x7a\xf5\xdc\xe7\xc0\xee\x83\xc6\x84\xcd\x74\xcf\x00\x3b\x0c\x67\x88\xb9\x04\xdd\x48\x71\x3f\xa0\x31\x9f\x3f\x8a\xa9\x5a\x25\x22\x85\x56\x7a\x81\x78\x98\xb9\x34\x46\xd8\x29\xa5\x17\x3c\x8a\xc2\xc0\xb6\x51\x90\xc4\x8e\xe3\x47\x71\x80\x7b\xd2\x5b\xd9\xbe\xc1\xae\x15\x66\xb2\x88\xd5\xee\x83\xf8\xcb\x8c\xb5\x5c\xbe\xa1\x31\xa4\xd3\x56\x25\x6f\xd5\x3f\x94\xf8\x62\x7e\x2a\xed\x06\x8a\x66\xbd\xa5\x6a\xd6\x50\xa7\xac\xc1\x33\x6e\x52\xe1\x16\x59\x8f\xa9\x9d\x35\xf6\x3a\x7d\x5b\xf5\xac\xf7\x28\x9f\xf5\xdf\xd4\xcf\xfa\xd7\x0a\x68\xcd\xbe\x89\x47\xd4\x70\x34\x1b\xd3\xaa\x68\x2d\x54\xc6\x81\x1f\xa3\xa4\x50\xf6\xcd\x66\x07\xec\x8f\xe2\x90\x19\x5e\x19\x8f\x5a\xd6\xa0\xda\x89\xe2\x89\xed\xc4\xae\x1f\x23\x3f\xf6\x5d\xe4\x52\x17\xa3\xd0\xb5\x13\xe4\x51\xee\xf8\x4e\x1c\xfb\x40\x88\xf9\x3c\x6d\xcf\x18\x8f\xeb\xb8\x6d\xd2\xc9\xe8\x8b\xf0\x9b\x11\xc5\x47\xa9\x32\xda\xb2\xcb\xc4\x64\x6d\x64\xd6\xfe\xdc\xbe\x81\xe7\xb9\x19\xbc\xa6\xc5\xad\xc8\x5a\xad\xd5\xea\x00\x23\x43\x7a\x2b\x79\xd9\x82\xdc\x48\xdc\xcc\xc4\x4e\x7a\x7f\x57\x67\xb5\x77\x8c\x19\xbd\x69\xf3\x54\x8c\x91\xcb\x1c\x87\x8f\x94\xf5\x1d\x5c\x3e\x8e\x9f\xa8\xe5\x62\x4e\x9f\xaf\xea\xd3\x3e\x95\x94\x97\x8d\x7e\x28\x46\x82\x7d\xd0\x52\xd1\x2d\x4c\xee\xdf\xd0\x42\x5f\xca\xef\x79\x79\xc8\x3b\xd9\xf4\x11\xd8\x2e\x17\x8c\xa6\x1f\xb4\x56\x22\x3e\x68\x30\xc7\xf6\xcd\x02\x35\xde\xdd\x48\xd6\xbe\x17\x56\x3b\xad\xf7\xc5\xfa\xe2\x42\x4b\x99\x16\xe7\x02\x74\x72\x2e\xd5\xf6\x62\xa7\xb3\xf4\x42\x25\xcc\x89\x42\x7f\x20\x22\xf5\x29\x77\x29\xd5\x89\x54\x99\xc9\xef\x45\x7f\xbb\x1d\xcf\xc4\x8e\x9c\xc8\xc3\x04\xd9\xb1\xcd\x4b\xc1\x63\x28\x22\x51\x80\x30\xa7\xd4\x0b\x18\x8b\x7d\xbb\x3f\x9e\xe6\x41\x73\xcf\x13\x03\x3a\xfa\x42\x31\x30\x1b\x59\xcc\x3e\xe0\x1b\x69\x3f\x2b\x3f\xbd\x9e\xfd\x13\x00\x00\xff\xff\xb4\x56\x9a\x75\xf0\x14\x00\x00")

func messagesMessageJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesMessageJson,
		"messages/message.json",
	)
}

func messagesMessageJson() (*asset, error) {
	bytes, err := messagesMessageJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/message.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesMessage_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x31\x4f\xc3\x30\x10\x85\x77\xff\x0a\xcb\x30\xb6\x39\x06\xa6\x8c\x4c\x8c\xec\x08\x55\x87\x7d\x69\x1c\xda\x38\xdc\xb9\x8a\x2a\xd4\xff\x8e\x1c\x5f\x11\x48\x19\x50\x37\xeb\x9d\xdf\xfb\xee\xd9\x5f\xc6\x5a\x17\x83\x6b\xad\xeb\x73\x9e\xa4\x05\x98\xe7\xb9\x19\xa2\xf8\x06\x7d\x73\xfa\x00\x0e\x22\x20\xbe\xa7\x23\xc2\x91\x44\x70\x4f\x72\x3d\xec\xaa\xde\x0c\x92\x46\xb8\x73\x9b\x12\x76\x5f\xb5\x6b\x62\x0b\x50\xa6\x5b\xbd\x99\x78\x0f\x81\xb1\xcb\xdb\x87\x47\x4d\x55\x5f\x3e\x4f\x54\x4c\xe9\x7d\x20\x9f\xab\x36\x71\x9a\x88\x73\x24\x71\xad\x2d\xab\x5a\xeb\x14\xfd\x4c\x18\x88\x7f\xe4\x02\x66\xea\xfe\xd9\xa3\x5f\xcc\xba\x36\x04\xea\xe2\x18\x73\x4c\xa3\xe8\xc4\x2d\x99\x97\xcd\x1f\xe2\x53\x0a\xe7\x1b\x79\x4c\x42\xc8\xbe\xdf\xd5\x72\x6b\x60\xad\x5d\xc1\x46\xe1\x8e\xe9\xf3\x14\x99\xca\xff\xbc\xae\xd5\x5f\xd9\xd0\x58\xfb\xb6\x78\x31\x84\x25\x1b\x0f\x2f\xbf\x9f\xb1\xc3\x83\x90\xb9\x98\xef\x00\x00\x00\xff\xff\xb2\x7e\x5f\xfb\xfa\x01\x00\x00")

func messagesMessage_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesMessage_schemaJson,
		"messages/message_schema.json",
	)
}

func messagesMessage_schemaJson() (*asset, error) {
	bytes, err := messagesMessage_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/message_schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schemas/enumeration.json":                           schemasEnumerationJson,
	"schemas/header.json":                                schemasHeaderJson,
	"schemas/intellectual_asset.json":                    schemasIntellectual_assetJson,
	"schemas/material_asset.json":                        schemasMaterial_assetJson,
	"schemas/research_object.json":                       schemasResearch_objectJson,
	"schemas/types.json":                                 schemasTypesJson,
	"messages/body/metadata/create/README.md":            messagesBodyMetadataCreateReadmeMd,
	"messages/body/metadata/create/request.json":         messagesBodyMetadataCreateRequestJson,
	"messages/body/metadata/create/request_schema.json":  messagesBodyMetadataCreateRequest_schemaJson,
	"messages/body/metadata/delete/README.md":            messagesBodyMetadataDeleteReadmeMd,
	"messages/body/metadata/delete/request.json":         messagesBodyMetadataDeleteRequestJson,
	"messages/body/metadata/delete/request_schema.json":  messagesBodyMetadataDeleteRequest_schemaJson,
	"messages/body/metadata/read/README.md":              messagesBodyMetadataReadReadmeMd,
	"messages/body/metadata/read/request.json":           messagesBodyMetadataReadRequestJson,
	"messages/body/metadata/read/request_schema.json":    messagesBodyMetadataReadRequest_schemaJson,
	"messages/body/metadata/read/response.json":          messagesBodyMetadataReadResponseJson,
	"messages/body/metadata/read/response_schema.json":   messagesBodyMetadataReadResponse_schemaJson,
	"messages/body/metadata/update/README.md":            messagesBodyMetadataUpdateReadmeMd,
	"messages/body/metadata/update/request.json":         messagesBodyMetadataUpdateRequestJson,
	"messages/body/metadata/update/request_schema.json":  messagesBodyMetadataUpdateRequest_schemaJson,
	"messages/body/vocabulary/patch/README.md":           messagesBodyVocabularyPatchReadmeMd,
	"messages/body/vocabulary/patch/request.json":        messagesBodyVocabularyPatchRequestJson,
	"messages/body/vocabulary/patch/request_schema.json": messagesBodyVocabularyPatchRequest_schemaJson,
	"messages/body/vocabulary/read/README.md":            messagesBodyVocabularyReadReadmeMd,
	"messages/body/vocabulary/read/request.json":         messagesBodyVocabularyReadRequestJson,
	"messages/body/vocabulary/read/request_schema.json":  messagesBodyVocabularyReadRequest_schemaJson,
	"messages/body/vocabulary/read/response.json":        messagesBodyVocabularyReadResponseJson,
	"messages/body/vocabulary/read/response_schema.json": messagesBodyVocabularyReadResponse_schemaJson,
	"messages/header/header.json":                        messagesHeaderHeaderJson,
	"messages/header/header_schema.json":                 messagesHeaderHeader_schemaJson,
	"messages/message.json":                              messagesMessageJson,
	"messages/message_schema.json":                       messagesMessage_schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"messages": &bintree{nil, map[string]*bintree{
		"body": &bintree{nil, map[string]*bintree{
			"metadata": &bintree{nil, map[string]*bintree{
				"create": &bintree{nil, map[string]*bintree{
					"README.md":           &bintree{messagesBodyMetadataCreateReadmeMd, map[string]*bintree{}},
					"request.json":        &bintree{messagesBodyMetadataCreateRequestJson, map[string]*bintree{}},
					"request_schema.json": &bintree{messagesBodyMetadataCreateRequest_schemaJson, map[string]*bintree{}},
				}},
				"delete": &bintree{nil, map[string]*bintree{
					"README.md":           &bintree{messagesBodyMetadataDeleteReadmeMd, map[string]*bintree{}},
					"request.json":        &bintree{messagesBodyMetadataDeleteRequestJson, map[string]*bintree{}},
					"request_schema.json": &bintree{messagesBodyMetadataDeleteRequest_schemaJson, map[string]*bintree{}},
				}},
				"read": &bintree{nil, map[string]*bintree{
					"README.md":            &bintree{messagesBodyMetadataReadReadmeMd, map[string]*bintree{}},
					"request.json":         &bintree{messagesBodyMetadataReadRequestJson, map[string]*bintree{}},
					"request_schema.json":  &bintree{messagesBodyMetadataReadRequest_schemaJson, map[string]*bintree{}},
					"response.json":        &bintree{messagesBodyMetadataReadResponseJson, map[string]*bintree{}},
					"response_schema.json": &bintree{messagesBodyMetadataReadResponse_schemaJson, map[string]*bintree{}},
				}},
				"update": &bintree{nil, map[string]*bintree{
					"README.md":           &bintree{messagesBodyMetadataUpdateReadmeMd, map[string]*bintree{}},
					"request.json":        &bintree{messagesBodyMetadataUpdateRequestJson, map[string]*bintree{}},
					"request_schema.json": &bintree{messagesBodyMetadataUpdateRequest_schemaJson, map[string]*bintree{}},
				}},
			}},
			"vocabulary": &bintree{nil, map[string]*bintree{
				"patch": &bintree{nil, map[string]*bintree{
					"README.md":           &bintree{messagesBodyVocabularyPatchReadmeMd, map[string]*bintree{}},
					"request.json":        &bintree{messagesBodyVocabularyPatchRequestJson, map[string]*bintree{}},
					"request_schema.json": &bintree{messagesBodyVocabularyPatchRequest_schemaJson, map[string]*bintree{}},
				}},
				"read": &bintree{nil, map[string]*bintree{
					"README.md":            &bintree{messagesBodyVocabularyReadReadmeMd, map[string]*bintree{}},
					"request.json":         &bintree{messagesBodyVocabularyReadRequestJson, map[string]*bintree{}},
					"request_schema.json":  &bintree{messagesBodyVocabularyReadRequest_schemaJson, map[string]*bintree{}},
					"response.json":        &bintree{messagesBodyVocabularyReadResponseJson, map[string]*bintree{}},
					"response_schema.json": &bintree{messagesBodyVocabularyReadResponse_schemaJson, map[string]*bintree{}},
				}},
			}},
		}},
		"header": &bintree{nil, map[string]*bintree{
			"header.json":        &bintree{messagesHeaderHeaderJson, map[string]*bintree{}},
			"header_schema.json": &bintree{messagesHeaderHeader_schemaJson, map[string]*bintree{}},
		}},
		"message.json":        &bintree{messagesMessageJson, map[string]*bintree{}},
		"message_schema.json": &bintree{messagesMessage_schemaJson, map[string]*bintree{}},
	}},
	"schemas": &bintree{nil, map[string]*bintree{
		"enumeration.json":        &bintree{schemasEnumerationJson, map[string]*bintree{}},
		"header.json":             &bintree{schemasHeaderJson, map[string]*bintree{}},
		"intellectual_asset.json": &bintree{schemasIntellectual_assetJson, map[string]*bintree{}},
		"material_asset.json":     &bintree{schemasMaterial_assetJson, map[string]*bintree{}},
		"research_object.json":    &bintree{schemasResearch_objectJson, map[string]*bintree{}},
		"types.json":              &bintree{schemasTypesJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
