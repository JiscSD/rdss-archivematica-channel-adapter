// generated by generator.go; DO NOT EDIT

package message

import (
	"encoding/json"
	"fmt"
)

type AccessTypeEnum int

const (
	AccessTypeEnum_open AccessTypeEnum = iota
	AccessTypeEnum_safeguarded
	AccessTypeEnum_controlled
	AccessTypeEnum_restricted
	AccessTypeEnum_closed
)

func (t AccessTypeEnum) String() string {
	switch t {
	case AccessTypeEnum_open:
		return "open"
	case AccessTypeEnum_safeguarded:
		return "safeguarded"
	case AccessTypeEnum_controlled:
		return "controlled"
	case AccessTypeEnum_restricted:
		return "restricted"
	case AccessTypeEnum_closed:
		return "closed"

	default:
		return ""
	}
}

var (
	_AccessTypeEnumNameToValue = map[string]AccessTypeEnum{
		"open":        AccessTypeEnum_open,
		"safeguarded": AccessTypeEnum_safeguarded,
		"controlled":  AccessTypeEnum_controlled,
		"restricted":  AccessTypeEnum_restricted,
		"closed":      AccessTypeEnum_closed,
	}

	_AccessTypeEnumValueToName = map[AccessTypeEnum]string{
		AccessTypeEnum_open:        "open",
		AccessTypeEnum_safeguarded: "safeguarded",
		AccessTypeEnum_controlled:  "controlled",
		AccessTypeEnum_restricted:  "restricted",
		AccessTypeEnum_closed:      "closed",
	}
)

func init() {
	var v AccessTypeEnum
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_AccessTypeEnumNameToValue = map[string]AccessTypeEnum{
			interface{}(AccessTypeEnum_open).(fmt.Stringer).String():        AccessTypeEnum_open,
			interface{}(AccessTypeEnum_safeguarded).(fmt.Stringer).String(): AccessTypeEnum_safeguarded,
			interface{}(AccessTypeEnum_controlled).(fmt.Stringer).String():  AccessTypeEnum_controlled,
			interface{}(AccessTypeEnum_restricted).(fmt.Stringer).String():  AccessTypeEnum_restricted,
			interface{}(AccessTypeEnum_closed).(fmt.Stringer).String():      AccessTypeEnum_closed,
		}
	}
}

// MarshalJSON is generated so AccessTypeEnum satisfies json.Marshaler.
func (r AccessTypeEnum) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _AccessTypeEnumValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid AccessTypeEnum: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so AccessTypeEnum satisfies json.Unmarshaler.
func (r *AccessTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("AccessTypeEnum should be a string, got %s", data)
	}
	v, ok := _AccessTypeEnumNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid AccessTypeEnum %q", s)
	}
	*r = v
	return nil
}

type ChecksumTypeEnum int

const (
	ChecksumTypeEnum_md5 ChecksumTypeEnum = iota
	ChecksumTypeEnum_sha256
)

func (t ChecksumTypeEnum) String() string {
	switch t {
	case ChecksumTypeEnum_md5:
		return "md5"
	case ChecksumTypeEnum_sha256:
		return "sha256"

	default:
		return ""
	}
}

var (
	_ChecksumTypeEnumNameToValue = map[string]ChecksumTypeEnum{
		"md5":    ChecksumTypeEnum_md5,
		"sha256": ChecksumTypeEnum_sha256,
	}

	_ChecksumTypeEnumValueToName = map[ChecksumTypeEnum]string{
		ChecksumTypeEnum_md5:    "md5",
		ChecksumTypeEnum_sha256: "sha256",
	}
)

func init() {
	var v ChecksumTypeEnum
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_ChecksumTypeEnumNameToValue = map[string]ChecksumTypeEnum{
			interface{}(ChecksumTypeEnum_md5).(fmt.Stringer).String():    ChecksumTypeEnum_md5,
			interface{}(ChecksumTypeEnum_sha256).(fmt.Stringer).String(): ChecksumTypeEnum_sha256,
		}
	}
}

// MarshalJSON is generated so ChecksumTypeEnum satisfies json.Marshaler.
func (r ChecksumTypeEnum) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _ChecksumTypeEnumValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid ChecksumTypeEnum: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so ChecksumTypeEnum satisfies json.Unmarshaler.
func (r *ChecksumTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ChecksumTypeEnum should be a string, got %s", data)
	}
	v, ok := _ChecksumTypeEnumNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid ChecksumTypeEnum %q", s)
	}
	*r = v
	return nil
}

type ContainerTypeEnum int

const (
	ContainerTypeEnum_zip ContainerTypeEnum = iota
	ContainerTypeEnum_none
)

func (t ContainerTypeEnum) String() string {
	switch t {
	case ContainerTypeEnum_zip:
		return "zip"
	case ContainerTypeEnum_none:
		return "none"

	default:
		return ""
	}
}

var (
	_ContainerTypeEnumNameToValue = map[string]ContainerTypeEnum{
		"zip":  ContainerTypeEnum_zip,
		"none": ContainerTypeEnum_none,
	}

	_ContainerTypeEnumValueToName = map[ContainerTypeEnum]string{
		ContainerTypeEnum_zip:  "zip",
		ContainerTypeEnum_none: "none",
	}
)

func init() {
	var v ContainerTypeEnum
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_ContainerTypeEnumNameToValue = map[string]ContainerTypeEnum{
			interface{}(ContainerTypeEnum_zip).(fmt.Stringer).String():  ContainerTypeEnum_zip,
			interface{}(ContainerTypeEnum_none).(fmt.Stringer).String(): ContainerTypeEnum_none,
		}
	}
}

// MarshalJSON is generated so ContainerTypeEnum satisfies json.Marshaler.
func (r ContainerTypeEnum) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _ContainerTypeEnumValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid ContainerTypeEnum: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so ContainerTypeEnum satisfies json.Unmarshaler.
func (r *ContainerTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ContainerTypeEnum should be a string, got %s", data)
	}
	v, ok := _ContainerTypeEnumNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid ContainerTypeEnum %q", s)
	}
	*r = v
	return nil
}

type DateTypeEnum int

const (
	DateTypeEnum_accepted DateTypeEnum = iota
	DateTypeEnum_approved
	DateTypeEnum_available
	DateTypeEnum_awarded
	DateTypeEnum_collected
	DateTypeEnum_copyrighted
	DateTypeEnum_created
	DateTypeEnum_issued
	DateTypeEnum_modified
	DateTypeEnum_posted
	DateTypeEnum_published
)

func (t DateTypeEnum) String() string {
	switch t {
	case DateTypeEnum_accepted:
		return "accepted"
	case DateTypeEnum_approved:
		return "approved"
	case DateTypeEnum_available:
		return "available"
	case DateTypeEnum_awarded:
		return "awarded"
	case DateTypeEnum_collected:
		return "collected"
	case DateTypeEnum_copyrighted:
		return "copyrighted"
	case DateTypeEnum_created:
		return "created"
	case DateTypeEnum_issued:
		return "issued"
	case DateTypeEnum_modified:
		return "modified"
	case DateTypeEnum_posted:
		return "posted"
	case DateTypeEnum_published:
		return "published"

	default:
		return ""
	}
}

var (
	_DateTypeEnumNameToValue = map[string]DateTypeEnum{
		"accepted":    DateTypeEnum_accepted,
		"approved":    DateTypeEnum_approved,
		"available":   DateTypeEnum_available,
		"awarded":     DateTypeEnum_awarded,
		"collected":   DateTypeEnum_collected,
		"copyrighted": DateTypeEnum_copyrighted,
		"created":     DateTypeEnum_created,
		"issued":      DateTypeEnum_issued,
		"modified":    DateTypeEnum_modified,
		"posted":      DateTypeEnum_posted,
		"published":   DateTypeEnum_published,
	}

	_DateTypeEnumValueToName = map[DateTypeEnum]string{
		DateTypeEnum_accepted:    "accepted",
		DateTypeEnum_approved:    "approved",
		DateTypeEnum_available:   "available",
		DateTypeEnum_awarded:     "awarded",
		DateTypeEnum_collected:   "collected",
		DateTypeEnum_copyrighted: "copyrighted",
		DateTypeEnum_created:     "created",
		DateTypeEnum_issued:      "issued",
		DateTypeEnum_modified:    "modified",
		DateTypeEnum_posted:      "posted",
		DateTypeEnum_published:   "published",
	}
)

func init() {
	var v DateTypeEnum
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_DateTypeEnumNameToValue = map[string]DateTypeEnum{
			interface{}(DateTypeEnum_accepted).(fmt.Stringer).String():    DateTypeEnum_accepted,
			interface{}(DateTypeEnum_approved).(fmt.Stringer).String():    DateTypeEnum_approved,
			interface{}(DateTypeEnum_available).(fmt.Stringer).String():   DateTypeEnum_available,
			interface{}(DateTypeEnum_awarded).(fmt.Stringer).String():     DateTypeEnum_awarded,
			interface{}(DateTypeEnum_collected).(fmt.Stringer).String():   DateTypeEnum_collected,
			interface{}(DateTypeEnum_copyrighted).(fmt.Stringer).String(): DateTypeEnum_copyrighted,
			interface{}(DateTypeEnum_created).(fmt.Stringer).String():     DateTypeEnum_created,
			interface{}(DateTypeEnum_issued).(fmt.Stringer).String():      DateTypeEnum_issued,
			interface{}(DateTypeEnum_modified).(fmt.Stringer).String():    DateTypeEnum_modified,
			interface{}(DateTypeEnum_posted).(fmt.Stringer).String():      DateTypeEnum_posted,
			interface{}(DateTypeEnum_published).(fmt.Stringer).String():   DateTypeEnum_published,
		}
	}
}

// MarshalJSON is generated so DateTypeEnum satisfies json.Marshaler.
func (r DateTypeEnum) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _DateTypeEnumValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid DateTypeEnum: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so DateTypeEnum satisfies json.Unmarshaler.
func (r *DateTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("DateTypeEnum should be a string, got %s", data)
	}
	v, ok := _DateTypeEnumNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid DateTypeEnum %q", s)
	}
	*r = v
	return nil
}

type DescriptionTypeEnum int

const (
	DescriptionTypeEnum_abstract DescriptionTypeEnum = iota
	DescriptionTypeEnum_description
	DescriptionTypeEnum_methods
	DescriptionTypeEnum_seriesInformation
	DescriptionTypeEnum_tableOfContents
	DescriptionTypeEnum_technicalInfo
	DescriptionTypeEnum_other
)

func (t DescriptionTypeEnum) String() string {
	switch t {
	case DescriptionTypeEnum_abstract:
		return "abstract"
	case DescriptionTypeEnum_description:
		return "description"
	case DescriptionTypeEnum_methods:
		return "methods"
	case DescriptionTypeEnum_seriesInformation:
		return "seriesInformation"
	case DescriptionTypeEnum_tableOfContents:
		return "tableOfContents"
	case DescriptionTypeEnum_technicalInfo:
		return "technicalInfo"
	case DescriptionTypeEnum_other:
		return "other"

	default:
		return ""
	}
}

var (
	_DescriptionTypeEnumNameToValue = map[string]DescriptionTypeEnum{
		"abstract":          DescriptionTypeEnum_abstract,
		"description":       DescriptionTypeEnum_description,
		"methods":           DescriptionTypeEnum_methods,
		"seriesInformation": DescriptionTypeEnum_seriesInformation,
		"tableOfContents":   DescriptionTypeEnum_tableOfContents,
		"technicalInfo":     DescriptionTypeEnum_technicalInfo,
		"other":             DescriptionTypeEnum_other,
	}

	_DescriptionTypeEnumValueToName = map[DescriptionTypeEnum]string{
		DescriptionTypeEnum_abstract:          "abstract",
		DescriptionTypeEnum_description:       "description",
		DescriptionTypeEnum_methods:           "methods",
		DescriptionTypeEnum_seriesInformation: "seriesInformation",
		DescriptionTypeEnum_tableOfContents:   "tableOfContents",
		DescriptionTypeEnum_technicalInfo:     "technicalInfo",
		DescriptionTypeEnum_other:             "other",
	}
)

func init() {
	var v DescriptionTypeEnum
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_DescriptionTypeEnumNameToValue = map[string]DescriptionTypeEnum{
			interface{}(DescriptionTypeEnum_abstract).(fmt.Stringer).String():          DescriptionTypeEnum_abstract,
			interface{}(DescriptionTypeEnum_description).(fmt.Stringer).String():       DescriptionTypeEnum_description,
			interface{}(DescriptionTypeEnum_methods).(fmt.Stringer).String():           DescriptionTypeEnum_methods,
			interface{}(DescriptionTypeEnum_seriesInformation).(fmt.Stringer).String(): DescriptionTypeEnum_seriesInformation,
			interface{}(DescriptionTypeEnum_tableOfContents).(fmt.Stringer).String():   DescriptionTypeEnum_tableOfContents,
			interface{}(DescriptionTypeEnum_technicalInfo).(fmt.Stringer).String():     DescriptionTypeEnum_technicalInfo,
			interface{}(DescriptionTypeEnum_other).(fmt.Stringer).String():             DescriptionTypeEnum_other,
		}
	}
}

// MarshalJSON is generated so DescriptionTypeEnum satisfies json.Marshaler.
func (r DescriptionTypeEnum) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _DescriptionTypeEnumValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid DescriptionTypeEnum: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so DescriptionTypeEnum satisfies json.Unmarshaler.
func (r *DescriptionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("DescriptionTypeEnum should be a string, got %s", data)
	}
	v, ok := _DescriptionTypeEnumNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid DescriptionTypeEnum %q", s)
	}
	*r = v
	return nil
}

type FileUseEnum int

const (
	FileUseEnum_originalFile FileUseEnum = iota
	FileUseEnum_thumbnailImage
	FileUseEnum_extractedText
	FileUseEnum_preservationMasterFile
	FileUseEnum_intermediateFile
	FileUseEnum_serviceFile
	FileUseEnum_transcript
)

func (t FileUseEnum) String() string {
	switch t {
	case FileUseEnum_originalFile:
		return "originalFile"
	case FileUseEnum_thumbnailImage:
		return "thumbnailImage"
	case FileUseEnum_extractedText:
		return "extractedText"
	case FileUseEnum_preservationMasterFile:
		return "preservationMasterFile"
	case FileUseEnum_intermediateFile:
		return "intermediateFile"
	case FileUseEnum_serviceFile:
		return "serviceFile"
	case FileUseEnum_transcript:
		return "transcript"

	default:
		return ""
	}
}

var (
	_FileUseEnumNameToValue = map[string]FileUseEnum{
		"originalFile":           FileUseEnum_originalFile,
		"thumbnailImage":         FileUseEnum_thumbnailImage,
		"extractedText":          FileUseEnum_extractedText,
		"preservationMasterFile": FileUseEnum_preservationMasterFile,
		"intermediateFile":       FileUseEnum_intermediateFile,
		"serviceFile":            FileUseEnum_serviceFile,
		"transcript":             FileUseEnum_transcript,
	}

	_FileUseEnumValueToName = map[FileUseEnum]string{
		FileUseEnum_originalFile:           "originalFile",
		FileUseEnum_thumbnailImage:         "thumbnailImage",
		FileUseEnum_extractedText:          "extractedText",
		FileUseEnum_preservationMasterFile: "preservationMasterFile",
		FileUseEnum_intermediateFile:       "intermediateFile",
		FileUseEnum_serviceFile:            "serviceFile",
		FileUseEnum_transcript:             "transcript",
	}
)

func init() {
	var v FileUseEnum
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_FileUseEnumNameToValue = map[string]FileUseEnum{
			interface{}(FileUseEnum_originalFile).(fmt.Stringer).String():           FileUseEnum_originalFile,
			interface{}(FileUseEnum_thumbnailImage).(fmt.Stringer).String():         FileUseEnum_thumbnailImage,
			interface{}(FileUseEnum_extractedText).(fmt.Stringer).String():          FileUseEnum_extractedText,
			interface{}(FileUseEnum_preservationMasterFile).(fmt.Stringer).String(): FileUseEnum_preservationMasterFile,
			interface{}(FileUseEnum_intermediateFile).(fmt.Stringer).String():       FileUseEnum_intermediateFile,
			interface{}(FileUseEnum_serviceFile).(fmt.Stringer).String():            FileUseEnum_serviceFile,
			interface{}(FileUseEnum_transcript).(fmt.Stringer).String():             FileUseEnum_transcript,
		}
	}
}

// MarshalJSON is generated so FileUseEnum satisfies json.Marshaler.
func (r FileUseEnum) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _FileUseEnumValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid FileUseEnum: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so FileUseEnum satisfies json.Unmarshaler.
func (r *FileUseEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("FileUseEnum should be a string, got %s", data)
	}
	v, ok := _FileUseEnumNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid FileUseEnum %q", s)
	}
	*r = v
	return nil
}

type IdentifierTypeEnum int

const (
	IdentifierTypeEnum_ARK IdentifierTypeEnum = iota
	IdentifierTypeEnum_arXiv
	IdentifierTypeEnum_bibcode
	IdentifierTypeEnum_DOI
	IdentifierTypeEnum_EAN13
	IdentifierTypeEnum_EISSN
	IdentifierTypeEnum_Handle
	IdentifierTypeEnum_ISBN
	IdentifierTypeEnum_ISSN
	IdentifierTypeEnum_ISTC
	IdentifierTypeEnum_LISSN
	IdentifierTypeEnum_LSID
	IdentifierTypeEnum_PMID
	IdentifierTypeEnum_PUID
	IdentifierTypeEnum_PURL
	IdentifierTypeEnum_SourceID
	IdentifierTypeEnum_UPC
	IdentifierTypeEnum_URL
	IdentifierTypeEnum_URN
	IdentifierTypeEnum_UUID
)

func (t IdentifierTypeEnum) String() string {
	switch t {
	case IdentifierTypeEnum_ARK:
		return "ARK"
	case IdentifierTypeEnum_arXiv:
		return "arXiv"
	case IdentifierTypeEnum_bibcode:
		return "bibcode"
	case IdentifierTypeEnum_DOI:
		return "DOI"
	case IdentifierTypeEnum_EAN13:
		return "EAN13"
	case IdentifierTypeEnum_EISSN:
		return "EISSN"
	case IdentifierTypeEnum_Handle:
		return "Handle"
	case IdentifierTypeEnum_ISBN:
		return "ISBN"
	case IdentifierTypeEnum_ISSN:
		return "ISSN"
	case IdentifierTypeEnum_ISTC:
		return "ISTC"
	case IdentifierTypeEnum_LISSN:
		return "LISSN"
	case IdentifierTypeEnum_LSID:
		return "LSID"
	case IdentifierTypeEnum_PMID:
		return "PMID"
	case IdentifierTypeEnum_PUID:
		return "PUID"
	case IdentifierTypeEnum_PURL:
		return "PURL"
	case IdentifierTypeEnum_SourceID:
		return "SourceID"
	case IdentifierTypeEnum_UPC:
		return "UPC"
	case IdentifierTypeEnum_URL:
		return "URL"
	case IdentifierTypeEnum_URN:
		return "URN"
	case IdentifierTypeEnum_UUID:
		return "UUID"

	default:
		return ""
	}
}

var (
	_IdentifierTypeEnumNameToValue = map[string]IdentifierTypeEnum{
		"ARK":      IdentifierTypeEnum_ARK,
		"arXiv":    IdentifierTypeEnum_arXiv,
		"bibcode":  IdentifierTypeEnum_bibcode,
		"DOI":      IdentifierTypeEnum_DOI,
		"EAN13":    IdentifierTypeEnum_EAN13,
		"EISSN":    IdentifierTypeEnum_EISSN,
		"Handle":   IdentifierTypeEnum_Handle,
		"ISBN":     IdentifierTypeEnum_ISBN,
		"ISSN":     IdentifierTypeEnum_ISSN,
		"ISTC":     IdentifierTypeEnum_ISTC,
		"LISSN":    IdentifierTypeEnum_LISSN,
		"LSID":     IdentifierTypeEnum_LSID,
		"PMID":     IdentifierTypeEnum_PMID,
		"PUID":     IdentifierTypeEnum_PUID,
		"PURL":     IdentifierTypeEnum_PURL,
		"SourceID": IdentifierTypeEnum_SourceID,
		"UPC":      IdentifierTypeEnum_UPC,
		"URL":      IdentifierTypeEnum_URL,
		"URN":      IdentifierTypeEnum_URN,
		"UUID":     IdentifierTypeEnum_UUID,
	}

	_IdentifierTypeEnumValueToName = map[IdentifierTypeEnum]string{
		IdentifierTypeEnum_ARK:      "ARK",
		IdentifierTypeEnum_arXiv:    "arXiv",
		IdentifierTypeEnum_bibcode:  "bibcode",
		IdentifierTypeEnum_DOI:      "DOI",
		IdentifierTypeEnum_EAN13:    "EAN13",
		IdentifierTypeEnum_EISSN:    "EISSN",
		IdentifierTypeEnum_Handle:   "Handle",
		IdentifierTypeEnum_ISBN:     "ISBN",
		IdentifierTypeEnum_ISSN:     "ISSN",
		IdentifierTypeEnum_ISTC:     "ISTC",
		IdentifierTypeEnum_LISSN:    "LISSN",
		IdentifierTypeEnum_LSID:     "LSID",
		IdentifierTypeEnum_PMID:     "PMID",
		IdentifierTypeEnum_PUID:     "PUID",
		IdentifierTypeEnum_PURL:     "PURL",
		IdentifierTypeEnum_SourceID: "SourceID",
		IdentifierTypeEnum_UPC:      "UPC",
		IdentifierTypeEnum_URL:      "URL",
		IdentifierTypeEnum_URN:      "URN",
		IdentifierTypeEnum_UUID:     "UUID",
	}
)

func init() {
	var v IdentifierTypeEnum
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_IdentifierTypeEnumNameToValue = map[string]IdentifierTypeEnum{
			interface{}(IdentifierTypeEnum_ARK).(fmt.Stringer).String():      IdentifierTypeEnum_ARK,
			interface{}(IdentifierTypeEnum_arXiv).(fmt.Stringer).String():    IdentifierTypeEnum_arXiv,
			interface{}(IdentifierTypeEnum_bibcode).(fmt.Stringer).String():  IdentifierTypeEnum_bibcode,
			interface{}(IdentifierTypeEnum_DOI).(fmt.Stringer).String():      IdentifierTypeEnum_DOI,
			interface{}(IdentifierTypeEnum_EAN13).(fmt.Stringer).String():    IdentifierTypeEnum_EAN13,
			interface{}(IdentifierTypeEnum_EISSN).(fmt.Stringer).String():    IdentifierTypeEnum_EISSN,
			interface{}(IdentifierTypeEnum_Handle).(fmt.Stringer).String():   IdentifierTypeEnum_Handle,
			interface{}(IdentifierTypeEnum_ISBN).(fmt.Stringer).String():     IdentifierTypeEnum_ISBN,
			interface{}(IdentifierTypeEnum_ISSN).(fmt.Stringer).String():     IdentifierTypeEnum_ISSN,
			interface{}(IdentifierTypeEnum_ISTC).(fmt.Stringer).String():     IdentifierTypeEnum_ISTC,
			interface{}(IdentifierTypeEnum_LISSN).(fmt.Stringer).String():    IdentifierTypeEnum_LISSN,
			interface{}(IdentifierTypeEnum_LSID).(fmt.Stringer).String():     IdentifierTypeEnum_LSID,
			interface{}(IdentifierTypeEnum_PMID).(fmt.Stringer).String():     IdentifierTypeEnum_PMID,
			interface{}(IdentifierTypeEnum_PUID).(fmt.Stringer).String():     IdentifierTypeEnum_PUID,
			interface{}(IdentifierTypeEnum_PURL).(fmt.Stringer).String():     IdentifierTypeEnum_PURL,
			interface{}(IdentifierTypeEnum_SourceID).(fmt.Stringer).String(): IdentifierTypeEnum_SourceID,
			interface{}(IdentifierTypeEnum_UPC).(fmt.Stringer).String():      IdentifierTypeEnum_UPC,
			interface{}(IdentifierTypeEnum_URL).(fmt.Stringer).String():      IdentifierTypeEnum_URL,
			interface{}(IdentifierTypeEnum_URN).(fmt.Stringer).String():      IdentifierTypeEnum_URN,
			interface{}(IdentifierTypeEnum_UUID).(fmt.Stringer).String():     IdentifierTypeEnum_UUID,
		}
	}
}

// MarshalJSON is generated so IdentifierTypeEnum satisfies json.Marshaler.
func (r IdentifierTypeEnum) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _IdentifierTypeEnumValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid IdentifierTypeEnum: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so IdentifierTypeEnum satisfies json.Unmarshaler.
func (r *IdentifierTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("IdentifierTypeEnum should be a string, got %s", data)
	}
	v, ok := _IdentifierTypeEnumNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid IdentifierTypeEnum %q", s)
	}
	*r = v
	return nil
}

type MessageClassEnum int

const (
	MessageClassEnum_Command MessageClassEnum = iota
	MessageClassEnum_Event
	MessageClassEnum_Document
)

func (t MessageClassEnum) String() string {
	switch t {
	case MessageClassEnum_Command:
		return "Command"
	case MessageClassEnum_Event:
		return "Event"
	case MessageClassEnum_Document:
		return "Document"

	default:
		return ""
	}
}

var (
	_MessageClassEnumNameToValue = map[string]MessageClassEnum{
		"Command":  MessageClassEnum_Command,
		"Event":    MessageClassEnum_Event,
		"Document": MessageClassEnum_Document,
	}

	_MessageClassEnumValueToName = map[MessageClassEnum]string{
		MessageClassEnum_Command:  "Command",
		MessageClassEnum_Event:    "Event",
		MessageClassEnum_Document: "Document",
	}
)

func init() {
	var v MessageClassEnum
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_MessageClassEnumNameToValue = map[string]MessageClassEnum{
			interface{}(MessageClassEnum_Command).(fmt.Stringer).String():  MessageClassEnum_Command,
			interface{}(MessageClassEnum_Event).(fmt.Stringer).String():    MessageClassEnum_Event,
			interface{}(MessageClassEnum_Document).(fmt.Stringer).String(): MessageClassEnum_Document,
		}
	}
}

// MarshalJSON is generated so MessageClassEnum satisfies json.Marshaler.
func (r MessageClassEnum) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _MessageClassEnumValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid MessageClassEnum: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so MessageClassEnum satisfies json.Unmarshaler.
func (r *MessageClassEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MessageClassEnum should be a string, got %s", data)
	}
	v, ok := _MessageClassEnumNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid MessageClassEnum %q", s)
	}
	*r = v
	return nil
}

type MessageTypeEnum int

const (
	MessageTypeEnum_MetadataCreate MessageTypeEnum = iota
	MessageTypeEnum_MetadataUpdate
	MessageTypeEnum_MetadataDelete
	MessageTypeEnum_MetadataRead
	MessageTypeEnum_PreservationEvent
)

func (t MessageTypeEnum) String() string {
	switch t {
	case MessageTypeEnum_MetadataCreate:
		return "MetadataCreate"
	case MessageTypeEnum_MetadataUpdate:
		return "MetadataUpdate"
	case MessageTypeEnum_MetadataDelete:
		return "MetadataDelete"
	case MessageTypeEnum_MetadataRead:
		return "MetadataRead"
	case MessageTypeEnum_PreservationEvent:
		return "PreservationEvent"

	default:
		return ""
	}
}

var (
	_MessageTypeEnumNameToValue = map[string]MessageTypeEnum{
		"MetadataCreate":    MessageTypeEnum_MetadataCreate,
		"MetadataUpdate":    MessageTypeEnum_MetadataUpdate,
		"MetadataDelete":    MessageTypeEnum_MetadataDelete,
		"MetadataRead":      MessageTypeEnum_MetadataRead,
		"PreservationEvent": MessageTypeEnum_PreservationEvent,
	}

	_MessageTypeEnumValueToName = map[MessageTypeEnum]string{
		MessageTypeEnum_MetadataCreate:    "MetadataCreate",
		MessageTypeEnum_MetadataUpdate:    "MetadataUpdate",
		MessageTypeEnum_MetadataDelete:    "MetadataDelete",
		MessageTypeEnum_MetadataRead:      "MetadataRead",
		MessageTypeEnum_PreservationEvent: "PreservationEvent",
	}
)

func init() {
	var v MessageTypeEnum
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_MessageTypeEnumNameToValue = map[string]MessageTypeEnum{
			interface{}(MessageTypeEnum_MetadataCreate).(fmt.Stringer).String():    MessageTypeEnum_MetadataCreate,
			interface{}(MessageTypeEnum_MetadataUpdate).(fmt.Stringer).String():    MessageTypeEnum_MetadataUpdate,
			interface{}(MessageTypeEnum_MetadataDelete).(fmt.Stringer).String():    MessageTypeEnum_MetadataDelete,
			interface{}(MessageTypeEnum_MetadataRead).(fmt.Stringer).String():      MessageTypeEnum_MetadataRead,
			interface{}(MessageTypeEnum_PreservationEvent).(fmt.Stringer).String(): MessageTypeEnum_PreservationEvent,
		}
	}
}

// MarshalJSON is generated so MessageTypeEnum satisfies json.Marshaler.
func (r MessageTypeEnum) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _MessageTypeEnumValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid MessageTypeEnum: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so MessageTypeEnum satisfies json.Unmarshaler.
func (r *MessageTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MessageTypeEnum should be a string, got %s", data)
	}
	v, ok := _MessageTypeEnumNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid MessageTypeEnum %q", s)
	}
	*r = v
	return nil
}

type ObjectValueEnum int

const (
	ObjectValueEnum_normal ObjectValueEnum = iota
	ObjectValueEnum_high
	ObjectValueEnum_veryHigh
)

func (t ObjectValueEnum) String() string {
	switch t {
	case ObjectValueEnum_normal:
		return "normal"
	case ObjectValueEnum_high:
		return "high"
	case ObjectValueEnum_veryHigh:
		return "veryHigh"

	default:
		return ""
	}
}

var (
	_ObjectValueEnumNameToValue = map[string]ObjectValueEnum{
		"normal":   ObjectValueEnum_normal,
		"high":     ObjectValueEnum_high,
		"veryHigh": ObjectValueEnum_veryHigh,
	}

	_ObjectValueEnumValueToName = map[ObjectValueEnum]string{
		ObjectValueEnum_normal:   "normal",
		ObjectValueEnum_high:     "high",
		ObjectValueEnum_veryHigh: "veryHigh",
	}
)

func init() {
	var v ObjectValueEnum
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_ObjectValueEnumNameToValue = map[string]ObjectValueEnum{
			interface{}(ObjectValueEnum_normal).(fmt.Stringer).String():   ObjectValueEnum_normal,
			interface{}(ObjectValueEnum_high).(fmt.Stringer).String():     ObjectValueEnum_high,
			interface{}(ObjectValueEnum_veryHigh).(fmt.Stringer).String(): ObjectValueEnum_veryHigh,
		}
	}
}

// MarshalJSON is generated so ObjectValueEnum satisfies json.Marshaler.
func (r ObjectValueEnum) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _ObjectValueEnumValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid ObjectValueEnum: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so ObjectValueEnum satisfies json.Unmarshaler.
func (r *ObjectValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ObjectValueEnum should be a string, got %s", data)
	}
	v, ok := _ObjectValueEnumNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid ObjectValueEnum %q", s)
	}
	*r = v
	return nil
}

type OrganisationRoleEnum int

const (
	OrganisationRoleEnum_advocacy OrganisationRoleEnum = iota
	OrganisationRoleEnum_author
	OrganisationRoleEnum_awardingInstitution
	OrganisationRoleEnum_distributor
	OrganisationRoleEnum_funder
	OrganisationRoleEnum_hostingInstitution
	OrganisationRoleEnum_publisher
	OrganisationRoleEnum_registrationAgency
	OrganisationRoleEnum_registrationAuthority
	OrganisationRoleEnum_rightsHolder
	OrganisationRoleEnum_sponsor
)

func (t OrganisationRoleEnum) String() string {
	switch t {
	case OrganisationRoleEnum_advocacy:
		return "advocacy"
	case OrganisationRoleEnum_author:
		return "author"
	case OrganisationRoleEnum_awardingInstitution:
		return "awardingInstitution"
	case OrganisationRoleEnum_distributor:
		return "distributor"
	case OrganisationRoleEnum_funder:
		return "funder"
	case OrganisationRoleEnum_hostingInstitution:
		return "hostingInstitution"
	case OrganisationRoleEnum_publisher:
		return "publisher"
	case OrganisationRoleEnum_registrationAgency:
		return "registrationAgency"
	case OrganisationRoleEnum_registrationAuthority:
		return "registrationAuthority"
	case OrganisationRoleEnum_rightsHolder:
		return "rightsHolder"
	case OrganisationRoleEnum_sponsor:
		return "sponsor"

	default:
		return ""
	}
}

var (
	_OrganisationRoleEnumNameToValue = map[string]OrganisationRoleEnum{
		"advocacy":              OrganisationRoleEnum_advocacy,
		"author":                OrganisationRoleEnum_author,
		"awardingInstitution":   OrganisationRoleEnum_awardingInstitution,
		"distributor":           OrganisationRoleEnum_distributor,
		"funder":                OrganisationRoleEnum_funder,
		"hostingInstitution":    OrganisationRoleEnum_hostingInstitution,
		"publisher":             OrganisationRoleEnum_publisher,
		"registrationAgency":    OrganisationRoleEnum_registrationAgency,
		"registrationAuthority": OrganisationRoleEnum_registrationAuthority,
		"rightsHolder":          OrganisationRoleEnum_rightsHolder,
		"sponsor":               OrganisationRoleEnum_sponsor,
	}

	_OrganisationRoleEnumValueToName = map[OrganisationRoleEnum]string{
		OrganisationRoleEnum_advocacy:              "advocacy",
		OrganisationRoleEnum_author:                "author",
		OrganisationRoleEnum_awardingInstitution:   "awardingInstitution",
		OrganisationRoleEnum_distributor:           "distributor",
		OrganisationRoleEnum_funder:                "funder",
		OrganisationRoleEnum_hostingInstitution:    "hostingInstitution",
		OrganisationRoleEnum_publisher:             "publisher",
		OrganisationRoleEnum_registrationAgency:    "registrationAgency",
		OrganisationRoleEnum_registrationAuthority: "registrationAuthority",
		OrganisationRoleEnum_rightsHolder:          "rightsHolder",
		OrganisationRoleEnum_sponsor:               "sponsor",
	}
)

func init() {
	var v OrganisationRoleEnum
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_OrganisationRoleEnumNameToValue = map[string]OrganisationRoleEnum{
			interface{}(OrganisationRoleEnum_advocacy).(fmt.Stringer).String():              OrganisationRoleEnum_advocacy,
			interface{}(OrganisationRoleEnum_author).(fmt.Stringer).String():                OrganisationRoleEnum_author,
			interface{}(OrganisationRoleEnum_awardingInstitution).(fmt.Stringer).String():   OrganisationRoleEnum_awardingInstitution,
			interface{}(OrganisationRoleEnum_distributor).(fmt.Stringer).String():           OrganisationRoleEnum_distributor,
			interface{}(OrganisationRoleEnum_funder).(fmt.Stringer).String():                OrganisationRoleEnum_funder,
			interface{}(OrganisationRoleEnum_hostingInstitution).(fmt.Stringer).String():    OrganisationRoleEnum_hostingInstitution,
			interface{}(OrganisationRoleEnum_publisher).(fmt.Stringer).String():             OrganisationRoleEnum_publisher,
			interface{}(OrganisationRoleEnum_registrationAgency).(fmt.Stringer).String():    OrganisationRoleEnum_registrationAgency,
			interface{}(OrganisationRoleEnum_registrationAuthority).(fmt.Stringer).String(): OrganisationRoleEnum_registrationAuthority,
			interface{}(OrganisationRoleEnum_rightsHolder).(fmt.Stringer).String():          OrganisationRoleEnum_rightsHolder,
			interface{}(OrganisationRoleEnum_sponsor).(fmt.Stringer).String():               OrganisationRoleEnum_sponsor,
		}
	}
}

// MarshalJSON is generated so OrganisationRoleEnum satisfies json.Marshaler.
func (r OrganisationRoleEnum) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _OrganisationRoleEnumValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid OrganisationRoleEnum: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so OrganisationRoleEnum satisfies json.Unmarshaler.
func (r *OrganisationRoleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("OrganisationRoleEnum should be a string, got %s", data)
	}
	v, ok := _OrganisationRoleEnumNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid OrganisationRoleEnum %q", s)
	}
	*r = v
	return nil
}

type OrganisationTypeEnum int

const (
	OrganisationTypeEnum_billing OrganisationTypeEnum = iota
	OrganisationTypeEnum_charity
	OrganisationTypeEnum_commercial
	OrganisationTypeEnum_display
	OrganisationTypeEnum_funder
	OrganisationTypeEnum_furtherEducation
	OrganisationTypeEnum_government
	OrganisationTypeEnum_health
	OrganisationTypeEnum_heritage
	OrganisationTypeEnum_higherEducation
	OrganisationTypeEnum_other
	OrganisationTypeEnum_professionalBody
	OrganisationTypeEnum_research
	OrganisationTypeEnum_school
	OrganisationTypeEnum_skills
)

func (t OrganisationTypeEnum) String() string {
	switch t {
	case OrganisationTypeEnum_billing:
		return "billing"
	case OrganisationTypeEnum_charity:
		return "charity"
	case OrganisationTypeEnum_commercial:
		return "commercial"
	case OrganisationTypeEnum_display:
		return "display"
	case OrganisationTypeEnum_funder:
		return "funder"
	case OrganisationTypeEnum_furtherEducation:
		return "furtherEducation"
	case OrganisationTypeEnum_government:
		return "government"
	case OrganisationTypeEnum_health:
		return "health"
	case OrganisationTypeEnum_heritage:
		return "heritage"
	case OrganisationTypeEnum_higherEducation:
		return "higherEducation"
	case OrganisationTypeEnum_other:
		return "other"
	case OrganisationTypeEnum_professionalBody:
		return "professionalBody"
	case OrganisationTypeEnum_research:
		return "research"
	case OrganisationTypeEnum_school:
		return "school"
	case OrganisationTypeEnum_skills:
		return "skills"

	default:
		return ""
	}
}

var (
	_OrganisationTypeEnumNameToValue = map[string]OrganisationTypeEnum{
		"billing":          OrganisationTypeEnum_billing,
		"charity":          OrganisationTypeEnum_charity,
		"commercial":       OrganisationTypeEnum_commercial,
		"display":          OrganisationTypeEnum_display,
		"funder":           OrganisationTypeEnum_funder,
		"furtherEducation": OrganisationTypeEnum_furtherEducation,
		"government":       OrganisationTypeEnum_government,
		"health":           OrganisationTypeEnum_health,
		"heritage":         OrganisationTypeEnum_heritage,
		"higherEducation":  OrganisationTypeEnum_higherEducation,
		"other":            OrganisationTypeEnum_other,
		"professionalBody": OrganisationTypeEnum_professionalBody,
		"research":         OrganisationTypeEnum_research,
		"school":           OrganisationTypeEnum_school,
		"skills":           OrganisationTypeEnum_skills,
	}

	_OrganisationTypeEnumValueToName = map[OrganisationTypeEnum]string{
		OrganisationTypeEnum_billing:          "billing",
		OrganisationTypeEnum_charity:          "charity",
		OrganisationTypeEnum_commercial:       "commercial",
		OrganisationTypeEnum_display:          "display",
		OrganisationTypeEnum_funder:           "funder",
		OrganisationTypeEnum_furtherEducation: "furtherEducation",
		OrganisationTypeEnum_government:       "government",
		OrganisationTypeEnum_health:           "health",
		OrganisationTypeEnum_heritage:         "heritage",
		OrganisationTypeEnum_higherEducation:  "higherEducation",
		OrganisationTypeEnum_other:            "other",
		OrganisationTypeEnum_professionalBody: "professionalBody",
		OrganisationTypeEnum_research:         "research",
		OrganisationTypeEnum_school:           "school",
		OrganisationTypeEnum_skills:           "skills",
	}
)

func init() {
	var v OrganisationTypeEnum
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_OrganisationTypeEnumNameToValue = map[string]OrganisationTypeEnum{
			interface{}(OrganisationTypeEnum_billing).(fmt.Stringer).String():          OrganisationTypeEnum_billing,
			interface{}(OrganisationTypeEnum_charity).(fmt.Stringer).String():          OrganisationTypeEnum_charity,
			interface{}(OrganisationTypeEnum_commercial).(fmt.Stringer).String():       OrganisationTypeEnum_commercial,
			interface{}(OrganisationTypeEnum_display).(fmt.Stringer).String():          OrganisationTypeEnum_display,
			interface{}(OrganisationTypeEnum_funder).(fmt.Stringer).String():           OrganisationTypeEnum_funder,
			interface{}(OrganisationTypeEnum_furtherEducation).(fmt.Stringer).String(): OrganisationTypeEnum_furtherEducation,
			interface{}(OrganisationTypeEnum_government).(fmt.Stringer).String():       OrganisationTypeEnum_government,
			interface{}(OrganisationTypeEnum_health).(fmt.Stringer).String():           OrganisationTypeEnum_health,
			interface{}(OrganisationTypeEnum_heritage).(fmt.Stringer).String():         OrganisationTypeEnum_heritage,
			interface{}(OrganisationTypeEnum_higherEducation).(fmt.Stringer).String():  OrganisationTypeEnum_higherEducation,
			interface{}(OrganisationTypeEnum_other).(fmt.Stringer).String():            OrganisationTypeEnum_other,
			interface{}(OrganisationTypeEnum_professionalBody).(fmt.Stringer).String(): OrganisationTypeEnum_professionalBody,
			interface{}(OrganisationTypeEnum_research).(fmt.Stringer).String():         OrganisationTypeEnum_research,
			interface{}(OrganisationTypeEnum_school).(fmt.Stringer).String():           OrganisationTypeEnum_school,
			interface{}(OrganisationTypeEnum_skills).(fmt.Stringer).String():           OrganisationTypeEnum_skills,
		}
	}
}

// MarshalJSON is generated so OrganisationTypeEnum satisfies json.Marshaler.
func (r OrganisationTypeEnum) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _OrganisationTypeEnumValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid OrganisationTypeEnum: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so OrganisationTypeEnum satisfies json.Unmarshaler.
func (r *OrganisationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("OrganisationTypeEnum should be a string, got %s", data)
	}
	v, ok := _OrganisationTypeEnumNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid OrganisationTypeEnum %q", s)
	}
	*r = v
	return nil
}

type PackageTypeEnum int

const (
	PackageTypeEnum_AIP PackageTypeEnum = iota
	PackageTypeEnum_DIP
	PackageTypeEnum_SIP
)

func (t PackageTypeEnum) String() string {
	switch t {
	case PackageTypeEnum_AIP:
		return "AIP"
	case PackageTypeEnum_DIP:
		return "DIP"
	case PackageTypeEnum_SIP:
		return "SIP"

	default:
		return ""
	}
}

var (
	_PackageTypeEnumNameToValue = map[string]PackageTypeEnum{
		"AIP": PackageTypeEnum_AIP,
		"DIP": PackageTypeEnum_DIP,
		"SIP": PackageTypeEnum_SIP,
	}

	_PackageTypeEnumValueToName = map[PackageTypeEnum]string{
		PackageTypeEnum_AIP: "AIP",
		PackageTypeEnum_DIP: "DIP",
		PackageTypeEnum_SIP: "SIP",
	}
)

func init() {
	var v PackageTypeEnum
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_PackageTypeEnumNameToValue = map[string]PackageTypeEnum{
			interface{}(PackageTypeEnum_AIP).(fmt.Stringer).String(): PackageTypeEnum_AIP,
			interface{}(PackageTypeEnum_DIP).(fmt.Stringer).String(): PackageTypeEnum_DIP,
			interface{}(PackageTypeEnum_SIP).(fmt.Stringer).String(): PackageTypeEnum_SIP,
		}
	}
}

// MarshalJSON is generated so PackageTypeEnum satisfies json.Marshaler.
func (r PackageTypeEnum) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _PackageTypeEnumValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid PackageTypeEnum: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so PackageTypeEnum satisfies json.Unmarshaler.
func (r *PackageTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PackageTypeEnum should be a string, got %s", data)
	}
	v, ok := _PackageTypeEnumNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid PackageTypeEnum %q", s)
	}
	*r = v
	return nil
}

type PersonIdentifierTypeEnum int

const (
	PersonIdentifierTypeEnum_ORCID PersonIdentifierTypeEnum = iota
	PersonIdentifierTypeEnum_researcherID
)

func (t PersonIdentifierTypeEnum) String() string {
	switch t {
	case PersonIdentifierTypeEnum_ORCID:
		return "ORCID"
	case PersonIdentifierTypeEnum_researcherID:
		return "researcherID"

	default:
		return ""
	}
}

var (
	_PersonIdentifierTypeEnumNameToValue = map[string]PersonIdentifierTypeEnum{
		"ORCID":        PersonIdentifierTypeEnum_ORCID,
		"researcherID": PersonIdentifierTypeEnum_researcherID,
	}

	_PersonIdentifierTypeEnumValueToName = map[PersonIdentifierTypeEnum]string{
		PersonIdentifierTypeEnum_ORCID:        "ORCID",
		PersonIdentifierTypeEnum_researcherID: "researcherID",
	}
)

func init() {
	var v PersonIdentifierTypeEnum
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_PersonIdentifierTypeEnumNameToValue = map[string]PersonIdentifierTypeEnum{
			interface{}(PersonIdentifierTypeEnum_ORCID).(fmt.Stringer).String():        PersonIdentifierTypeEnum_ORCID,
			interface{}(PersonIdentifierTypeEnum_researcherID).(fmt.Stringer).String(): PersonIdentifierTypeEnum_researcherID,
		}
	}
}

// MarshalJSON is generated so PersonIdentifierTypeEnum satisfies json.Marshaler.
func (r PersonIdentifierTypeEnum) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _PersonIdentifierTypeEnumValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid PersonIdentifierTypeEnum: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so PersonIdentifierTypeEnum satisfies json.Unmarshaler.
func (r *PersonIdentifierTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PersonIdentifierTypeEnum should be a string, got %s", data)
	}
	v, ok := _PersonIdentifierTypeEnumNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid PersonIdentifierTypeEnum %q", s)
	}
	*r = v
	return nil
}

type PersonRoleEnum int

const (
	PersonRoleEnum_administrator PersonRoleEnum = iota
	PersonRoleEnum_author
	PersonRoleEnum_contactPerson
	PersonRoleEnum_dataAnalyser
	PersonRoleEnum_dataCollector
	PersonRoleEnum_dataCreator
	PersonRoleEnum_dataManager
	PersonRoleEnum_depositingUser
	PersonRoleEnum_editor
	PersonRoleEnum_investigator
	PersonRoleEnum_other
	PersonRoleEnum_producer
	PersonRoleEnum_projectLeader
	PersonRoleEnum_projectMember
	PersonRoleEnum_publisher
	PersonRoleEnum_relatedPerson
	PersonRoleEnum_researcher
	PersonRoleEnum_researcherGroup
	PersonRoleEnum_rightsHolder
	PersonRoleEnum_sponsor
	PersonRoleEnum_supervisor
)

func (t PersonRoleEnum) String() string {
	switch t {
	case PersonRoleEnum_administrator:
		return "administrator"
	case PersonRoleEnum_author:
		return "author"
	case PersonRoleEnum_contactPerson:
		return "contactPerson"
	case PersonRoleEnum_dataAnalyser:
		return "dataAnalyser"
	case PersonRoleEnum_dataCollector:
		return "dataCollector"
	case PersonRoleEnum_dataCreator:
		return "dataCreator"
	case PersonRoleEnum_dataManager:
		return "dataManager"
	case PersonRoleEnum_depositingUser:
		return "depositingUser"
	case PersonRoleEnum_editor:
		return "editor"
	case PersonRoleEnum_investigator:
		return "investigator"
	case PersonRoleEnum_other:
		return "other"
	case PersonRoleEnum_producer:
		return "producer"
	case PersonRoleEnum_projectLeader:
		return "projectLeader"
	case PersonRoleEnum_projectMember:
		return "projectMember"
	case PersonRoleEnum_publisher:
		return "publisher"
	case PersonRoleEnum_relatedPerson:
		return "relatedPerson"
	case PersonRoleEnum_researcher:
		return "researcher"
	case PersonRoleEnum_researcherGroup:
		return "researcherGroup"
	case PersonRoleEnum_rightsHolder:
		return "rightsHolder"
	case PersonRoleEnum_sponsor:
		return "sponsor"
	case PersonRoleEnum_supervisor:
		return "supervisor"

	default:
		return ""
	}
}

var (
	_PersonRoleEnumNameToValue = map[string]PersonRoleEnum{
		"administrator":   PersonRoleEnum_administrator,
		"author":          PersonRoleEnum_author,
		"contactPerson":   PersonRoleEnum_contactPerson,
		"dataAnalyser":    PersonRoleEnum_dataAnalyser,
		"dataCollector":   PersonRoleEnum_dataCollector,
		"dataCreator":     PersonRoleEnum_dataCreator,
		"dataManager":     PersonRoleEnum_dataManager,
		"depositingUser":  PersonRoleEnum_depositingUser,
		"editor":          PersonRoleEnum_editor,
		"investigator":    PersonRoleEnum_investigator,
		"other":           PersonRoleEnum_other,
		"producer":        PersonRoleEnum_producer,
		"projectLeader":   PersonRoleEnum_projectLeader,
		"projectMember":   PersonRoleEnum_projectMember,
		"publisher":       PersonRoleEnum_publisher,
		"relatedPerson":   PersonRoleEnum_relatedPerson,
		"researcher":      PersonRoleEnum_researcher,
		"researcherGroup": PersonRoleEnum_researcherGroup,
		"rightsHolder":    PersonRoleEnum_rightsHolder,
		"sponsor":         PersonRoleEnum_sponsor,
		"supervisor":      PersonRoleEnum_supervisor,
	}

	_PersonRoleEnumValueToName = map[PersonRoleEnum]string{
		PersonRoleEnum_administrator:   "administrator",
		PersonRoleEnum_author:          "author",
		PersonRoleEnum_contactPerson:   "contactPerson",
		PersonRoleEnum_dataAnalyser:    "dataAnalyser",
		PersonRoleEnum_dataCollector:   "dataCollector",
		PersonRoleEnum_dataCreator:     "dataCreator",
		PersonRoleEnum_dataManager:     "dataManager",
		PersonRoleEnum_depositingUser:  "depositingUser",
		PersonRoleEnum_editor:          "editor",
		PersonRoleEnum_investigator:    "investigator",
		PersonRoleEnum_other:           "other",
		PersonRoleEnum_producer:        "producer",
		PersonRoleEnum_projectLeader:   "projectLeader",
		PersonRoleEnum_projectMember:   "projectMember",
		PersonRoleEnum_publisher:       "publisher",
		PersonRoleEnum_relatedPerson:   "relatedPerson",
		PersonRoleEnum_researcher:      "researcher",
		PersonRoleEnum_researcherGroup: "researcherGroup",
		PersonRoleEnum_rightsHolder:    "rightsHolder",
		PersonRoleEnum_sponsor:         "sponsor",
		PersonRoleEnum_supervisor:      "supervisor",
	}
)

func init() {
	var v PersonRoleEnum
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_PersonRoleEnumNameToValue = map[string]PersonRoleEnum{
			interface{}(PersonRoleEnum_administrator).(fmt.Stringer).String():   PersonRoleEnum_administrator,
			interface{}(PersonRoleEnum_author).(fmt.Stringer).String():          PersonRoleEnum_author,
			interface{}(PersonRoleEnum_contactPerson).(fmt.Stringer).String():   PersonRoleEnum_contactPerson,
			interface{}(PersonRoleEnum_dataAnalyser).(fmt.Stringer).String():    PersonRoleEnum_dataAnalyser,
			interface{}(PersonRoleEnum_dataCollector).(fmt.Stringer).String():   PersonRoleEnum_dataCollector,
			interface{}(PersonRoleEnum_dataCreator).(fmt.Stringer).String():     PersonRoleEnum_dataCreator,
			interface{}(PersonRoleEnum_dataManager).(fmt.Stringer).String():     PersonRoleEnum_dataManager,
			interface{}(PersonRoleEnum_depositingUser).(fmt.Stringer).String():  PersonRoleEnum_depositingUser,
			interface{}(PersonRoleEnum_editor).(fmt.Stringer).String():          PersonRoleEnum_editor,
			interface{}(PersonRoleEnum_investigator).(fmt.Stringer).String():    PersonRoleEnum_investigator,
			interface{}(PersonRoleEnum_other).(fmt.Stringer).String():           PersonRoleEnum_other,
			interface{}(PersonRoleEnum_producer).(fmt.Stringer).String():        PersonRoleEnum_producer,
			interface{}(PersonRoleEnum_projectLeader).(fmt.Stringer).String():   PersonRoleEnum_projectLeader,
			interface{}(PersonRoleEnum_projectMember).(fmt.Stringer).String():   PersonRoleEnum_projectMember,
			interface{}(PersonRoleEnum_publisher).(fmt.Stringer).String():       PersonRoleEnum_publisher,
			interface{}(PersonRoleEnum_relatedPerson).(fmt.Stringer).String():   PersonRoleEnum_relatedPerson,
			interface{}(PersonRoleEnum_researcher).(fmt.Stringer).String():      PersonRoleEnum_researcher,
			interface{}(PersonRoleEnum_researcherGroup).(fmt.Stringer).String(): PersonRoleEnum_researcherGroup,
			interface{}(PersonRoleEnum_rightsHolder).(fmt.Stringer).String():    PersonRoleEnum_rightsHolder,
			interface{}(PersonRoleEnum_sponsor).(fmt.Stringer).String():         PersonRoleEnum_sponsor,
			interface{}(PersonRoleEnum_supervisor).(fmt.Stringer).String():      PersonRoleEnum_supervisor,
		}
	}
}

// MarshalJSON is generated so PersonRoleEnum satisfies json.Marshaler.
func (r PersonRoleEnum) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _PersonRoleEnumValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid PersonRoleEnum: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so PersonRoleEnum satisfies json.Unmarshaler.
func (r *PersonRoleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PersonRoleEnum should be a string, got %s", data)
	}
	v, ok := _PersonRoleEnumNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid PersonRoleEnum %q", s)
	}
	*r = v
	return nil
}

type PreservationEventTypeEnum int

const (
	PreservationEventTypeEnum_accession PreservationEventTypeEnum = iota
	PreservationEventTypeEnum_appraisal
	PreservationEventTypeEnum_capture
	PreservationEventTypeEnum_compression
	PreservationEventTypeEnum_creation
	PreservationEventTypeEnum_deaccession
	PreservationEventTypeEnum_decompression
	PreservationEventTypeEnum_decryption
	PreservationEventTypeEnum_deletion
	PreservationEventTypeEnum_digitalSignatureGeneration
	PreservationEventTypeEnum_digitalSignatureValidation
	PreservationEventTypeEnum_dissemination
	PreservationEventTypeEnum_encryption
	PreservationEventTypeEnum_filenameChange
	PreservationEventTypeEnum_fixityCheck
	PreservationEventTypeEnum_forensicFeatureAnalysis
	PreservationEventTypeEnum_formatIdentification
	PreservationEventTypeEnum_imaging
	PreservationEventTypeEnum_informationPackageCreation
	PreservationEventTypeEnum_informationPackageMerging
	PreservationEventTypeEnum_informationPackageSplitting
	PreservationEventTypeEnum_ingestion
	PreservationEventTypeEnum_ingestionEnd
	PreservationEventTypeEnum_ingestionStart
	PreservationEventTypeEnum_messageDigestCalculation
	PreservationEventTypeEnum_metadataExtraction
	PreservationEventTypeEnum_metadataModification
	PreservationEventTypeEnum_migration
	PreservationEventTypeEnum_modification
	PreservationEventTypeEnum_normalization
	PreservationEventTypeEnum_packing
	PreservationEventTypeEnum_policyAssignment
	PreservationEventTypeEnum_quarantine
	PreservationEventTypeEnum_recovery
	PreservationEventTypeEnum_redaction
	PreservationEventTypeEnum_refreshment
	PreservationEventTypeEnum_replication
	PreservationEventTypeEnum_transfer
	PreservationEventTypeEnum_unpacking
	PreservationEventTypeEnum_unquarantine
	PreservationEventTypeEnum_validation
	PreservationEventTypeEnum_virusCheck
)

func (t PreservationEventTypeEnum) String() string {
	switch t {
	case PreservationEventTypeEnum_accession:
		return "accession"
	case PreservationEventTypeEnum_appraisal:
		return "appraisal"
	case PreservationEventTypeEnum_capture:
		return "capture"
	case PreservationEventTypeEnum_compression:
		return "compression"
	case PreservationEventTypeEnum_creation:
		return "creation"
	case PreservationEventTypeEnum_deaccession:
		return "deaccession"
	case PreservationEventTypeEnum_decompression:
		return "decompression"
	case PreservationEventTypeEnum_decryption:
		return "decryption"
	case PreservationEventTypeEnum_deletion:
		return "deletion"
	case PreservationEventTypeEnum_digitalSignatureGeneration:
		return "digitalSignatureGeneration"
	case PreservationEventTypeEnum_digitalSignatureValidation:
		return "digitalSignatureValidation"
	case PreservationEventTypeEnum_dissemination:
		return "dissemination"
	case PreservationEventTypeEnum_encryption:
		return "encryption"
	case PreservationEventTypeEnum_filenameChange:
		return "filenameChange"
	case PreservationEventTypeEnum_fixityCheck:
		return "fixityCheck"
	case PreservationEventTypeEnum_forensicFeatureAnalysis:
		return "forensicFeatureAnalysis"
	case PreservationEventTypeEnum_formatIdentification:
		return "formatIdentification"
	case PreservationEventTypeEnum_imaging:
		return "imaging"
	case PreservationEventTypeEnum_informationPackageCreation:
		return "informationPackageCreation"
	case PreservationEventTypeEnum_informationPackageMerging:
		return "informationPackageMerging"
	case PreservationEventTypeEnum_informationPackageSplitting:
		return "informationPackageSplitting"
	case PreservationEventTypeEnum_ingestion:
		return "ingestion"
	case PreservationEventTypeEnum_ingestionEnd:
		return "ingestionEnd"
	case PreservationEventTypeEnum_ingestionStart:
		return "ingestionStart"
	case PreservationEventTypeEnum_messageDigestCalculation:
		return "messageDigestCalculation"
	case PreservationEventTypeEnum_metadataExtraction:
		return "metadataExtraction"
	case PreservationEventTypeEnum_metadataModification:
		return "metadataModification"
	case PreservationEventTypeEnum_migration:
		return "migration"
	case PreservationEventTypeEnum_modification:
		return "modification"
	case PreservationEventTypeEnum_normalization:
		return "normalization"
	case PreservationEventTypeEnum_packing:
		return "packing"
	case PreservationEventTypeEnum_policyAssignment:
		return "policyAssignment"
	case PreservationEventTypeEnum_quarantine:
		return "quarantine"
	case PreservationEventTypeEnum_recovery:
		return "recovery"
	case PreservationEventTypeEnum_redaction:
		return "redaction"
	case PreservationEventTypeEnum_refreshment:
		return "refreshment"
	case PreservationEventTypeEnum_replication:
		return "replication"
	case PreservationEventTypeEnum_transfer:
		return "transfer"
	case PreservationEventTypeEnum_unpacking:
		return "unpacking"
	case PreservationEventTypeEnum_unquarantine:
		return "unquarantine"
	case PreservationEventTypeEnum_validation:
		return "validation"
	case PreservationEventTypeEnum_virusCheck:
		return "virusCheck"

	default:
		return ""
	}
}

var (
	_PreservationEventTypeEnumNameToValue = map[string]PreservationEventTypeEnum{
		"accession":                   PreservationEventTypeEnum_accession,
		"appraisal":                   PreservationEventTypeEnum_appraisal,
		"capture":                     PreservationEventTypeEnum_capture,
		"compression":                 PreservationEventTypeEnum_compression,
		"creation":                    PreservationEventTypeEnum_creation,
		"deaccession":                 PreservationEventTypeEnum_deaccession,
		"decompression":               PreservationEventTypeEnum_decompression,
		"decryption":                  PreservationEventTypeEnum_decryption,
		"deletion":                    PreservationEventTypeEnum_deletion,
		"digitalSignatureGeneration":  PreservationEventTypeEnum_digitalSignatureGeneration,
		"digitalSignatureValidation":  PreservationEventTypeEnum_digitalSignatureValidation,
		"dissemination":               PreservationEventTypeEnum_dissemination,
		"encryption":                  PreservationEventTypeEnum_encryption,
		"filenameChange":              PreservationEventTypeEnum_filenameChange,
		"fixityCheck":                 PreservationEventTypeEnum_fixityCheck,
		"forensicFeatureAnalysis":     PreservationEventTypeEnum_forensicFeatureAnalysis,
		"formatIdentification":        PreservationEventTypeEnum_formatIdentification,
		"imaging":                     PreservationEventTypeEnum_imaging,
		"informationPackageCreation":  PreservationEventTypeEnum_informationPackageCreation,
		"informationPackageMerging":   PreservationEventTypeEnum_informationPackageMerging,
		"informationPackageSplitting": PreservationEventTypeEnum_informationPackageSplitting,
		"ingestion":                   PreservationEventTypeEnum_ingestion,
		"ingestionEnd":                PreservationEventTypeEnum_ingestionEnd,
		"ingestionStart":              PreservationEventTypeEnum_ingestionStart,
		"messageDigestCalculation":    PreservationEventTypeEnum_messageDigestCalculation,
		"metadataExtraction":          PreservationEventTypeEnum_metadataExtraction,
		"metadataModification":        PreservationEventTypeEnum_metadataModification,
		"migration":                   PreservationEventTypeEnum_migration,
		"modification":                PreservationEventTypeEnum_modification,
		"normalization":               PreservationEventTypeEnum_normalization,
		"packing":                     PreservationEventTypeEnum_packing,
		"policyAssignment":            PreservationEventTypeEnum_policyAssignment,
		"quarantine":                  PreservationEventTypeEnum_quarantine,
		"recovery":                    PreservationEventTypeEnum_recovery,
		"redaction":                   PreservationEventTypeEnum_redaction,
		"refreshment":                 PreservationEventTypeEnum_refreshment,
		"replication":                 PreservationEventTypeEnum_replication,
		"transfer":                    PreservationEventTypeEnum_transfer,
		"unpacking":                   PreservationEventTypeEnum_unpacking,
		"unquarantine":                PreservationEventTypeEnum_unquarantine,
		"validation":                  PreservationEventTypeEnum_validation,
		"virusCheck":                  PreservationEventTypeEnum_virusCheck,
	}

	_PreservationEventTypeEnumValueToName = map[PreservationEventTypeEnum]string{
		PreservationEventTypeEnum_accession:                   "accession",
		PreservationEventTypeEnum_appraisal:                   "appraisal",
		PreservationEventTypeEnum_capture:                     "capture",
		PreservationEventTypeEnum_compression:                 "compression",
		PreservationEventTypeEnum_creation:                    "creation",
		PreservationEventTypeEnum_deaccession:                 "deaccession",
		PreservationEventTypeEnum_decompression:               "decompression",
		PreservationEventTypeEnum_decryption:                  "decryption",
		PreservationEventTypeEnum_deletion:                    "deletion",
		PreservationEventTypeEnum_digitalSignatureGeneration:  "digitalSignatureGeneration",
		PreservationEventTypeEnum_digitalSignatureValidation:  "digitalSignatureValidation",
		PreservationEventTypeEnum_dissemination:               "dissemination",
		PreservationEventTypeEnum_encryption:                  "encryption",
		PreservationEventTypeEnum_filenameChange:              "filenameChange",
		PreservationEventTypeEnum_fixityCheck:                 "fixityCheck",
		PreservationEventTypeEnum_forensicFeatureAnalysis:     "forensicFeatureAnalysis",
		PreservationEventTypeEnum_formatIdentification:        "formatIdentification",
		PreservationEventTypeEnum_imaging:                     "imaging",
		PreservationEventTypeEnum_informationPackageCreation:  "informationPackageCreation",
		PreservationEventTypeEnum_informationPackageMerging:   "informationPackageMerging",
		PreservationEventTypeEnum_informationPackageSplitting: "informationPackageSplitting",
		PreservationEventTypeEnum_ingestion:                   "ingestion",
		PreservationEventTypeEnum_ingestionEnd:                "ingestionEnd",
		PreservationEventTypeEnum_ingestionStart:              "ingestionStart",
		PreservationEventTypeEnum_messageDigestCalculation:    "messageDigestCalculation",
		PreservationEventTypeEnum_metadataExtraction:          "metadataExtraction",
		PreservationEventTypeEnum_metadataModification:        "metadataModification",
		PreservationEventTypeEnum_migration:                   "migration",
		PreservationEventTypeEnum_modification:                "modification",
		PreservationEventTypeEnum_normalization:               "normalization",
		PreservationEventTypeEnum_packing:                     "packing",
		PreservationEventTypeEnum_policyAssignment:            "policyAssignment",
		PreservationEventTypeEnum_quarantine:                  "quarantine",
		PreservationEventTypeEnum_recovery:                    "recovery",
		PreservationEventTypeEnum_redaction:                   "redaction",
		PreservationEventTypeEnum_refreshment:                 "refreshment",
		PreservationEventTypeEnum_replication:                 "replication",
		PreservationEventTypeEnum_transfer:                    "transfer",
		PreservationEventTypeEnum_unpacking:                   "unpacking",
		PreservationEventTypeEnum_unquarantine:                "unquarantine",
		PreservationEventTypeEnum_validation:                  "validation",
		PreservationEventTypeEnum_virusCheck:                  "virusCheck",
	}
)

func init() {
	var v PreservationEventTypeEnum
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_PreservationEventTypeEnumNameToValue = map[string]PreservationEventTypeEnum{
			interface{}(PreservationEventTypeEnum_accession).(fmt.Stringer).String():                   PreservationEventTypeEnum_accession,
			interface{}(PreservationEventTypeEnum_appraisal).(fmt.Stringer).String():                   PreservationEventTypeEnum_appraisal,
			interface{}(PreservationEventTypeEnum_capture).(fmt.Stringer).String():                     PreservationEventTypeEnum_capture,
			interface{}(PreservationEventTypeEnum_compression).(fmt.Stringer).String():                 PreservationEventTypeEnum_compression,
			interface{}(PreservationEventTypeEnum_creation).(fmt.Stringer).String():                    PreservationEventTypeEnum_creation,
			interface{}(PreservationEventTypeEnum_deaccession).(fmt.Stringer).String():                 PreservationEventTypeEnum_deaccession,
			interface{}(PreservationEventTypeEnum_decompression).(fmt.Stringer).String():               PreservationEventTypeEnum_decompression,
			interface{}(PreservationEventTypeEnum_decryption).(fmt.Stringer).String():                  PreservationEventTypeEnum_decryption,
			interface{}(PreservationEventTypeEnum_deletion).(fmt.Stringer).String():                    PreservationEventTypeEnum_deletion,
			interface{}(PreservationEventTypeEnum_digitalSignatureGeneration).(fmt.Stringer).String():  PreservationEventTypeEnum_digitalSignatureGeneration,
			interface{}(PreservationEventTypeEnum_digitalSignatureValidation).(fmt.Stringer).String():  PreservationEventTypeEnum_digitalSignatureValidation,
			interface{}(PreservationEventTypeEnum_dissemination).(fmt.Stringer).String():               PreservationEventTypeEnum_dissemination,
			interface{}(PreservationEventTypeEnum_encryption).(fmt.Stringer).String():                  PreservationEventTypeEnum_encryption,
			interface{}(PreservationEventTypeEnum_filenameChange).(fmt.Stringer).String():              PreservationEventTypeEnum_filenameChange,
			interface{}(PreservationEventTypeEnum_fixityCheck).(fmt.Stringer).String():                 PreservationEventTypeEnum_fixityCheck,
			interface{}(PreservationEventTypeEnum_forensicFeatureAnalysis).(fmt.Stringer).String():     PreservationEventTypeEnum_forensicFeatureAnalysis,
			interface{}(PreservationEventTypeEnum_formatIdentification).(fmt.Stringer).String():        PreservationEventTypeEnum_formatIdentification,
			interface{}(PreservationEventTypeEnum_imaging).(fmt.Stringer).String():                     PreservationEventTypeEnum_imaging,
			interface{}(PreservationEventTypeEnum_informationPackageCreation).(fmt.Stringer).String():  PreservationEventTypeEnum_informationPackageCreation,
			interface{}(PreservationEventTypeEnum_informationPackageMerging).(fmt.Stringer).String():   PreservationEventTypeEnum_informationPackageMerging,
			interface{}(PreservationEventTypeEnum_informationPackageSplitting).(fmt.Stringer).String(): PreservationEventTypeEnum_informationPackageSplitting,
			interface{}(PreservationEventTypeEnum_ingestion).(fmt.Stringer).String():                   PreservationEventTypeEnum_ingestion,
			interface{}(PreservationEventTypeEnum_ingestionEnd).(fmt.Stringer).String():                PreservationEventTypeEnum_ingestionEnd,
			interface{}(PreservationEventTypeEnum_ingestionStart).(fmt.Stringer).String():              PreservationEventTypeEnum_ingestionStart,
			interface{}(PreservationEventTypeEnum_messageDigestCalculation).(fmt.Stringer).String():    PreservationEventTypeEnum_messageDigestCalculation,
			interface{}(PreservationEventTypeEnum_metadataExtraction).(fmt.Stringer).String():          PreservationEventTypeEnum_metadataExtraction,
			interface{}(PreservationEventTypeEnum_metadataModification).(fmt.Stringer).String():        PreservationEventTypeEnum_metadataModification,
			interface{}(PreservationEventTypeEnum_migration).(fmt.Stringer).String():                   PreservationEventTypeEnum_migration,
			interface{}(PreservationEventTypeEnum_modification).(fmt.Stringer).String():                PreservationEventTypeEnum_modification,
			interface{}(PreservationEventTypeEnum_normalization).(fmt.Stringer).String():               PreservationEventTypeEnum_normalization,
			interface{}(PreservationEventTypeEnum_packing).(fmt.Stringer).String():                     PreservationEventTypeEnum_packing,
			interface{}(PreservationEventTypeEnum_policyAssignment).(fmt.Stringer).String():            PreservationEventTypeEnum_policyAssignment,
			interface{}(PreservationEventTypeEnum_quarantine).(fmt.Stringer).String():                  PreservationEventTypeEnum_quarantine,
			interface{}(PreservationEventTypeEnum_recovery).(fmt.Stringer).String():                    PreservationEventTypeEnum_recovery,
			interface{}(PreservationEventTypeEnum_redaction).(fmt.Stringer).String():                   PreservationEventTypeEnum_redaction,
			interface{}(PreservationEventTypeEnum_refreshment).(fmt.Stringer).String():                 PreservationEventTypeEnum_refreshment,
			interface{}(PreservationEventTypeEnum_replication).(fmt.Stringer).String():                 PreservationEventTypeEnum_replication,
			interface{}(PreservationEventTypeEnum_transfer).(fmt.Stringer).String():                    PreservationEventTypeEnum_transfer,
			interface{}(PreservationEventTypeEnum_unpacking).(fmt.Stringer).String():                   PreservationEventTypeEnum_unpacking,
			interface{}(PreservationEventTypeEnum_unquarantine).(fmt.Stringer).String():                PreservationEventTypeEnum_unquarantine,
			interface{}(PreservationEventTypeEnum_validation).(fmt.Stringer).String():                  PreservationEventTypeEnum_validation,
			interface{}(PreservationEventTypeEnum_virusCheck).(fmt.Stringer).String():                  PreservationEventTypeEnum_virusCheck,
		}
	}
}

// MarshalJSON is generated so PreservationEventTypeEnum satisfies json.Marshaler.
func (r PreservationEventTypeEnum) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _PreservationEventTypeEnumValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid PreservationEventTypeEnum: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so PreservationEventTypeEnum satisfies json.Unmarshaler.
func (r *PreservationEventTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PreservationEventTypeEnum should be a string, got %s", data)
	}
	v, ok := _PreservationEventTypeEnumNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid PreservationEventTypeEnum %q", s)
	}
	*r = v
	return nil
}

type PublicationVersionEnum int

const (
	PublicationVersionEnum_AO PublicationVersionEnum = iota
	PublicationVersionEnum_SMUR
	PublicationVersionEnum_AM
	PublicationVersionEnum_P
	PublicationVersionEnum_VoR
	PublicationVersionEnum_CVoR
	PublicationVersionEnum_EVoR
	PublicationVersionEnum_NA
)

func (t PublicationVersionEnum) String() string {
	switch t {
	case PublicationVersionEnum_AO:
		return "AO"
	case PublicationVersionEnum_SMUR:
		return "SMUR"
	case PublicationVersionEnum_AM:
		return "AM"
	case PublicationVersionEnum_P:
		return "P"
	case PublicationVersionEnum_VoR:
		return "VoR"
	case PublicationVersionEnum_CVoR:
		return "CVoR"
	case PublicationVersionEnum_EVoR:
		return "EVoR"
	case PublicationVersionEnum_NA:
		return "NA"

	default:
		return ""
	}
}

var (
	_PublicationVersionEnumNameToValue = map[string]PublicationVersionEnum{
		"AO":   PublicationVersionEnum_AO,
		"SMUR": PublicationVersionEnum_SMUR,
		"AM":   PublicationVersionEnum_AM,
		"P":    PublicationVersionEnum_P,
		"VoR":  PublicationVersionEnum_VoR,
		"CVoR": PublicationVersionEnum_CVoR,
		"EVoR": PublicationVersionEnum_EVoR,
		"NA":   PublicationVersionEnum_NA,
	}

	_PublicationVersionEnumValueToName = map[PublicationVersionEnum]string{
		PublicationVersionEnum_AO:   "AO",
		PublicationVersionEnum_SMUR: "SMUR",
		PublicationVersionEnum_AM:   "AM",
		PublicationVersionEnum_P:    "P",
		PublicationVersionEnum_VoR:  "VoR",
		PublicationVersionEnum_CVoR: "CVoR",
		PublicationVersionEnum_EVoR: "EVoR",
		PublicationVersionEnum_NA:   "NA",
	}
)

func init() {
	var v PublicationVersionEnum
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_PublicationVersionEnumNameToValue = map[string]PublicationVersionEnum{
			interface{}(PublicationVersionEnum_AO).(fmt.Stringer).String():   PublicationVersionEnum_AO,
			interface{}(PublicationVersionEnum_SMUR).(fmt.Stringer).String(): PublicationVersionEnum_SMUR,
			interface{}(PublicationVersionEnum_AM).(fmt.Stringer).String():   PublicationVersionEnum_AM,
			interface{}(PublicationVersionEnum_P).(fmt.Stringer).String():    PublicationVersionEnum_P,
			interface{}(PublicationVersionEnum_VoR).(fmt.Stringer).String():  PublicationVersionEnum_VoR,
			interface{}(PublicationVersionEnum_CVoR).(fmt.Stringer).String(): PublicationVersionEnum_CVoR,
			interface{}(PublicationVersionEnum_EVoR).(fmt.Stringer).String(): PublicationVersionEnum_EVoR,
			interface{}(PublicationVersionEnum_NA).(fmt.Stringer).String():   PublicationVersionEnum_NA,
		}
	}
}

// MarshalJSON is generated so PublicationVersionEnum satisfies json.Marshaler.
func (r PublicationVersionEnum) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _PublicationVersionEnumValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid PublicationVersionEnum: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so PublicationVersionEnum satisfies json.Unmarshaler.
func (r *PublicationVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PublicationVersionEnum should be a string, got %s", data)
	}
	v, ok := _PublicationVersionEnumNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid PublicationVersionEnum %q", s)
	}
	*r = v
	return nil
}

type RIOXXTermsAPCEnum int

const (
	RIOXXTermsAPCEnum_paid RIOXXTermsAPCEnum = iota
	RIOXXTermsAPCEnum_partiallyWaived
	RIOXXTermsAPCEnum_fullyWaived
	RIOXXTermsAPCEnum_notCharged
	RIOXXTermsAPCEnum_notRequired
	RIOXXTermsAPCEnum_unknown
)

func (t RIOXXTermsAPCEnum) String() string {
	switch t {
	case RIOXXTermsAPCEnum_paid:
		return "paid"
	case RIOXXTermsAPCEnum_partiallyWaived:
		return "partiallyWaived"
	case RIOXXTermsAPCEnum_fullyWaived:
		return "fullyWaived"
	case RIOXXTermsAPCEnum_notCharged:
		return "notCharged"
	case RIOXXTermsAPCEnum_notRequired:
		return "notRequired"
	case RIOXXTermsAPCEnum_unknown:
		return "unknown"

	default:
		return ""
	}
}

var (
	_RIOXXTermsAPCEnumNameToValue = map[string]RIOXXTermsAPCEnum{
		"paid":            RIOXXTermsAPCEnum_paid,
		"partiallyWaived": RIOXXTermsAPCEnum_partiallyWaived,
		"fullyWaived":     RIOXXTermsAPCEnum_fullyWaived,
		"notCharged":      RIOXXTermsAPCEnum_notCharged,
		"notRequired":     RIOXXTermsAPCEnum_notRequired,
		"unknown":         RIOXXTermsAPCEnum_unknown,
	}

	_RIOXXTermsAPCEnumValueToName = map[RIOXXTermsAPCEnum]string{
		RIOXXTermsAPCEnum_paid:            "paid",
		RIOXXTermsAPCEnum_partiallyWaived: "partiallyWaived",
		RIOXXTermsAPCEnum_fullyWaived:     "fullyWaived",
		RIOXXTermsAPCEnum_notCharged:      "notCharged",
		RIOXXTermsAPCEnum_notRequired:     "notRequired",
		RIOXXTermsAPCEnum_unknown:         "unknown",
	}
)

func init() {
	var v RIOXXTermsAPCEnum
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_RIOXXTermsAPCEnumNameToValue = map[string]RIOXXTermsAPCEnum{
			interface{}(RIOXXTermsAPCEnum_paid).(fmt.Stringer).String():            RIOXXTermsAPCEnum_paid,
			interface{}(RIOXXTermsAPCEnum_partiallyWaived).(fmt.Stringer).String(): RIOXXTermsAPCEnum_partiallyWaived,
			interface{}(RIOXXTermsAPCEnum_fullyWaived).(fmt.Stringer).String():     RIOXXTermsAPCEnum_fullyWaived,
			interface{}(RIOXXTermsAPCEnum_notCharged).(fmt.Stringer).String():      RIOXXTermsAPCEnum_notCharged,
			interface{}(RIOXXTermsAPCEnum_notRequired).(fmt.Stringer).String():     RIOXXTermsAPCEnum_notRequired,
			interface{}(RIOXXTermsAPCEnum_unknown).(fmt.Stringer).String():         RIOXXTermsAPCEnum_unknown,
		}
	}
}

// MarshalJSON is generated so RIOXXTermsAPCEnum satisfies json.Marshaler.
func (r RIOXXTermsAPCEnum) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _RIOXXTermsAPCEnumValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid RIOXXTermsAPCEnum: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so RIOXXTermsAPCEnum satisfies json.Unmarshaler.
func (r *RIOXXTermsAPCEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("RIOXXTermsAPCEnum should be a string, got %s", data)
	}
	v, ok := _RIOXXTermsAPCEnumNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid RIOXXTermsAPCEnum %q", s)
	}
	*r = v
	return nil
}

type RelationTypeEnum int

const (
	RelationTypeEnum_basedOnData RelationTypeEnum = iota
	RelationTypeEnum_cites
	RelationTypeEnum_compiles
	RelationTypeEnum_continues
	RelationTypeEnum_documents
	RelationTypeEnum_hasComment
	RelationTypeEnum_hasMetadata
	RelationTypeEnum_hasParent
	RelationTypeEnum_hasPart
	RelationTypeEnum_hasRelatedMaterial
	RelationTypeEnum_hasReply
	RelationTypeEnum_isAIPOf
	RelationTypeEnum_isBasedOn
	RelationTypeEnum_isBasisFor
	RelationTypeEnum_isCitedBy
	RelationTypeEnum_isCommentOn
	RelationTypeEnum_isCompiledBy
	RelationTypeEnum_isContinuedBy
	RelationTypeEnum_isDerivedFrom
	RelationTypeEnum_isDocumentedBy
	RelationTypeEnum_isIdenticalTo
	RelationTypeEnum_isMetadataFor
	RelationTypeEnum_isNewVersionOf
	RelationTypeEnum_isOriginalFormOf
	RelationTypeEnum_isParentOf
	RelationTypeEnum_isPartOf
	RelationTypeEnum_isPreviousVersionOf
	RelationTypeEnum_isReferencedBy
	RelationTypeEnum_isReplyTo
	RelationTypeEnum_isRequiredBy
	RelationTypeEnum_isReviewedBy
	RelationTypeEnum_isSourceOf
	RelationTypeEnum_isSupplementedBy
	RelationTypeEnum_isSupplementTo
	RelationTypeEnum_isVariantFormOf
	RelationTypeEnum_references
	RelationTypeEnum_requires
	RelationTypeEnum_reviews
)

func (t RelationTypeEnum) String() string {
	switch t {
	case RelationTypeEnum_basedOnData:
		return "basedOnData"
	case RelationTypeEnum_cites:
		return "cites"
	case RelationTypeEnum_compiles:
		return "compiles"
	case RelationTypeEnum_continues:
		return "continues"
	case RelationTypeEnum_documents:
		return "documents"
	case RelationTypeEnum_hasComment:
		return "hasComment"
	case RelationTypeEnum_hasMetadata:
		return "hasMetadata"
	case RelationTypeEnum_hasParent:
		return "hasParent"
	case RelationTypeEnum_hasPart:
		return "hasPart"
	case RelationTypeEnum_hasRelatedMaterial:
		return "hasRelatedMaterial"
	case RelationTypeEnum_hasReply:
		return "hasReply"
	case RelationTypeEnum_isAIPOf:
		return "isAIPOf"
	case RelationTypeEnum_isBasedOn:
		return "isBasedOn"
	case RelationTypeEnum_isBasisFor:
		return "isBasisFor"
	case RelationTypeEnum_isCitedBy:
		return "isCitedBy"
	case RelationTypeEnum_isCommentOn:
		return "isCommentOn"
	case RelationTypeEnum_isCompiledBy:
		return "isCompiledBy"
	case RelationTypeEnum_isContinuedBy:
		return "isContinuedBy"
	case RelationTypeEnum_isDerivedFrom:
		return "isDerivedFrom"
	case RelationTypeEnum_isDocumentedBy:
		return "isDocumentedBy"
	case RelationTypeEnum_isIdenticalTo:
		return "isIdenticalTo"
	case RelationTypeEnum_isMetadataFor:
		return "isMetadataFor"
	case RelationTypeEnum_isNewVersionOf:
		return "isNewVersionOf"
	case RelationTypeEnum_isOriginalFormOf:
		return "isOriginalFormOf"
	case RelationTypeEnum_isParentOf:
		return "isParentOf"
	case RelationTypeEnum_isPartOf:
		return "isPartOf"
	case RelationTypeEnum_isPreviousVersionOf:
		return "isPreviousVersionOf"
	case RelationTypeEnum_isReferencedBy:
		return "isReferencedBy"
	case RelationTypeEnum_isReplyTo:
		return "isReplyTo"
	case RelationTypeEnum_isRequiredBy:
		return "isRequiredBy"
	case RelationTypeEnum_isReviewedBy:
		return "isReviewedBy"
	case RelationTypeEnum_isSourceOf:
		return "isSourceOf"
	case RelationTypeEnum_isSupplementedBy:
		return "isSupplementedBy"
	case RelationTypeEnum_isSupplementTo:
		return "isSupplementTo"
	case RelationTypeEnum_isVariantFormOf:
		return "isVariantFormOf"
	case RelationTypeEnum_references:
		return "references"
	case RelationTypeEnum_requires:
		return "requires"
	case RelationTypeEnum_reviews:
		return "reviews"

	default:
		return ""
	}
}

var (
	_RelationTypeEnumNameToValue = map[string]RelationTypeEnum{
		"basedOnData":         RelationTypeEnum_basedOnData,
		"cites":               RelationTypeEnum_cites,
		"compiles":            RelationTypeEnum_compiles,
		"continues":           RelationTypeEnum_continues,
		"documents":           RelationTypeEnum_documents,
		"hasComment":          RelationTypeEnum_hasComment,
		"hasMetadata":         RelationTypeEnum_hasMetadata,
		"hasParent":           RelationTypeEnum_hasParent,
		"hasPart":             RelationTypeEnum_hasPart,
		"hasRelatedMaterial":  RelationTypeEnum_hasRelatedMaterial,
		"hasReply":            RelationTypeEnum_hasReply,
		"isAIPOf":             RelationTypeEnum_isAIPOf,
		"isBasedOn":           RelationTypeEnum_isBasedOn,
		"isBasisFor":          RelationTypeEnum_isBasisFor,
		"isCitedBy":           RelationTypeEnum_isCitedBy,
		"isCommentOn":         RelationTypeEnum_isCommentOn,
		"isCompiledBy":        RelationTypeEnum_isCompiledBy,
		"isContinuedBy":       RelationTypeEnum_isContinuedBy,
		"isDerivedFrom":       RelationTypeEnum_isDerivedFrom,
		"isDocumentedBy":      RelationTypeEnum_isDocumentedBy,
		"isIdenticalTo":       RelationTypeEnum_isIdenticalTo,
		"isMetadataFor":       RelationTypeEnum_isMetadataFor,
		"isNewVersionOf":      RelationTypeEnum_isNewVersionOf,
		"isOriginalFormOf":    RelationTypeEnum_isOriginalFormOf,
		"isParentOf":          RelationTypeEnum_isParentOf,
		"isPartOf":            RelationTypeEnum_isPartOf,
		"isPreviousVersionOf": RelationTypeEnum_isPreviousVersionOf,
		"isReferencedBy":      RelationTypeEnum_isReferencedBy,
		"isReplyTo":           RelationTypeEnum_isReplyTo,
		"isRequiredBy":        RelationTypeEnum_isRequiredBy,
		"isReviewedBy":        RelationTypeEnum_isReviewedBy,
		"isSourceOf":          RelationTypeEnum_isSourceOf,
		"isSupplementedBy":    RelationTypeEnum_isSupplementedBy,
		"isSupplementTo":      RelationTypeEnum_isSupplementTo,
		"isVariantFormOf":     RelationTypeEnum_isVariantFormOf,
		"references":          RelationTypeEnum_references,
		"requires":            RelationTypeEnum_requires,
		"reviews":             RelationTypeEnum_reviews,
	}

	_RelationTypeEnumValueToName = map[RelationTypeEnum]string{
		RelationTypeEnum_basedOnData:         "basedOnData",
		RelationTypeEnum_cites:               "cites",
		RelationTypeEnum_compiles:            "compiles",
		RelationTypeEnum_continues:           "continues",
		RelationTypeEnum_documents:           "documents",
		RelationTypeEnum_hasComment:          "hasComment",
		RelationTypeEnum_hasMetadata:         "hasMetadata",
		RelationTypeEnum_hasParent:           "hasParent",
		RelationTypeEnum_hasPart:             "hasPart",
		RelationTypeEnum_hasRelatedMaterial:  "hasRelatedMaterial",
		RelationTypeEnum_hasReply:            "hasReply",
		RelationTypeEnum_isAIPOf:             "isAIPOf",
		RelationTypeEnum_isBasedOn:           "isBasedOn",
		RelationTypeEnum_isBasisFor:          "isBasisFor",
		RelationTypeEnum_isCitedBy:           "isCitedBy",
		RelationTypeEnum_isCommentOn:         "isCommentOn",
		RelationTypeEnum_isCompiledBy:        "isCompiledBy",
		RelationTypeEnum_isContinuedBy:       "isContinuedBy",
		RelationTypeEnum_isDerivedFrom:       "isDerivedFrom",
		RelationTypeEnum_isDocumentedBy:      "isDocumentedBy",
		RelationTypeEnum_isIdenticalTo:       "isIdenticalTo",
		RelationTypeEnum_isMetadataFor:       "isMetadataFor",
		RelationTypeEnum_isNewVersionOf:      "isNewVersionOf",
		RelationTypeEnum_isOriginalFormOf:    "isOriginalFormOf",
		RelationTypeEnum_isParentOf:          "isParentOf",
		RelationTypeEnum_isPartOf:            "isPartOf",
		RelationTypeEnum_isPreviousVersionOf: "isPreviousVersionOf",
		RelationTypeEnum_isReferencedBy:      "isReferencedBy",
		RelationTypeEnum_isReplyTo:           "isReplyTo",
		RelationTypeEnum_isRequiredBy:        "isRequiredBy",
		RelationTypeEnum_isReviewedBy:        "isReviewedBy",
		RelationTypeEnum_isSourceOf:          "isSourceOf",
		RelationTypeEnum_isSupplementedBy:    "isSupplementedBy",
		RelationTypeEnum_isSupplementTo:      "isSupplementTo",
		RelationTypeEnum_isVariantFormOf:     "isVariantFormOf",
		RelationTypeEnum_references:          "references",
		RelationTypeEnum_requires:            "requires",
		RelationTypeEnum_reviews:             "reviews",
	}
)

func init() {
	var v RelationTypeEnum
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_RelationTypeEnumNameToValue = map[string]RelationTypeEnum{
			interface{}(RelationTypeEnum_basedOnData).(fmt.Stringer).String():         RelationTypeEnum_basedOnData,
			interface{}(RelationTypeEnum_cites).(fmt.Stringer).String():               RelationTypeEnum_cites,
			interface{}(RelationTypeEnum_compiles).(fmt.Stringer).String():            RelationTypeEnum_compiles,
			interface{}(RelationTypeEnum_continues).(fmt.Stringer).String():           RelationTypeEnum_continues,
			interface{}(RelationTypeEnum_documents).(fmt.Stringer).String():           RelationTypeEnum_documents,
			interface{}(RelationTypeEnum_hasComment).(fmt.Stringer).String():          RelationTypeEnum_hasComment,
			interface{}(RelationTypeEnum_hasMetadata).(fmt.Stringer).String():         RelationTypeEnum_hasMetadata,
			interface{}(RelationTypeEnum_hasParent).(fmt.Stringer).String():           RelationTypeEnum_hasParent,
			interface{}(RelationTypeEnum_hasPart).(fmt.Stringer).String():             RelationTypeEnum_hasPart,
			interface{}(RelationTypeEnum_hasRelatedMaterial).(fmt.Stringer).String():  RelationTypeEnum_hasRelatedMaterial,
			interface{}(RelationTypeEnum_hasReply).(fmt.Stringer).String():            RelationTypeEnum_hasReply,
			interface{}(RelationTypeEnum_isAIPOf).(fmt.Stringer).String():             RelationTypeEnum_isAIPOf,
			interface{}(RelationTypeEnum_isBasedOn).(fmt.Stringer).String():           RelationTypeEnum_isBasedOn,
			interface{}(RelationTypeEnum_isBasisFor).(fmt.Stringer).String():          RelationTypeEnum_isBasisFor,
			interface{}(RelationTypeEnum_isCitedBy).(fmt.Stringer).String():           RelationTypeEnum_isCitedBy,
			interface{}(RelationTypeEnum_isCommentOn).(fmt.Stringer).String():         RelationTypeEnum_isCommentOn,
			interface{}(RelationTypeEnum_isCompiledBy).(fmt.Stringer).String():        RelationTypeEnum_isCompiledBy,
			interface{}(RelationTypeEnum_isContinuedBy).(fmt.Stringer).String():       RelationTypeEnum_isContinuedBy,
			interface{}(RelationTypeEnum_isDerivedFrom).(fmt.Stringer).String():       RelationTypeEnum_isDerivedFrom,
			interface{}(RelationTypeEnum_isDocumentedBy).(fmt.Stringer).String():      RelationTypeEnum_isDocumentedBy,
			interface{}(RelationTypeEnum_isIdenticalTo).(fmt.Stringer).String():       RelationTypeEnum_isIdenticalTo,
			interface{}(RelationTypeEnum_isMetadataFor).(fmt.Stringer).String():       RelationTypeEnum_isMetadataFor,
			interface{}(RelationTypeEnum_isNewVersionOf).(fmt.Stringer).String():      RelationTypeEnum_isNewVersionOf,
			interface{}(RelationTypeEnum_isOriginalFormOf).(fmt.Stringer).String():    RelationTypeEnum_isOriginalFormOf,
			interface{}(RelationTypeEnum_isParentOf).(fmt.Stringer).String():          RelationTypeEnum_isParentOf,
			interface{}(RelationTypeEnum_isPartOf).(fmt.Stringer).String():            RelationTypeEnum_isPartOf,
			interface{}(RelationTypeEnum_isPreviousVersionOf).(fmt.Stringer).String(): RelationTypeEnum_isPreviousVersionOf,
			interface{}(RelationTypeEnum_isReferencedBy).(fmt.Stringer).String():      RelationTypeEnum_isReferencedBy,
			interface{}(RelationTypeEnum_isReplyTo).(fmt.Stringer).String():           RelationTypeEnum_isReplyTo,
			interface{}(RelationTypeEnum_isRequiredBy).(fmt.Stringer).String():        RelationTypeEnum_isRequiredBy,
			interface{}(RelationTypeEnum_isReviewedBy).(fmt.Stringer).String():        RelationTypeEnum_isReviewedBy,
			interface{}(RelationTypeEnum_isSourceOf).(fmt.Stringer).String():          RelationTypeEnum_isSourceOf,
			interface{}(RelationTypeEnum_isSupplementedBy).(fmt.Stringer).String():    RelationTypeEnum_isSupplementedBy,
			interface{}(RelationTypeEnum_isSupplementTo).(fmt.Stringer).String():      RelationTypeEnum_isSupplementTo,
			interface{}(RelationTypeEnum_isVariantFormOf).(fmt.Stringer).String():     RelationTypeEnum_isVariantFormOf,
			interface{}(RelationTypeEnum_references).(fmt.Stringer).String():          RelationTypeEnum_references,
			interface{}(RelationTypeEnum_requires).(fmt.Stringer).String():            RelationTypeEnum_requires,
			interface{}(RelationTypeEnum_reviews).(fmt.Stringer).String():             RelationTypeEnum_reviews,
		}
	}
}

// MarshalJSON is generated so RelationTypeEnum satisfies json.Marshaler.
func (r RelationTypeEnum) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _RelationTypeEnumValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid RelationTypeEnum: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so RelationTypeEnum satisfies json.Unmarshaler.
func (r *RelationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("RelationTypeEnum should be a string, got %s", data)
	}
	v, ok := _RelationTypeEnumNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid RelationTypeEnum %q", s)
	}
	*r = v
	return nil
}

type ResourceTypeEnum int

const (
	ResourceTypeEnum_artDesignItem ResourceTypeEnum = iota
	ResourceTypeEnum_article
	ResourceTypeEnum_audio
	ResourceTypeEnum_book
	ResourceTypeEnum_bookSection
	ResourceTypeEnum_conferenceWorkshopItem
	ResourceTypeEnum_dataset
	ResourceTypeEnum_examPaper
	ResourceTypeEnum_image
	ResourceTypeEnum_informationPackage
	ResourceTypeEnum_learningObject
	ResourceTypeEnum_movingImage
	ResourceTypeEnum_musicComposition
	ResourceTypeEnum_other
	ResourceTypeEnum_patent
	ResourceTypeEnum_performance
	ResourceTypeEnum_preprint
	ResourceTypeEnum_report
	ResourceTypeEnum_review
	ResourceTypeEnum_showExhibition
	ResourceTypeEnum_software
	ResourceTypeEnum_text
	ResourceTypeEnum_thesisDissertation
	ResourceTypeEnum_unknown
	ResourceTypeEnum_website
	ResourceTypeEnum_workflow
)

func (t ResourceTypeEnum) String() string {
	switch t {
	case ResourceTypeEnum_artDesignItem:
		return "artDesignItem"
	case ResourceTypeEnum_article:
		return "article"
	case ResourceTypeEnum_audio:
		return "audio"
	case ResourceTypeEnum_book:
		return "book"
	case ResourceTypeEnum_bookSection:
		return "bookSection"
	case ResourceTypeEnum_conferenceWorkshopItem:
		return "conferenceWorkshopItem"
	case ResourceTypeEnum_dataset:
		return "dataset"
	case ResourceTypeEnum_examPaper:
		return "examPaper"
	case ResourceTypeEnum_image:
		return "image"
	case ResourceTypeEnum_informationPackage:
		return "informationPackage"
	case ResourceTypeEnum_learningObject:
		return "learningObject"
	case ResourceTypeEnum_movingImage:
		return "movingImage"
	case ResourceTypeEnum_musicComposition:
		return "musicComposition"
	case ResourceTypeEnum_other:
		return "other"
	case ResourceTypeEnum_patent:
		return "patent"
	case ResourceTypeEnum_performance:
		return "performance"
	case ResourceTypeEnum_preprint:
		return "preprint"
	case ResourceTypeEnum_report:
		return "report"
	case ResourceTypeEnum_review:
		return "review"
	case ResourceTypeEnum_showExhibition:
		return "showExhibition"
	case ResourceTypeEnum_software:
		return "software"
	case ResourceTypeEnum_text:
		return "text"
	case ResourceTypeEnum_thesisDissertation:
		return "thesisDissertation"
	case ResourceTypeEnum_unknown:
		return "unknown"
	case ResourceTypeEnum_website:
		return "website"
	case ResourceTypeEnum_workflow:
		return "workflow"

	default:
		return ""
	}
}

var (
	_ResourceTypeEnumNameToValue = map[string]ResourceTypeEnum{
		"artDesignItem":          ResourceTypeEnum_artDesignItem,
		"article":                ResourceTypeEnum_article,
		"audio":                  ResourceTypeEnum_audio,
		"book":                   ResourceTypeEnum_book,
		"bookSection":            ResourceTypeEnum_bookSection,
		"conferenceWorkshopItem": ResourceTypeEnum_conferenceWorkshopItem,
		"dataset":                ResourceTypeEnum_dataset,
		"examPaper":              ResourceTypeEnum_examPaper,
		"image":                  ResourceTypeEnum_image,
		"informationPackage":     ResourceTypeEnum_informationPackage,
		"learningObject":         ResourceTypeEnum_learningObject,
		"movingImage":            ResourceTypeEnum_movingImage,
		"musicComposition":       ResourceTypeEnum_musicComposition,
		"other":                  ResourceTypeEnum_other,
		"patent":                 ResourceTypeEnum_patent,
		"performance":            ResourceTypeEnum_performance,
		"preprint":               ResourceTypeEnum_preprint,
		"report":                 ResourceTypeEnum_report,
		"review":                 ResourceTypeEnum_review,
		"showExhibition":         ResourceTypeEnum_showExhibition,
		"software":               ResourceTypeEnum_software,
		"text":                   ResourceTypeEnum_text,
		"thesisDissertation":     ResourceTypeEnum_thesisDissertation,
		"unknown":                ResourceTypeEnum_unknown,
		"website":                ResourceTypeEnum_website,
		"workflow":               ResourceTypeEnum_workflow,
	}

	_ResourceTypeEnumValueToName = map[ResourceTypeEnum]string{
		ResourceTypeEnum_artDesignItem:          "artDesignItem",
		ResourceTypeEnum_article:                "article",
		ResourceTypeEnum_audio:                  "audio",
		ResourceTypeEnum_book:                   "book",
		ResourceTypeEnum_bookSection:            "bookSection",
		ResourceTypeEnum_conferenceWorkshopItem: "conferenceWorkshopItem",
		ResourceTypeEnum_dataset:                "dataset",
		ResourceTypeEnum_examPaper:              "examPaper",
		ResourceTypeEnum_image:                  "image",
		ResourceTypeEnum_informationPackage:     "informationPackage",
		ResourceTypeEnum_learningObject:         "learningObject",
		ResourceTypeEnum_movingImage:            "movingImage",
		ResourceTypeEnum_musicComposition:       "musicComposition",
		ResourceTypeEnum_other:                  "other",
		ResourceTypeEnum_patent:                 "patent",
		ResourceTypeEnum_performance:            "performance",
		ResourceTypeEnum_preprint:               "preprint",
		ResourceTypeEnum_report:                 "report",
		ResourceTypeEnum_review:                 "review",
		ResourceTypeEnum_showExhibition:         "showExhibition",
		ResourceTypeEnum_software:               "software",
		ResourceTypeEnum_text:                   "text",
		ResourceTypeEnum_thesisDissertation:     "thesisDissertation",
		ResourceTypeEnum_unknown:                "unknown",
		ResourceTypeEnum_website:                "website",
		ResourceTypeEnum_workflow:               "workflow",
	}
)

func init() {
	var v ResourceTypeEnum
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_ResourceTypeEnumNameToValue = map[string]ResourceTypeEnum{
			interface{}(ResourceTypeEnum_artDesignItem).(fmt.Stringer).String():          ResourceTypeEnum_artDesignItem,
			interface{}(ResourceTypeEnum_article).(fmt.Stringer).String():                ResourceTypeEnum_article,
			interface{}(ResourceTypeEnum_audio).(fmt.Stringer).String():                  ResourceTypeEnum_audio,
			interface{}(ResourceTypeEnum_book).(fmt.Stringer).String():                   ResourceTypeEnum_book,
			interface{}(ResourceTypeEnum_bookSection).(fmt.Stringer).String():            ResourceTypeEnum_bookSection,
			interface{}(ResourceTypeEnum_conferenceWorkshopItem).(fmt.Stringer).String(): ResourceTypeEnum_conferenceWorkshopItem,
			interface{}(ResourceTypeEnum_dataset).(fmt.Stringer).String():                ResourceTypeEnum_dataset,
			interface{}(ResourceTypeEnum_examPaper).(fmt.Stringer).String():              ResourceTypeEnum_examPaper,
			interface{}(ResourceTypeEnum_image).(fmt.Stringer).String():                  ResourceTypeEnum_image,
			interface{}(ResourceTypeEnum_informationPackage).(fmt.Stringer).String():     ResourceTypeEnum_informationPackage,
			interface{}(ResourceTypeEnum_learningObject).(fmt.Stringer).String():         ResourceTypeEnum_learningObject,
			interface{}(ResourceTypeEnum_movingImage).(fmt.Stringer).String():            ResourceTypeEnum_movingImage,
			interface{}(ResourceTypeEnum_musicComposition).(fmt.Stringer).String():       ResourceTypeEnum_musicComposition,
			interface{}(ResourceTypeEnum_other).(fmt.Stringer).String():                  ResourceTypeEnum_other,
			interface{}(ResourceTypeEnum_patent).(fmt.Stringer).String():                 ResourceTypeEnum_patent,
			interface{}(ResourceTypeEnum_performance).(fmt.Stringer).String():            ResourceTypeEnum_performance,
			interface{}(ResourceTypeEnum_preprint).(fmt.Stringer).String():               ResourceTypeEnum_preprint,
			interface{}(ResourceTypeEnum_report).(fmt.Stringer).String():                 ResourceTypeEnum_report,
			interface{}(ResourceTypeEnum_review).(fmt.Stringer).String():                 ResourceTypeEnum_review,
			interface{}(ResourceTypeEnum_showExhibition).(fmt.Stringer).String():         ResourceTypeEnum_showExhibition,
			interface{}(ResourceTypeEnum_software).(fmt.Stringer).String():               ResourceTypeEnum_software,
			interface{}(ResourceTypeEnum_text).(fmt.Stringer).String():                   ResourceTypeEnum_text,
			interface{}(ResourceTypeEnum_thesisDissertation).(fmt.Stringer).String():     ResourceTypeEnum_thesisDissertation,
			interface{}(ResourceTypeEnum_unknown).(fmt.Stringer).String():                ResourceTypeEnum_unknown,
			interface{}(ResourceTypeEnum_website).(fmt.Stringer).String():                ResourceTypeEnum_website,
			interface{}(ResourceTypeEnum_workflow).(fmt.Stringer).String():               ResourceTypeEnum_workflow,
		}
	}
}

// MarshalJSON is generated so ResourceTypeEnum satisfies json.Marshaler.
func (r ResourceTypeEnum) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _ResourceTypeEnumValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid ResourceTypeEnum: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so ResourceTypeEnum satisfies json.Unmarshaler.
func (r *ResourceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ResourceTypeEnum should be a string, got %s", data)
	}
	v, ok := _ResourceTypeEnumNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid ResourceTypeEnum %q", s)
	}
	*r = v
	return nil
}

type StorageStatusEnum int

const (
	StorageStatusEnum_online StorageStatusEnum = iota
	StorageStatusEnum_nearline
	StorageStatusEnum_offline
)

func (t StorageStatusEnum) String() string {
	switch t {
	case StorageStatusEnum_online:
		return "online"
	case StorageStatusEnum_nearline:
		return "nearline"
	case StorageStatusEnum_offline:
		return "offline"

	default:
		return ""
	}
}

var (
	_StorageStatusEnumNameToValue = map[string]StorageStatusEnum{
		"online":   StorageStatusEnum_online,
		"nearline": StorageStatusEnum_nearline,
		"offline":  StorageStatusEnum_offline,
	}

	_StorageStatusEnumValueToName = map[StorageStatusEnum]string{
		StorageStatusEnum_online:   "online",
		StorageStatusEnum_nearline: "nearline",
		StorageStatusEnum_offline:  "offline",
	}
)

func init() {
	var v StorageStatusEnum
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_StorageStatusEnumNameToValue = map[string]StorageStatusEnum{
			interface{}(StorageStatusEnum_online).(fmt.Stringer).String():   StorageStatusEnum_online,
			interface{}(StorageStatusEnum_nearline).(fmt.Stringer).String(): StorageStatusEnum_nearline,
			interface{}(StorageStatusEnum_offline).(fmt.Stringer).String():  StorageStatusEnum_offline,
		}
	}
}

// MarshalJSON is generated so StorageStatusEnum satisfies json.Marshaler.
func (r StorageStatusEnum) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _StorageStatusEnumValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid StorageStatusEnum: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so StorageStatusEnum satisfies json.Unmarshaler.
func (r *StorageStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("StorageStatusEnum should be a string, got %s", data)
	}
	v, ok := _StorageStatusEnumNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid StorageStatusEnum %q", s)
	}
	*r = v
	return nil
}

type StorageTypeEnum int

const (
	StorageTypeEnum_S3 StorageTypeEnum = iota
	StorageTypeEnum_HTTP
)

func (t StorageTypeEnum) String() string {
	switch t {
	case StorageTypeEnum_S3:
		return "S3"
	case StorageTypeEnum_HTTP:
		return "HTTP"

	default:
		return ""
	}
}

var (
	_StorageTypeEnumNameToValue = map[string]StorageTypeEnum{
		"S3":   StorageTypeEnum_S3,
		"HTTP": StorageTypeEnum_HTTP,
	}

	_StorageTypeEnumValueToName = map[StorageTypeEnum]string{
		StorageTypeEnum_S3:   "S3",
		StorageTypeEnum_HTTP: "HTTP",
	}
)

func init() {
	var v StorageTypeEnum
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_StorageTypeEnumNameToValue = map[string]StorageTypeEnum{
			interface{}(StorageTypeEnum_S3).(fmt.Stringer).String():   StorageTypeEnum_S3,
			interface{}(StorageTypeEnum_HTTP).(fmt.Stringer).String(): StorageTypeEnum_HTTP,
		}
	}
}

// MarshalJSON is generated so StorageTypeEnum satisfies json.Marshaler.
func (r StorageTypeEnum) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _StorageTypeEnumValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid StorageTypeEnum: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so StorageTypeEnum satisfies json.Unmarshaler.
func (r *StorageTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("StorageTypeEnum should be a string, got %s", data)
	}
	v, ok := _StorageTypeEnumNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid StorageTypeEnum %q", s)
	}
	*r = v
	return nil
}

type UploadStatusEnum int

const (
	UploadStatusEnum_uploadStarted UploadStatusEnum = iota
	UploadStatusEnum_uploadComplete
	UploadStatusEnum_uploadAborted
)

func (t UploadStatusEnum) String() string {
	switch t {
	case UploadStatusEnum_uploadStarted:
		return "uploadStarted"
	case UploadStatusEnum_uploadComplete:
		return "uploadComplete"
	case UploadStatusEnum_uploadAborted:
		return "uploadAborted"

	default:
		return ""
	}
}

var (
	_UploadStatusEnumNameToValue = map[string]UploadStatusEnum{
		"uploadStarted":  UploadStatusEnum_uploadStarted,
		"uploadComplete": UploadStatusEnum_uploadComplete,
		"uploadAborted":  UploadStatusEnum_uploadAborted,
	}

	_UploadStatusEnumValueToName = map[UploadStatusEnum]string{
		UploadStatusEnum_uploadStarted:  "uploadStarted",
		UploadStatusEnum_uploadComplete: "uploadComplete",
		UploadStatusEnum_uploadAborted:  "uploadAborted",
	}
)

func init() {
	var v UploadStatusEnum
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_UploadStatusEnumNameToValue = map[string]UploadStatusEnum{
			interface{}(UploadStatusEnum_uploadStarted).(fmt.Stringer).String():  UploadStatusEnum_uploadStarted,
			interface{}(UploadStatusEnum_uploadComplete).(fmt.Stringer).String(): UploadStatusEnum_uploadComplete,
			interface{}(UploadStatusEnum_uploadAborted).(fmt.Stringer).String():  UploadStatusEnum_uploadAborted,
		}
	}
}

// MarshalJSON is generated so UploadStatusEnum satisfies json.Marshaler.
func (r UploadStatusEnum) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _UploadStatusEnumValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid UploadStatusEnum: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so UploadStatusEnum satisfies json.Unmarshaler.
func (r *UploadStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("UploadStatusEnum should be a string, got %s", data)
	}
	v, ok := _UploadStatusEnumNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid UploadStatusEnum %q", s)
	}
	*r = v
	return nil
}
